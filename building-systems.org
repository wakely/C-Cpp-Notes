#+INCLUDE: theme/style.org 
#+TITLE: CPP / C++ - Building Systems and Build Automation 
#+DESCRIPTION: cpp/c++ code examples and demonstrations.
#+STARTUP: content 

 + [[wiki:index][Index]]

* Building Systems and Build Automation 
** Building System 

Some building systems:

  + [[https://cmake.org/][CMake]] Meta building system which can generate project files and
    building scripts for platform-preferred building systems. For
    instance, it can generate Makefile for U*nix-like system, Ninja
    build scripts, Visual Studio solutions and so on.
    + Note: CMake may not be the best building system or not have the best
      IDEs. Now, it is supported by Microsft's Visual Studio and
      JetBrains' Clion IDE and others.
    + See:
      + [[http://cliutils.gitlab.io/modern-cmake/][An Introduction to Modern CMake]]
      + [[https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1][Effective Modern CMake]]
      + https://github.com/ttroy50/cmake-examples
      + [[https://cristianadam.eu/20181202/a-better-qnx-cmake-toolchain-file/][A Better QNX CMake Toolchain File - Cristian Adam]]

  + *GNU Autotool* (GNU Building System) - One of the most used building
    systems in open source projects for Unix-like operating systems,
    specially Linux.
    + Projects using GNU autotool have the files: configure.ac and
      Makefine.am. They often have the instruction for installing as:
      ./configure && make && make install. 
    + Projects using Autotools: Emacs editor; GIT version control
      system; GNU Core utils; GIMP image manipulation app.
    + Problems:
      + Brittle and poorly designed. 
      + Hard to read 
      + Hard to use and complicated
      + Requires many configuration files.
      + Does not work well on Windows 
      + Not famililar for Windows users.

  + [[https://github.com/microsoft/msbuild][MSBuild]] / *Visual Studio Solutions*
    * Building system used by Microsft Visual Studio IDE. The
      configuration files, _*.vcxproj_ and _*.sln_ of Visual Studio
      Solution are both building systems scripts and project
      configuration files.
    * Features:
      + Most used building system on MS-Windows for C# and C++ projects.
      + Some Windows frameworks such as MFC - Microsft Foundation and
        ATL - Active Template Library only support Visual Studio
        Solutions. 
    * Problems:
      + Only supported by Visual Studio IDE and Visual Studio Code Editor.
      + Only supported on Windows.
      + Lots of cryptic XML files, not human-readable and not intended
        to be edited directly.
      + The code from Visual Solution files cannot be reused. Any
        changes requires several clicks and browsing the IDE, thus not
        scalable.
      + Hard to use external libraries dependencies.
      + Hard to build from command line, require batch script hacks.
    * Note:
      + Visual Studio IDE, now has CMake support.
      + MSBuild engine now is open source available at https://github.com/microsoft/msbuild
    * See:
      + [[https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild?view=vs-2019][MSBuild concepts]] 
      + [[https://docs.microsoft.com/en-us/cpp/build/msbuild-visual-cpp?view=vs-2019][MSBuild on the command line - C++]]
      + [[https://docs.microsoft.com/en-us/cpp/build/projects-and-build-systems-cpp?view=vs-2019][C/C++ projects and build systems in Visual Studio]]
      + [[https://docs.microsoft.com/en-us/visualstudio/extensibility/internals/solution-dot-sln-file?view=vs-2019][Solution (.sln) file]] 
      + [[https://docs.microsoft.com/en-us/visualstudio/ide/solutions-and-projects-in-visual-studio?view=vs-2019][Solutions and projects in Visual Studio]]
      + [[https://devblogs.microsoft.com/cppblog/building-your-c-application-with-visual-studio-code/][Building your C++ application with Visual Studio Code]]

  + [[https://mesonbuild.com/][Meson]] - "Meson is an open source build system meant to be both
    extremely fast, and, even more importantly, as user friendly as
    possible. The main design point of Meson is that every moment a
    developer spends writing or debugging build definitions is a
    second wasted. So is every second spent waiting for the build
    system to actually start compiling code."
    + Features:
      + multiplatform support for Linux, macOS, Windows, GCC, Clang,
        Visual Studio and others 
      + supported languages include C, C++, D, Fortran, Java, Rust
      + built-in multiplatform dependency provider that works together
        with distro packages 
    + Side notes: 
      + Can generate Visual Studio Projects
      + Uses Ninja building system as backend.
      + Support CMake dependencies
      + Supports Conan package manager 
    + Projects using Meson:
      + [[https://gitlab.gnome.org/GNOME/nautilus][Nautilus]] 
      + [[https://github.com/systemd/systemd][SystemD]]
      + [[https://github.com/radare/radare2][Radare2]]
      + [[https://mesonbuild.com/Users.html][Full list]]
    + IDE Support:
      + [[https://wiki.gnome.org/Apps/Builder][Gnome Builder]]
      + [[https://www.kdevelop.org/][KDevelop]]
      + [[https://www.eclipse.org/cdt/][Eclipse CDT (Experimental support)]]
      + [[https://github.com/prozum/meson-cmake-wrapper][Meson CMake Wrapper]] => For IDEs that support CMake (Visual
        Studio, CLion, QTCreator, KDevelop) 
    + Problems:
      + Less IDE support and adoption than CMake and harder to use
        with IDEs.

  + *QMake* - QT Framework Building Systems
    + Problem: Brittle and only supported by QTCreator IDE.
    + Note: QT Now supports CMake

  + *KBuild* - Linux Kernel's building system. => Building system used
    for building Linux kernel image and kernel modules (device drivers).

  + [[https://build2.org/][build2]] - "build2 is an open source (MIT), cross-platform build
    toolchain for developing and packaging C++ code. It is a hierarchy
    of tools that includes the build system, package dependency manager
    (for package consumption), and project dependency manager (for
    project development)."
    + See: [[https://news.ycombinator.com/item?id=17188851][Build2, a Cargo-like dependency and build manager for C/C++ | Hacker News]]

  + [[https://xmake.io][xmake]] -  "xmake is a cross-platform build utility based on lua. The
    project focuses on making development and building easier and
    provides many features (.e.g package, install, plugin, macro,
    action, option, task ...), so that any developer can quickly pick
    it up and enjoy the productivity boost when developing and building
    project. "
    + Github: https://github.com/tboox/xmake
    + Advatange:
      + Lua-like syntax
      + Less verbose than CMake
      + Run lua scripts
      + Generation of projects, for instance Visual studio solutions.

  + [[https://docs.bazel.build/versions/master/bazel-overview.html][Bazel]] (Building system created by Google for C and C++.)
    + "Bazel is an open-source build and test tool similar to Make,
      Maven, and Gradle. It uses a human-readable, high-level build
      language. Bazel supports projects in multiple languages and
      builds outputs for multiple platforms. Bazel supports large
      codebases across multiple repositories, and large numbers of
      users."
    + Note: Written in Java. 

  + *Make* (GNU Make, BSD Make and NMake) - Simple and quick building
    system more used on Unix-like operating systems.
    + Disadvantages:
      + Fragmentation - There are many variants (GNU Make, BSD Make
        and NMake - Microsft's Make), although GNU Make is the most
        used one. 
      + Brittle
      + Hard to modify
      + Hard to add dependencies 

** Package Managers

 *Package Managers*
 
There are several solutions for managing dependencies in C++ projects,
however they are still no widely used or integrated to IDEs and
building systems. A reasonable set of features for selecting a package
manager is CMake support, CMake integration, IDE integration, command
line interface and distributed repositories. Some of them are:

 + [[https://www.conan.io/][Conan]] [Most mature], [BEST] - Dependency manager written in Python which
   can install source packages from multiple repositories, including
   local network and current machine package cache of pre-compiled
   object code.
   + Creator: Diego Rodriguez Losada
   + CMake Support: YES
   + Implementation Issues: As Conan is written in Python, it requires
     a Python installation. 
   + Package authoring: Packages configuration are written in Python.
   + See:
     + [[https://blog.conan.io/2017/05/11/C-C++-Binary-Package-Management-for-Visual-Studio.html][C/C++ Binary Package Management for Visual Studio]]
   + Video:
     + [[https://www.youtube.com/watch?v=xvqH_ck-5Q8][CppCon 2016: Diego Rodriguez-Losada "Conan, a C and C++ package manager for developers"]]
     + Humor, funny: [[https://www.youtube.com/watch?v=nLdB1ErncBg][CppCon 2016: Diego Rodriguez-Losada "Why not Conan?"]]
     + [[https://www.youtube.com/watch?v=CCKiKGn-ew8][Diego Rodriguez-Losada: Conan C++ package manager]]

 + [[https://docs.microsoft.com/en-us/cpp/vcpkg?view=vs-2017][vcpkg]] [Most mature], [BEST] - open source cross-platform C++ package
   manager created by Microsft Inc.
   + Creator: Microsft Inc. MSFT
   + CMake Support: YES
   + Documentation: https://vcpkg.readthedocs.io/en/latest/
   + Repository: https://github.com/Microsoft/vcpkg
   + FAQ: [[https://github.com/Microsoft/vcpkg/blob/master/docs/about/faq.md][VCpkg FAQ]]
   + See:
     + [[https://blog.kitware.com/vcpkg-a-tool-to-build-open-source-libraries-on-windows/][Vcpkg: A tool to build open source libraries on Window]]
     + Video: Microsft - [[https://www.youtube.com/watch?v=zo6nqFVBd5o][Vcpkg a tool to build open source C++ libraries]]
     + Video: Microsft - [[https://channel9.msdn.com/Shows/C9-GoingNative/GoingNative-54-Whats-New-In-Visual-Studio-2017-RC-and-Introduction-To-Vcpkg][GoingNative 54: What's New In Visual Studio 2017 RC and Introduction To Vcpkg]]
     + Video: [[https://www.youtube.com/watch?v=KOeOLOu6nHw][C++ Weekly - Ep 118 - Trying Out The vcpkg Package Manager]]

 + [[http://www.buckaroo.pm/][Buckaroo]] - "A C++ package manager that will take you to your happy place"
   + Creator: LoopPerfect Limited LTD.
   + CMake Support: Backaroo uses Buck build system as its default
     building system, although there is still some limited support to
     CMake. More info. at [[https://github.com/LoopPerfect/buckaroo/wiki/Building-CMake-Projects][Buildign CMake projects]]
   + Repository: https://github.com/LoopPerfect/buckaroo
   + Documentation: https://github.com/LoopPerfect/buckaroo/wiki/
   + Buckaroo-recipes: https://github.com/LoopPerfect/buckaroo-recipes/tree/master/recipes

 + [[https://www.qpm.io/][QPM]] - Pcakge manager for QT.
   + Repository: https://github.com/Cutehacks/qpm
   + CMake Support: ???
   + Package listing: https://www.qpm.io/packages/index.html

 + [[https://github.com/pfultz2/cget][cget]] - "Cmake package retrieval. This can be used to download and
   install cmake packages." Decentralized: Packages can be installed
   from anywhere, from github, urls, or local files. NOTE: It is not a
   package manager.
   + Creator: Paul Fultz
   + CMake Support: YES 
   + Repository: https://github.com/pfultz2/cget

 + [[https://github.com/ruslo/hunter][Hunter]] - Cross-platform package manager for C/C++ fully integrated
   to CMake, it does not need any external configuration file or run
   any application before editing the project or running cmake from
   command line. All the libraries to be installed are set in the
   file CMakeFiles.txt. If they are not available in the system, they
   are automatically downloaded and installed.
   + Creator: Ruslan Baratov
   + CMake Support: YES
   + Documentation: https://docs.hunter.sh
   + Package list: https://docs.hunter.sh/en/latest/packages.html
   + Note: It is still under development, but it seems promising.

 + [[https://cppan.org/][Cppan]] - "CPPPAN is the crossplatform C/C++ dependency manager. It
   is built on top of CMake and also has build system capabilities."
   + Creator: Egor Pugin
   + CMake Support: ???
   + Repository: https://github.com/cppan/cppan
   + Documentation: https://github.com/cppan/cppan/tree/v1/doc

 + [[https://build2.org/][Build2]] - "build2 is an open source (MIT), cross-platform build
   toolchain for developing and packaging C++ code. It is a hierarchy
   of tools that includes the build system, package dependency manager
   (for package consumption), and project dependency manager (for
   project development)."
   + Creator: [[https://codesynthesis.com/][Code Synthesis LTDA]], Boris Kolpackov
   + CMake Support: NO 
   + Package listing: https://cppget.org/
   + Possible shortcoming: No integration with CMake building-system
     and no integration to IDEs like CMake.
   + See:
     + Video: [[https://www.youtube.com/watch?v=Nni2Qu2WitY&feature=youtu.be][CppCon 2018: "C++ Dependency Management: from Package Consumption to Project Development"]]

 + [[https://github.com/iauns/cpm][CPM]] - [NO LONGER MAINTENED] "A C++ Package Manager based on CMake and Git."

 + [[https://spack.io/][Spack]] - "Spack is a package manager for supercomputers, Linux, and
   macOS. It makes installing scientific software easy. With Spack,
   you can build a package with multiple versions, configurations,
   platforms, and compilers, and all of these builds can coexist on
   the same machine."
   + Repository: https://github.com/spack/spack

 + [[https://blogs.msdn.microsoft.com/vcblog/2013/04/26/nuget-for-c/][Nuget]] - A pacakge manager used in Visual Studio for C#, VB.NET,
   Javascript and C++.
   + Creator: Microsft Inc. MSFT
   + CMake Support: NO 
   + Problem: It seems to work only on Windows and Visual Studio.
   + See: 
     + https://blog.nuget.org/20130426/native-support.html
     + Video: [[https://www.youtube.com/watch?v=FIY4FZDIt8Q][Consuming Native NuGet Packages in Visual Studio]]
     + https://blog.scalyr.com/2018/07/getting-started-quickly-c-logging/
     + [[https://www.microsofttranslator.com/bv.aspx?from=&to=en&a=https://qiita.com/nia_tn1012/items/77c3c1b006f7c69d30ac][Let's use Nuget in C++ project]] (Translated from Japanese with Bing Translator.)


 *Considerations for package manager choice*

 + The most mature package managers with CMake integration are Conan
   and Vcpkg. Vcpkg has the largest number of packages available.
   However, it is not possible to install multiple versions of the
   same package or host a local package repository.

 + Conan is more documented and provides more control over package
   versions. It has descentralized repositories and also allows users to
   host local or intranet private repositories. A minor problem
   of Conan is the Python installation requirement, but this issue
   could be quickly solved by turning Conan into a single native
   executable file by packing Conan Python module with the Python
   interpreter with tools like Py2Exe for Windows. 

Comparative table:

|-----------------------------------+--------+--------|
| Feature                           | Conan  | Vcpkg  |
|-----------------------------------+--------+--------|
| Standalone                        | NO     | YES    |
| Decentralized repositories        | YES    | NO     |
| Local Repository                  | YES    | NO     |
| Multiple versions of same package | YES    | NO     |
| Integration with IDEs             | NO     | NO     |
| Most Simple                       | -      | Winner |
| More packages                     | -      | Winner |
| User control                      | Winner | -      |
|-----------------------------------+--------+--------|
| Overall                           | Winner | -      |
|-----------------------------------+--------+--------|

 *Some reasonable set of features for a package managers*

 + CMake integration
 + Default repository, descentralized and local repositories.
 + Cross platform
 + Easier to use from CMake without needing to call any external
   command, the packages to be installed should be defined in the
   CMakeLists.txt file.
 + Command line tools
 + Browse package metadata from command line or IDE like .net's Nuget
   or Python's pip.
 + Integration with IDEs
 + Standalone no depending on any interpreter or
   external dependency or fully packed with the interpreter making
   easier to install and deploy.

 *Low tech approaches for package or dependency management*

 + GIT Submodules

 + Use system-specific package manager for instance: Ubuntu: apt-get;
   Fedora Linux: dnf; BSD Ports: ...
   + Disadvantage: Hard to reproduce compilation across different
     machines as most Linux distributions only provide a single
     version and may not have all necessary libraries and header-only
     libraries.

 + Add libraries manually

 + Install packages manually in the systems:
   + ./configure && make && make install

 + Copy header-only libraries to project-directory


 *Interesting discussions:*

 + Reddit /r/cpp [[https://www.reddit.com/r/cpp/comments/3d1vjq/is_there_a_c_package_manager_if_not_how_do_you/][Is there a C++ package manager? If not, how do you handle dependencies?]]
 + Reddit /r/cpp - [[https://www.reddit.com/r/cpp/comments/5v10r1/downsides_to_conanio/][Downsides to Conan.io?]]
 + Reddit /r/cpp - [[https://www.reddit.com/r/cpp/comments/40cfbk/hunter_crossplatform_package_manager_for_c/][Hunter - Cross-platform package manager for C++]]
 + [[https://news.ycombinator.com/item?id=16915195][Announcing a single C++ library manager for Linux, macOS and Windows: Vcpkg]]

* Make and GNU Make - Makefiles 
*** Overview 

Despite being one of the oldest building systems for C and C++, dating
back to 1976, Make is still widely used on Unix-like operating
systems, such as Linux, BSD-variants, MacOSX and so on. Make is not
only useful for C or C++, the tool can also be used with any other
programming language or for any type of building automation such as
compiling Latex (Tex) files. 

Make Variants (Implementations):
   + GNU Make (Most used)
   + BSD Make
   + NMake - Microsft's Make

Note: 
 + This text assumes that the *Make* used is *GNU Make*

Advantages: 
   + Easier usage
   + Available on most Unix-like operating systems
   + Can be used for automating any type of building. 

Drawbacks: 

   + Makefiles uses tabs instead of spaces which makes it brittle and
     easier to break if the editor settings are not appropriate.

   + Fragmentation: there is no a single Make tool, actually there are
     many incompatible implementations, namely: BSD Make; GNU Make,
     mostly used on Linux; Microsft's Make or NMake.

   + Hard to use on Windows, Make requires many helper executables
     such as echo, cp, ls, rm, ...

   + Poor IDE support 

   + No scalable for large projects

   + Hard to change     

   + Hard to add dependencies

   + Hard to understand and modify

 *Command Line Summary*

|--------------------------------------------+----------------------------------------------------------------------------------------|
| Make Command                               | Description                                                                            |
|--------------------------------------------+----------------------------------------------------------------------------------------|
| $ make --version                           | Show version                                                                           |
| $ make --help                              | Show help                                                                              |
|                                            |                                                                                        |
| $ make                                     | Run the file 'Makefile' in the current directory, executing the 'all' target.          |
| $ make CC=clang CXX=clang++                | Target 'all' for current Makefile, but sets C compiler to clang and C++ one to clang++ |
| $ make <TARGET>                            | Run the target <TARGET>                                                                |
| $ make <TARGET> VAR1=VAL1 VAR2=VAL2        | Run some target named <TARGET> setting variable VAR1 to VAL1, VAR2 to VAL2.            |
| $ make clean                               | Run the target 'clean' for the Makefile in current directory.                          |
| $ make install                             | Run the target 'install' for the current Makefile                                      |
| $ make help                                | Run the target 'help' for the current Makefile.                                        |
|                                            |                                                                                        |
| $ make -C ~/path/dir~                        | Run the file 'Makefile' in the directory  ~/path/dir~, executes 'all' target.            |
| $ make -C ~/path/dir~ <TARGET>               | Executes target <TARGET> of Makefile in  ~/path/dir~                                     |
| $ make -f Other.make                       | Run the Makefile named 'Other.make' in current directory                               |
| $ make -f Other.make <TARGET>              | Run the target <TARGET> of Makefile named 'Other.make' in current directory.           |
| $ make -C ~/path/dir~ -f Other.make          | Run the Makefile named Other.make' in directory ~/path/dir~,  executes 'all' target      |
| $ make -C ~/path/dir~ -f Other.make <TARGET> | Run the Makefile named Other.make' in directory ~/path/dir~,  executes 'all' target      |
|                                            |                                                                                        |
|--------------------------------------------+----------------------------------------------------------------------------------------|

 *Common Make variables Summary*

|----------+------------------------------------------------|
| Variable | Description                                    |
|----------+------------------------------------------------|
| CC       | C compiler, most common value is 'gcc'         |
| CXX      | C++ Compiler, most common value is 'g++'       |
| LD       | Linker                                         |
|          |                                                |
| CFLAGS   | C compilation flags, i.e: -Wall -Wextra -g ... |
| CXXFLAGS | C++ compilation flags                          |
|          |                                                |
|          |                                                |
|----------+------------------------------------------------|


 *Target Shortcuts summary* 

|--------------+--------------------------------------------|
| Variable     | Description                                |
|--------------+--------------------------------------------|
| *Target*       |                                            |
| $@           | target file name                           |
| $(@D)        | target path (directory only)               |
| $(@F)        | target file name without directory         |
|              |                                            |
| *Dependencies* |                                            |
| $<           | name of first dependency                   |
| $*           | name of first dependency without extension |
| $^           | name of all dependencies of the target     |
| $(<D)        | path of first dependencies                 |
| $(<F)        | paths of all dependencies                  |
|              |                                            |
|--------------+--------------------------------------------|

 *Makefile Variable Tricks Summary*

|------------------------------------------+-----------------------------------------+----------------------------------------------|
| Trick                                    | Expansion                               | Description                                  |
|------------------------------------------+-----------------------------------------+----------------------------------------------|
| SRC     := $(wildcard src/*.cpp)         | SRC := src/fil1.cpp src/file2.cpp ...   | Gets all files with *.cpp extension in ./src |
| packs   := n0 n1 n2                      |                                         |                                              |
| packs-p := $(addprefix --pack ,$(packs)) | pack-p := --pack n1 --pack n2 --pack n3 | Add prefix --pack to each ~n[i]~               |
| pwd     := $(shell pwd)                  | pwd := /home/archbox/project1           | Expands to shell command output.             |
| ~${HOME}~                                  | /home/user/username                     | Expands to environment variable              |
| file    := ${HOME}/file1.exe             | /home/user/username/file1.exe           | -                                            |
|                                          |                                         |                                              |
|------------------------------------------+-----------------------------------------+----------------------------------------------|

Multi line variable assignment

#+BEGIN_SRC makefile 
  CFLAGS  = -DUSE_STDPERIPH_DRIVER
  CFLAGS += -c -fmessage-length=0 -g3 -gdwarf-2 -O0 -Wall -Wa,-adhlns="$@.lst"
  CFLAGS += -mthumb -mcpu=cortex-m4
  CFLAGS += -MMD -MP -MF"$@.d" -MT"$@.d"
  CFLAGS += -Iinc -Iinc/cmsis -Iinc/peripherals -Iinc/stm32f4xx
#+END_SRC

*** Project Example 

 *File: Makefile*

#+BEGIN_SRC sh
     #---------------------------------------------------#
     #     Compilation and Linker Settings               #
     #---------------------------------------------------#

  CXX = g++   # C++ Compiler
  CC  = gcc   # C Compiler

  CCFLAGS  =                          # C compiler flags
  CXXFLAGS = -std=c++1z -pedantic -Wall -Wextra # C++ Compiler flags

  LDFLAGS   =   # C Linker Flags
  LDXXFLAGS =   # C++ Linker flags

  # DEBUG = 1 => Enables debug building
  # DEBUG = 0 => Enable release building
  DEBUG ?= 0
  ifeq ($(DEBUG), 1)
      # (-g)  => Enable debug symbols
      # (-O0) => Disable optimizations
      # -DNDEBUG => Enable assertions
      CXXFLAGS  += -g -O0  -DNDEBUG
  else
       # Release mode =>> Enable optimization
       CXXFLAGS += -O3
       # Enable Link-time optimiztion
       LDXXFLAGS += # -flto -ffunction-sections -fdata-sections
  endif

  APP2_OBJS = app2.o stats.o

     #---------------------------------------------------#
     #     Makefile Rules                                #
     #---------------------------------------------------#

  # Main rule executed when use runs '$ make' without
  # any argument.
  #---------------------------------------------------
  all: app1.bin app2.bin

  # This rule builds the executable 'app1.bin'
  #----------------------------------------------------
  #  $^ => Refers to all dependencies (app1.o, app1.o)
  #  $@ => Refers to the target name, 'app1.bin'
  app1.bin : app1.o stats.o
          @echo -e "\n [INFO] Building executable 'app1.bin'"
          $(CXX) -o $@ $^ $(LDXXFLAGS)

  # This rule builds the executable 'app2.bin'
  #----------------------------------------------------
  #  $^ => Refers to all dependencies (app1.o, app1.o)
  #  $@ => Refers to the target name, 'app1.bin'
  app2.bin : $(APP2_OBJS)
          @echo -e "\n [INFO] Building executable 'app2.bin'"
          $(CXX) -o $@ $^ $(LDXXFLAGS)

  # Compiles all *.cpp files to *.o (object-code files) which
  # are inputs to the linker.
  #
  #--------------------------------------------------
  #  $< => Name of dependency (on right-hand size, example: someFile.cpp)
  #  $@ => Name of target (on the left-hand side)
  #
  %.o : %.cpp
          @echo -e "\n [INFO] Building object code: $<"
          $(CXX) -c $< -o $@  $(CXXFLAGS)

  # This rule runs the executable app1.bin, the dependency is 'app1.bin'
  #------------------------------------------------------------
  app1_run: app1.bin
          ./app1.bin

  # This rule deletes all object-codes (*.o, *.bin, *.so, *.dll, *.exe ...)
  #-------------------------------------------------------
  clean:
          @echo -e "\n [INFO] Cleaning compilation output."
          rm -rf -v *.o *.bin

  install: app1.bin app2.bin
          @echo -e "\n [INFO] Installing application to: $(INSTALL_PATH)"
          mkdir -p $(INSTALL_PATH)
          cp -rv $^ $(INSTALL_PATH)
#+END_SRC

 *File: stats.hpp*

#+BEGIN_SRC cpp 
   #include <iostream>
   #ifndef _STATS_HPP_
   #define _STATS_HPP_

   class Stats
   {
   public:
           Stats();
           ~Stats();
           Stats(const Stats&) = delete;
           Stats& operator=(const Stats&) = delete;
           void   add(double x);
           void   clear();
           double mean() const;
           double sum()  const;
           size_t count() const;	
   private:
           struct pimpl;
           pimpl* m_pimpl;
   };

   #endif 
#+END_SRC

 *File: stats.cpp* 

#+BEGIN_SRC cpp 
   #include <iostream>
   #include <cmath>
   #include <algorithm> 
   #include <vector>
   #include <numeric>

   #include <stats.hpp>

   struct Stats::pimpl {
      std::vector<double> dataset = {};
   };

   Stats::Stats(): m_pimpl(new Stats::pimpl)
   { }

   Stats::~Stats() {
       std::puts(" [INFO] ~Stats() destructor called. Ok. ");
       delete m_pimpl;
       m_pimpl = nullptr;
   }

   void Stats::add(double x) 
   {
       m_pimpl->dataset.push_back(x);
   }

   void Stats::clear()
   {
      m_pimpl->dataset.clear();
   }

   double Stats::sum() const
   {
       return std::accumulate( m_pimpl->dataset.begin()
                             , m_pimpl->dataset.end(), 0.0);
   }

   double Stats::mean() const 
   {
       return this->sum() / m_pimpl->dataset.size();
   }

   size_t Stats::count() const {
       return m_pimpl->dataset.size();
   }
#+END_SRC

 *File: app1.cpp* 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <stats.hpp> 

  int main()
  {
        std::cout << " [TRACE] Running application 'app1' - OK" << "\n";

        Stats st;
        st.add(10.0); st.add(20.6354); st.add(-5.62); st.add(8.623);
        st.add(20.0); st.add(20.6354); st.add(-5.62); st.add(8.623);

        std::cout << "  => st.count() = " << st.count() << "\n";
        std::cout << "  =>   st.sum() = " << st.sum() << "\n";
        std::cout << "  =>  st.mean() = " << st.mean() << "\n";

        return 0;
  }
#+END_SRC

 *File: app2.cpp* 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <string>

  #include "stats.hpp"

  int main(int argc, char** argv)
  {
       std::cout << " [INFO] Running application: 'app2' - OK" << "\n";

       if(argc < 2){
           return EXIT_FAILURE;
       }

       Stats st;

       for(int i = 1; i < argc; i++)
          try {
             st.add( std::stod(argv[i]) );
          } catch(std::invalid_argument const& ex)
          {
             std::cerr << " Error: invalid input <" << argv[i] << std::endl;
             return EXIT_FAILURE;	
          }

       std::cout << "  => st.count() = " << st.count() << "\n";
       std::cout << "  =>   st.sum() = " << st.sum() << "\n";
       std::cout << "  =>  st.mean() = " << st.mean() << "\n";	

       return EXIT_SUCCESS;
  }
#+END_SRC

  *Run target 'all'* (Release mode)

 + $ make => Runs rule 'all'

#+BEGIN_SRC sh 
  $ make

   [INFO] Building object code: app1.cpp
  g++    -c app1.cpp -o app1.o  -std=c++1z -pedantic -Wall -Wextra  -O3

   [INFO] Building object code: stats.cpp
  g++    -c stats.cpp -o stats.o  -std=c++1z -pedantic -Wall -Wextra  -O3

   [INFO] Building executable 'app1.bin'
  g++    -o app1.bin app1.o stats.o  

   [INFO] Building object code: app2.cpp
  g++    -c app2.cpp -o app2.o  -std=c++1z -pedantic -Wall -Wextra  -O3

   [INFO] Building executable 'app2.bin'
  g++    -o app2.bin app2.o stats.o  

#+END_SRC

 *Run target 'all'* (Debug Mode)

Run target 'all' which builds target 'app1.bin', 'app2.bin'

#+BEGIN_SRC sh 
  $ make DEBUG=1

   [INFO] Building object code: app1.cpp
  g++    -c app1.cpp -o app1.o  -std=c++1z -pedantic -Wall -Wextra  -g -O0  -DNDEBUG

   [INFO] Building object code: stats.cpp
  g++    -c stats.cpp -o stats.o  -std=c++1z -pedantic -Wall -Wextra  -g -O0  -DNDEBUG

   [INFO] Building executable 'app1.bin'
  g++    -o app1.bin app1.o stats.o 

   [INFO] Building object code: app2.cpp
  g++    -c app2.cpp -o app2.o  -std=c++1z -pedantic -Wall -Wextra  -g -O0  -DNDEBUG

   [INFO] Building executable 'app2.bin'
  g++    -o app2.bin app2.o stats.o 

#+END_SRC

Debug application 'app1.bin'

#+BEGIN_SRC sh
   $ gdb --silent app1.bin 
   Printing of typedefs defined in a class in on
   Reading symbols from app1.bin...done.

   (gdb) list
   1	#include <iostream>
   2	
   3	#include <stats.hpp> 
   ... ... ... ... 

   # Set breaking point at main() 
   (gdb) b main

   # Run program app1.bin 
   (gdb) r

   gdb) n
    [TRACE] Running application 'app1' - OK
   9		Stats st;

   (gdb) p st
   $1 = {
     m_pimpl = 0x616280
   }
 
   ... ...    ... ...    ... ...    ... ... 

  (gdb) p st->m_pimpl->dataset
  $5 = std::vector of length 8, capacity 8 = {10, 20.635400000000001, -5.6200000000000001, 
    8.6229999999999993, 20, 20.635400000000001, -5.6200000000000001, 8.6229999999999993}
  (gdb) 
#+END_SRC

 *Run target 'clean'*

Clean all compilation files: 

#+BEGIN_SRC sh 
   $ make clean

    [INFO] Cleaning compilation output.
   rm -rf -v *.o *.bin
   removed 'app1.o'
   removed 'app2.o'
   removed 'stats.o'
   removed 'app1.bin'
   removed 'app2.bin'
#+END_SRC

 *Run target 'app1.bin'*

#+BEGIN_SRC sh 
  $ make app1.bin

   [INFO] Building object code: app1.cpp
  g++    -c app1.cpp -o app1.o  -std=c++1z -pedantic -Wall -Wextra  -O3

   [INFO] Building object code: stats.cpp
  g++    -c stats.cpp -o stats.o  -std=c++1z -pedantic -Wall -Wextra  -O3

   [INFO] Building executable 'app1.bin'
  g++    -o app1.bin app1.o stats.o  
#+END_SRC

 *Run target 'app2.bin'*

#+BEGIN_SRC sh
  $ make app2.bin

   [INFO] Building object code: app2.cpp
  g++    -c app2.cpp -o app2.o  -std=c++1z -pedantic -Wall -Wextra  -O3

   [INFO] Building executable 'app2.bin'
  g++    -o app2.bin app2.o stats.o  
#+END_SRC

 *Run target 'app1_run'*

The target app1_run runs the executable 'app1.bin'. It is only
compiled if not built yet.

#+BEGIN_SRC sh 
  $ make app1_run

   [INFO] Building object code: app1.cpp
  g++    -c app1.cpp -o app1.o  -std=c++1z -pedantic -Wall -Wextra  -O3

   [INFO] Building object code: stats.cpp
  g++    -c stats.cpp -o stats.o  -std=c++1z -pedantic -Wall -Wextra  -O3

   [INFO] Building executable 'app1.bin'
  g++    -o app1.bin app1.o stats.o  
  ./app1.bin
   [TRACE] Running application 'app1' - OK
    => st.count() = 8
    =>   st.sum() = 77.2768
    =>  st.mean() = 9.6596
   [INFO] ~Stats() destructor called. Ok. 
#+END_SRC

Run target again: 

#+BEGIN_SRC sh 
  $ make app1_run
  ./app1.bin
   [TRACE] Running application 'app1' - OK
    => st.count() = 8
    =>   st.sum() = 77.2768
    =>  st.mean() = 9.6596
   [INFO] ~Stats() destructor called. Ok. 
#+END_SRC

 *Run target 'install'*

Run target 'make install'

#+BEGIN_SRC sh 
  $ make install INSTALL_PATH=/tmp/bin DEBUG=1

   [INFO] Building object code: app1.cpp
  g++    -c app1.cpp -o app1.o  -std=c++1z -pedantic -Wall -Wextra  -g -O0  -DNDEBUG

    ... ... ...   ... ... ...   ... ... ...   ... ... ...   ... ... ... 

   [INFO] Installing application to: /tmp/bin
  mkdir -p /tmp/bin
  cp -rv app1.bin app2.bin /tmp/bin
  'app1.bin' -> '/tmp/bin/app1.bin'
  'app2.bin' -> '/tmp/bin/app2.bin'
#+END_SRC

Test applications/executables: 

#+BEGIN_SRC sh 
  $ /tmp/bin/app2.bin 10.354 -9.243  100.523 5.6154
   [INFO] Running application: 'app2' - OK
    => st.count() = 4
    =>   st.sum() = 107.249
    =>  st.mean() = 26.8123
   [INFO] ~Stats() destructor called. Ok. 
#+END_SRC

*** Reading 

 *Documentation*

   * *GNU Make Manual*
     * <http://www.chiark.greenend.org.uk/doc/make-doc/make.html/index.html#SEC_Contents>

 *Useful Reading*

   * *Make (Software)* - Wikipedia 
     * <https://en.wikipedia.org/wiki/Make_(software)>

   * *Tutorial on writing makefiles*
     * <https://www.math.colostate.edu/~yzhou/computer/writemakefile.html>

   * *Practical Makefiles, by example* - John Tsiombikas
     * <http://nuclear.mutantstargoat.com/articles/make/>

   * *Creating a Basic Makefile* - Flex Technologies
     + <https://felixcrux.com/blog/creating-basic-makefile<> 

   * *Debugging make -Tips and tricks to get make working for you, not
     against you* - Peter Seebach
     * <https://www.ibm.com/developerworks/library/l-debugmake/index.html>

   * *What’s Wrong With GNU make?*
     + <http://www.conifersystems.com/whitepapers/gnu-make/>

   * *How can I configure my makefile for debug and release builds?*
     + <https://stackoverflow.com/questions/1079832>

 *Makefiles for Latex, Tex compilation* 

   + *latex and Makefiles*
     + <http://www.usenix.org.uk/content/latex.html>

   + *Makefiles for Latex*
     + <https://scaron.info/blog/makefiles-for-latex.html>

   + *A simple Makefile for LaTeX projects.*
     + <https://gist.github.com/Nemo157/539229>

   + *Continuous integration and automatic deployment of LaTeX files*
     + <https://ljvmiranda921.github.io/notebook/2018/02/04/continuous-integration-for-latex/>

 *Makefiles for general automation*

   + *Reproducibility with Make*
     + <https://the-turing-way.netlify.com/make/make.html>

   + *GNU Make for Reproducible Data Analysis*
     + <http://zmjones.com/make/>

   + *Using Make for reproducible scientific analysis*
     + <https://www.software.ac.uk/blog/2016-10-06-using-make-reproducible-scientific-analyses>

   + *Reproducible bioinformatics pipelines using Make*
     + <http://byronjsmith.com/make-bml/>

   + *Reproducible Data Processing: Make + Docker*
     + <https://towardsdatascience.com/towards-efficient-and-reproducible-ml-workflows-part-1-analysis-a98c945d7616>

   + *Makefiles for R/LaTex Projects*
     + <https://dzone.com/articles/makefiles-rlatex-projects>

   + *Makefiles in Python Projects*
     + <https://krzysztofzuraw.com/blog/2016/makefiles-in-python-projects.html>

   + *Makefiles with Python*
     + <https://blog.horejsek.com/makefile-with-python/>

   + *Makefile for Python projects* - GIST
     + <https://gist.github.com/lumengxi/0ae4645124cd4066f676>
* GNU Autotools Building System  
** Overview 

  * Autotools
    + =>> GNU Building System or umbrela name for _autoconf_, _automake_
      and _libtool_. GNU autotools is used by many open-source Linux
      projects and embedded Linux.

  * Some Projects using GNU Autotools:
    + [[https://github.com/emacs-mirror/emacs][GNU Emacs]]
    + [[https://github.com/bminor/glibc][GNU Glibc]] (GNU C Runtime Library used in Linux)
    + [[https://github.com/gcc-mirror/gcc/blob/master/configure.ac][GNU GCC Compiler]]
    + [[https://gitlab.freedesktop.org/NetworkManager/NetworkManager/blob/master/configure.ac][NetworkManager]] (Linux network manager daemon)
    + [[https://github.com/hishamhm/htop/blob/master/configure.ac][Htop tool]] - htop is an interactive text-mode process viewer.
    + [[https://github.com/nghttp2/nghttp2/blob/master/configure.ac][Nhttp2]] - (Implementation of the Hypertext Transfer Protocol version 2 in C.)
    + [[https://github.com/mingw-deb/libffi/blob/master/configure][LibFFI]]
    + [[https://github.com/wireapp/libsodium/blob/master/configure.ac][LibSodium]]

  * Used mostly in Unix-like or POSIX-like operating systems,
    specially Linux.

  * Motivation:
    * Deal with legacy systems or software
    * Learn about alternative building systems
    * Maintenance of existing open source projects
    * Possible porting GNU autotools to CMake 
    * Embedded Linux

  * Supported *IDEs - Integrated Development Environments*
    * Eclipse IDE
      + [[https://www.eclipse.org/linuxtools/][Linux Tools Plugin]]
      + [[https://wiki.eclipse.org/CDT/Autotools/User_Guide][Eclipse CDT Autotools User Guide]]
    * NetBeans
      * [[http://plugins.netbeans.org/plugin/51647/cppgnuautotools][CppGnuAutoTools Plugin]]
    * QTCreator
      * [[https://doc.qt.io/qtcreator/creator-projects-autotools.html][Autotools Project Manager Plugin]]

  * Availalble for:
    + Linux, MacOSX, FreeBSD, OpenBSD, NetBSD and so on.

  * Documentation:
    * [[http://www.gnu.org/software/autoconf/][GNU Autoconf]]
    * [[http://www.gnu.org/software/automake/automake.html][GNU Automake]]
    * [[http://www.gnu.org/software/libtool/libtool.html][GNU Libtool]]

  * Supported Programming Languages
    * C
    * C++
    * Objective C
    * Fortran
    * Fortran77
    * Erlang 

  * Terminal Documentation:
    * $ info automake
    * $ info autoconf
    * $ info libtool 

  * Common build configuration facilities
    + $ ./configure 
    + $ make
    + $ make install   => Install application.
    + $ ... ... ..
** Reference Card 

 *Installation* 

Install on Fedora Linux Distribution: 

#+BEGIN_SRC sh 
  $ sudo dnf install autoconf automake
#+END_SRC

Install on Ubuntu or Debian Linux Distributions: 

#+BEGIN_SRC sh 
  $ apt-get install autoconf automake 
#+END_SRC

 *GNU Make Command for GNU autotools* 

|--------------------+-----------------------------------------------------------------------------|
| Make Command       | Description                                                                 |
|--------------------+-----------------------------------------------------------------------------|
| $ make             | Build application                                                           |
| $ make -j4         | Build applciation using 4 threads                                           |
|                    |                                                                             |
| $ make check       | Run tests                                                                   |
|                    |                                                                             |
| $ make clean       | Clean compilation files                                                     |
| $ make distclean   | Remove generated autools files.                                             |
|                    |                                                                             |
| $ make install     | Install application in the system to: /usr/loca/bin, /etc, ...              |
| $ make intallcheck | Check installation                                                          |
| $ make uninstall   | Remove installation files                                                   |
|                    |                                                                             |
| $ make dist        | Create source distribution tarball                                          |
| $ make distcheck   | Similar to make dist, but checks if the compilation, the creates a tarball. |
|                    |                                                                             |
|--------------------+-----------------------------------------------------------------------------|

 *Most Configuration variables* 

|----------+--------------------------------+---|
| Variable | Description                    |   |
|----------+--------------------------------+---|
| CC       | C compiler                     |   |
| CXX      | C++ compuler                   |   |
|          |                                |   |
| CPPFLAGS | C and C++ Preprocessor flags   |   |
| CFLAGS   | Flags of the C compiler        |   |
| CXXFLAGS | Flags of the C++ compiler      |   |
|          |                                |   |
| LDFLAGS  | Linker Flags                   |   |
| LIBS     | Libraries passed to the linker |   |
|          |                                |   |
|----------+--------------------------------+---|

 *Useful ./configure (Autotools) command line switches* 

Those are useful and recurring command line switches for building open
source applications or libraries from source. 

 + Show ./configure help   

#+BEGIN_SRC sh 
  $ ./configure --help 
#+END_SRC

 + General ./configure usage example. 

#+BEGIN_SRC sh 

  # ---- Example 1 --------------------#
  # Install to /usr, /usr/bin, /usr/include, /usr/lib, /usr/lib64 on Linux 
  $ ./configure  
  $ make 
  $ make install 

  # ---- Example 2 --------------------#
  $ ./configure  --with-feature1 --without-feature2 --eanable-option1 --enable-option2=no 
  $ make 
  $ make install 

  # ---- Example 3 --------------------#
  # Install to custom location (directory)
  $ ./configure --prefix=/my/custom/location  --with-feature1 \
       --without-feature2 --eanable-option1 --enable-option2=no --disable-option3

  $ make -j4 # Build using 4 threads (faster)
  $ make install 
#+END_SRC

  
 *Autotools workflow for users* 

STEP 1: User run ./configure selecting build options; 

#+BEGIN_SRC sh 
  # Install application in default directory
  $ ./configure
 
  # Install the application in another directory 
  $ ./configure --prefix=/home/user/juliuscaesar/opt
#+END_SRC

STEP 2: Run (GNU) make for building. 

#+BEGIN_SRC sh 
  $ make 

  # Run GNY make with 4 threads 
  $ make -j4 

  # Run $ make and $ make install in a single step 
  $ make -j4 && sudo make install 
#+END_SRC

STEP 3: Install. 

#+BEGIN_SRC sh 
  $ make install 

  # If permission is needed 
  $ sudo make install 
#+END_SRC

 *Developer Worflow* 

STEP 1:
  + => Create files:
    + _configure.ac_  for *autoconf* - written in a language similar to
      Bash (Bourne Shell Script) which is processed by *M4* macro
      processor.
      + Note: It is necessary to take care with whitespaces in macro invocations.
    + _Makefile.am_ for *automake*. 


STEP 2: 
 + => The developer runs autoreconf that  generates the files
   ./configure and Makefile.in

STEP 3: 
 + => Test the generated files by running:
   + $ ./configure && make && make install.
** Example: Basic GNU autotools project 
*** Project Files 
File: main.cpp 

#+BEGIN_SRC cpp 
  #include <iostream>

  int main()
  {
    std::cout << "Hello world autotools" << std::endl;
    return 0;
  }
#+END_SRC

File: configure.ac 

#+BEGIN_SRC sh 
   #------- File: configure.ac ----------#
   #-------------------------------------# 

   # app => Is the file name without extensions
   # 0.1 => Is the version 
   AC_INIT( [app], [0.1], [maintener@email.com])

   # Require at least autoconf version >= 2.68 
   AC_PREREQ([2.68])  
   AM_INIT_AUTOMAKE([-Wall -Wextra])

   # ./configure creates a Makefile
   AC_CONFIG_FILES([Makefile])

   # Find and check C compiler 
   AC_PROG_CC
   # Find and check a C++ compiler 
   AC_PROG_CXX 
   AC_OUTPUT 
#+END_SRC

File: Makefile.am 

#+BEGIN_SRC sh 
  # Contains all executable targets 
  bin_PROGRAMS = app

  # Sources for the executable targets 
  app_SOURCES  = app.cpp 
#+END_SRC

File: clean.sh 
  + Helper bash script used for cleaning current directory.

#+BEGIN_SRC sh 
  #!/usr/bin/env sh 
  rm -v configure config.log config.status install-sh missing aclocal.m4 compile depcomp 
  rm -vrf autom4te.cache
  rm -v *.o *.bin *.so
  rm *~ # Remove temporary files 
#+END_SRC
*** Building Steps

 *STEP 1:* Performed by developer 

 + Create additional metadata files needed by _GNU autotools_

#+BEGIN_SRC sh 
  $ touch README NEWS AUTHORS ChangeLog # Set metadata files                                                │
#+END_SRC

 *STEP 2:* Performed by developer 

 + Run atuoreconf for generating ./configure shell script and addition files.
 + Run: $ autoreconf -i -v 

#+BEGIN_SRC sh 
  $ autoreconf -i -v 

  autoreconf: Entering directory `.'
  autoreconf: configure.ac: not using Gettext
  autoreconf: running: aclocal 
  autoreconf: configure.ac: tracing
  autoreconf: configure.ac: not using Libtool
  autoreconf: running: /usr/bin/autoconf
  autoreconf: configure.ac: not using Autoheader
  autoreconf: running: automake --add-missing --copy --no-force
  configure.ac:11: warning: unknown warning category 'extra'
  configure.ac:17: installing './compile'
  configure.ac:11: installing './install-sh'
  configure.ac:11: installing './missing'
  Makefile.am: installing './depcomp'
  autoreconf: Leaving directory `.'
#+END_SRC

 *STEP 3:* Performed by user

 + The following steps are performed by end-users or maintainers for
   installing the application in the system or in a local directory. 

 + Generate the Makefile by running the configuration script.

Run: $ ./configure  

#+BEGIN_SRC sh 
  $ ./configure 
  checking for a BSD-compatible install... /usr/bin/install -c
  checking whether build environment is sane... yes
  checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
  checking for gawk... gawk

  ... ... ...   ... ... ...   ... ... ...   ... ... ... 
       # Suppress output for breviety purposes 
  ... ... ...   ... ... ...   ... ... ...   ... ... ... 

  checking dependency style of g++... gcc3
  checking that generated files are newer than configure... done
  configure: creating ./config.status
  config.status: creating Makefile
  config.status: executing depfiles commands
#+END_SRC

Run: $ ./configure CC=clang CXX=clang++ for using clang.

#+BEGIN_SRC sh 
 $ ./configure CC=clang CXX=clang++
#+END_SRC

 *STEP 4:* Performed by user

 + Run the makefile (GNU make)

Run: $ make 

#+BEGIN_SRC sh 
   $ make

   g++ -DPACKAGE_NAME=\"app\" -DPACKAGE_TARNAME=\"app\" -DPACKAGE_VERSION=\"0.1\"  \
       -DPACKAGE_STRING=\"app\ 0.1\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\"   \
        -DPACKAGE=\"app\" -DVERSION=\"0.1\" -I.     -g -O2 -MT app.o -MD -MP -MF   \
       .deps/app.Tpo -c -o app.o app.cpp \
       mv -f .deps/app.Tpo .deps/app.Po \
 
    g++  -g -O2   -o app app.o  
#+END_SRC

Run: $ make install 

#+BEGIN_SRC sh 
  $ make install
  make[1]: Entering directory '/home/archbox/projects/autools1'
   /usr/bin/mkdir -p '/usr/local/bin'
    /usr/bin/install -c app '/usr/local/bin'
  /usr/bin/install: cannot create regular file '/usr/local/bin/app': Permission denied
  make[1]: *** [Makefile:313: install-binPROGRAMS] Error 1
  make[1]: Leaving directory '/home/archbox/projects/autools1'
  make: *** [Makefile:615: install-am] Error 2

#+END_SRC

Run: $ make dist => Create a tarball distribution. 

#+BEGIN_SRC sh 
  $ make dist
  make  dist-gzip am__post_remove_distdir='@:'
  make[1]: Entering directory '/home/archbox/projects/autools1'
  if test -d "app-0.1"; then find "app-0.1" -type d ! -perm -200 -exec chmod u+w {} ... ... 
  test -d "app-0.1" || mkdir "app-0.1"

    .. ... ... ... ... ... ... 
  rm -rf "app-0.1" || { sleep 5 && rm -rf "app-0.1"; }; else :; fi
#+END_SRC

Check the tarball file: 

#+BEGIN_SRC sh 
      $ tar -tzvf app-0.1.tar.gz 
  drwxrwxr-x 1000/1000         0 2019-10-21 15:23 app-0.1/
  -rw-rw-r-- 1000/1000     42147 2019-10-21 15:22 app-0.1/aclocal.m4
  -rwxrwxr-x 1000/1000    154043 2019-10-21 15:22 app-0.1/configure
  -rw-rw-r-- 1000/1000       546 2019-10-21 15:01 app-0.1/configure.ac
  -rw-rw-r-- 1000/1000       101 2019-10-21 14:28 app-0.1/app.cpp
  -rwxr-xr-x 1000/1000     14676 2019-10-21 15:22 app-0.1/install-sh
  -rw-rw-r-- 1000/1000         0 2019-10-21 15:02 app-0.1/ChangeLog
  -rwxr-xr-x 1000/1000      6872 2019-10-21 15:22 app-0.1/missing
  -rwxr-xr-x 1000/1000     23566 2019-10-21 15:22 app-0.1/depcomp
  -rw-rw-r-- 1000/1000         0 2019-10-21 15:02 app-0.1/AUTHORS
  -rw-r--r-- 1000/1000     35147 2019-10-21 15:01 app-0.1/COPYING
  -rw-r--r-- 1000/1000     15756 2019-10-21 15:01 app-0.1/INSTALL
  -rwxr-xr-x 1000/1000      7381 2019-10-21 15:22 app-0.1/compile
  -rw-rw-r-- 1000/1000       117 2019-10-21 14:52 app-0.1/Makefile.am
  -rw-rw-r-- 1000/1000         0 2019-10-21 15:02 app-0.1/README
  -rw-rw-r-- 1000/1000         0 2019-10-21 15:02 app-0.1/NEWS
  -rw-rw-r-- 1000/1000     23477 2019-10-21 15:22 app-0.1/Makefile.in
#+END_SRC

 *STEP 5:* 

 + Test the application. 

#+BEGIN_SRC sh 
  # Check executable file 
  $ file app
  app: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter 
  /lib64/l, for GNU/Linux 3.2.0, BuildID[sha1]=29f5b104ac648c3286ed616ea4cf4007a6b51ae2, 
  with debug_info, not stripped

  # Run native executable 
  $ ./app
  Hello world autotools
#+END_SRC

 *Build and install the application into a new location* 

Run configure script. 

#+BEGIN_SRC sh 
  # Build with clang and install at ~/opt/app-test 
  $ ./configure CC=clang CXX=clang++ --prefix=$HOME/opt/app-test
 
#+END_SRC

Run make and make install 

#+BEGIN_SRC sh 
  $ make install
  make[1]: Entering directory '/home/archbox/projects/autools1'
   /usr/bin/mkdir -p '/home/archbox/opt/app-test/bin'
    /usr/bin/install -c app '/home/archbox/opt/app-test/bin'
  make[1]: Nothing to be done for 'install-data-am'.
  make[1]: Leaving directory '/home/archbox/projects/autools1'
#+END_SRC

Test installation: 

#+BEGIN_SRC sh 
  $ tree /home/archbox/opt/app-test
  /home/archbox/opt/app-test
  └── bin
      └── app

  1 directory, 1 file
#+END_SRC

Run the application: 

#+BEGIN_SRC sh 
  $ /home/archbox/opt/app-test/bin/app 
  Hello world autotools
#+END_SRC
** Further Reading 

  + [[https://eklitzke.org/how-to-autotools][How To Use Autotools]] 

  + *GNU Autotools Book* - https://www.star.bnl.gov/~liuzx/autobook.html

  + [[https://elinux.org/images/4/43/Petazzoni.pdf][Embedded Linux Conference 2016 - GNU Autotools Tutorial]]

  + [[http://freesoftwaremagazine.com/articles/brief_introduction_to_gnu_autotools/][Chapter 1: A brief introduction to the GNU Autotools]]

  + [[https://stackoverflow.com/questions/10999549/how-do-i-create-a-configure-script][linux - How do I create a configure script? - Stack Overflow]]

  + [[https://developer.fedoraproject.org/tech/languages/c/autotools.html][Autotools — Fedora Developer Portal]]

  + [[http://thegreyblog.blogspot.com/2013/09/cc-project-built-with-gnu-build-system.html][C/C++ Project Built with GNU Build System (A.K.A. GNU Autotools): NetBeans vs. Eclipse CDT]]
* QMake Building System 
*** Overview 

QMake is a building system generator used by QT Framework and QT
Creator IDE, similar to CMake, which can generate Makefiles and
projects for Visual Studio IDE (MSBuild building system).

Features: 

  + QT Framework now provides official support to CMake, but QMake is
    still used in many old projects and libraries.

Benefits: 

  + For now, QMake still provides better support fro cross compilation
    and for mobile platforms, such as Android or iOS.

  + Multi-ABI cross-compilation support.

Problems: 

  + Not supported by other IDEs than QT Creator. So, it is not
    supported by Eclipse, Netbeans or Visual Studio.

  + Brittle building system => It does not support multiple targets or
    generating multiple executables in the same building script.

  + Hard to use with third-party libraries or libraries using CMake or
    other building systems. 

*** QMake project example 


Project Structure: 

#+BEGIN_SRC sh 
  $ cd /path/to/project-root/dir
  $ tree .
  .
  ├── app1
  │   ├── app1.cpp
  │   ├── app1.pro
  │   ├── dataset.cpp
  │   └── dataset.hpp
  ├── app2
  │   ├── app2.cpp
  │   └── app2.pro
  ├── apptest.pro
#+END_SRC

File: apptest.pro 

#+BEGIN_SRC conf 
  TEMPLATE = subdirs
  SUBDIRS = app1 app2
#+END_SRC

 *Target app1 - subproject* 

  + Target _app1_ is a console executable. 


File: app1/app1.pro

#+BEGIN_SRC sh 
  TEMPLATE = app
  CONFIG += console c++11
  CONFIG -= app_bundle
  CONFIG -= qt

  SOURCES += \
          dataset.cpp \
          app1.cpp

  HEADERS += \
      dataset.hpp
#+END_SRC

File: app1/app1.cpp 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include "dataset.hpp"

  int main()
  {
      Dataset ds;
      ds.add_data(10.34);
      ds.add_data(100.23);
      ds.add_data(-100.0);

      std::cout << "Hello World!" << std::endl;
      std::cout << " ds[0] = " << ds.get_data(0) << std::endl;
      std::cout << " ds[1] = " << ds.get_data(0) << std::endl;
      std::cout << " ds[2] = " << ds.get_data(0) << std::endl;

      return 0;
  }
#+END_SRC

File: app1/dataset.hpp 

#+BEGIN_SRC cpp 
  #ifndef DATASET_HPP
  #define DATASET_HPP

  #include <cstddef>

  class Dataset{
      struct pimpl;
      pimpl* m_pimpl;
  public:
      Dataset();
      ~Dataset();
      Dataset(Dataset cosnt&) = delete;
      Dataset& operator=(Dataset const&) = delete;
      void   add_data(double x);
      double get_data(size_t idx) const;
  };

  #endif // DATASET_HPP
#+END_SRC

File: app1/dataset.cpp 

#+BEGIN_SRC cpp 
  #include "dataset.hpp"

  #include <memory>
  #include <vector>
  #include <iostream>

  struct Dataset::pimpl
  {
      std::vector<double> data;
  };


  Dataset::Dataset(): m_pimpl(new pimpl)
  {
      std::cout << " [INFO] Constructor called. OK" << std::endl;
  }

  Dataset::~Dataset(){
      delete m_pimpl;
  }

  void Dataset::add_data(double x)
  {
      m_pimpl->data.push_back(x);
  }

  double Dataset::get_data(size_t i) const
  {
      return m_pimpl->data[i];
  }
#+END_SRC

  *Target app2 - subproject*

  + Target _app2_ is a user interface QT Widgets executable which file
    name is app2_linux_x64.bin

File: app2/app2.pro 

#+BEGIN_SRC sh 
  QT       += core gui widgets
  TEMPLATE  = app
  CONFIG   += c++1z
  # CONFIG  += console c++1z
  # CONFIG  -= app_bundle

  # Change
  TARGET   = app2_linux_x64.bin
  SOURCES += app2.cpp 
#+END_SRC

File: app2/app2.cpp 

#+BEGIN_SRC cpp 
  #include <iostream>

  #include <QApplication>
  #include <QtWidgets>

  int main(int argc, char* argv[])
  {
      std::cout << " [INFO] Starting Application 2 OK" << std::endl;

      QApplication app(argc, argv);

      QPushButton button("Click me");
      button.setVisible(true);

      QObject::connect(&button, &QPushButton::clicked,
                       []{
                           std::cout << " [INFO] I Was clicked OK" << std::endl;
                       });

      return app.exec();
  }
#+END_SRC

 *Building and Running* 

STEP 1 - Create a ./build directory for separating the compilation
output from the source code. 

#+BEGIN_SRC sh 
  $ mkdir build && cd build
#+END_SRC

STEP 2 - Run QMake

#+BEGIN_SRC sh 
  $ qmake ../

  $ ls
  Makefile
#+END_SRC

STEP 3 - Run Makefile 

#+BEGIN_SRC sh 
  $ make

  $ tree .
  .
  ├── app1
  │   ├── app1
  │   ├── app1.o
  │   ├── dataset.o
  │   └── Makefile
  ├── app2
  │   ├── app2_linux_x64.bin
  │   ├── app2.o
  │   └── Makefile
  └── Makefile

  2 directories, 8 files
#+END_SRC

STEP 4 - Check executables 

#+BEGIN_SRC sh 
  # Run executable app1 
  #--------------------------------------
  $ app1/app1 
   [INFO] Constructor called. OK
  Hello World!
   ds[0] = 10.34
   ds[1] = 10.34
   ds[2] = 10.34

  # Run executable app2 
  #--------------------------------------
  $ app2/app2_linux_x64.bin 
   [INFO] Starting Application 2 OK
#+END_SRC

*** Further Reading 

Official Documentation 

   + *QMake Manual* - QT Company
     + <https://doc.qt.io/qt-5/qmake-manual.html> 

   + *QMake - Getting Started* - QT Company
     + <https://doc.qt.io/qt-5/qmake-tutorial.html>

   + *QMake Running* 
     + https://doc.qt.io/qt-5/qmake-running.html

   + *QMake Variables*
     + <https://doc.qt.io/qt-5/qmake-variable-reference.html>

General 

   + *Configuring QMake*
     + <https://doc.qt.io/qt-5/qmake-environment-reference.html>

   + KDAB - *Clang Tidy, part 2: Integrate qmake and other build systems using Bear*
     + <https://www.kdab.com/clang-tidy-part-2-integrate-qmake-and-other-build-systems-using-bear/>

   + KDAB - *Qt for Android better than ever before*
     + <https://www.kdab.com/qt-for-android-better-than-ever-before/>

   + *QMake for neophytes*
     + <https://www.develer.com/en/qmake-for-neophytes/>

   + *SUBDIRS for Fun and Profit*
     + <http://silmor.de/qtstuff.subdirs.php>

   + *C++ GUI Programming with Qt4: Building Qt Applications*
     + <http://www.informit.com/articles/article.aspx?p=1405563&seqNum=2>

   + *Building a Linux system for the STM32MP1: setting up a Qt5 application development environment*
     + <https://bootlin.com/blog/building-a-linux-system-for-the-stm32mp1-setting-up-a-qt5-application-development-environment/>

Questions: 

  + [[https://stackoverflow.com/questions/1538398/how-do-i-use-qmake-to-build-multiple-binaries-in-a-single-project/1538639][qt - How do I use qmake to build multiple binaries in a single project? - Stack Overflow]]

  + [[https://forum.qt.io/topic/15202/building-multiple-binaries-in-one-qt-project/4][Building multiple binaries in one qt project | Qt Forum]]

* CMake Building System 
** Overview 

 *Motivation* 
 
  * _Easier cross-platform compilation and portability_
    + A single CMake building-script to rule all building systems.

  * _No reliance on a single IDE or building system_
    + CMake can generate projects and building scripts for many IDEs
      and also several IDEs are providing support for CMake without
      requiring generating a project to the IDE.

  * _Human-readable project file with a declarative language_
    + The project file is just a CMakeLists.txt human-readable text
      with a simple and declarative language, not an obfuscated or
      cryptic XML file, a verbose and fragile Json or a non-portable
      Makefile or Visual Studio Solutions.

  * _Easier to consume libraries and other projects_
    + CMake makes consuming external and internal dependencies easier
      than other building systems such as GNU autotools and GNU
      Makefile. All what it is needed to add a external library to a
      project is to copy the library directory to the project and add
      the line add_subdirectory(<LIBRARY_DIRECTORY>). Another
      advantage is that the library does not need to be installed
      in the system.

  * _All configuration managed by code rather than GUI and XML_
    + Almost all configuration of a CMake project are managed by CMake
      language code, rather than by GUIs graphical user interfaces
      like Visual Studio Projects with MSBUild. This approach allows
      more customization, scalability and also faster changes. Another
      benefits are the portability among IDEs with CMake support. This
      text-centric approach also frees users from learning IDE
      specific details or configuration GUIs. 

  * _Network effect (Network Externality)_
    + Network effect can be described as phenomenon where additional
      users increases the value of products and services to all
      users.
    + Many C++ libraries are being distributed with CMake; many open
      source projects are adopting CMake; most C++ package managers
      support CMake and IDEs are starting to provide CMake support.


 *CMake can be used in following ways:*

 + _Build a software directly from command line_ in a similar way to
   Unix's make - $ make and $ make install.

 + _Generate IDE-specific or preferred project files_ in IDEs that does
   not supports CMake, for instance cmake can generate projects from
   the file CMakeLists.txt for the IDEs and text editors: Microsoft
   Visual Studio, CodeBlocks, Kate projects, Sublime and Eclipse CDT.

 + _Manage a project in IDEs which supports CMake_. In this case, it is
   not necessary to generate IDE-specific project files.

 *Programming Languages supported by CMake* 

 + ASM - Assembly
 + C
 + C++
 + Fortran
 + CSharp C#
 + CUDA
 + CXX 
 + Java
 + RC - Windows Resource Compiler
 + Swift 

 *Capabilities:*

 + Generate IDE-specific project files.
 + Generate Visual Studio Solutions (projects)
 + Generate Makefiles (GNU Make) or NMake (Windows make) for direct
   compilation.
 + Run targets like GNU make
 + Build a software or library directly from command line.

 *Possibilities* 

A CMake project can contain one or more target (taks), similar to
Makefile rules:

 + Multiples targets for build executables - the same CMake file can
   be used to build multiple applications.

 + Target to build shared library

 + Target to build static library

 + Target to install aplications or libraries

 + Custom targets

 *CMake Project Examples*

  + [[https://github.com/caiorss/winapi-snippets-cmake][winapi snippets]]
    + Code snippets and examples for Windows API in modern C++ managed
      by CMake.
  + [[https://gist.github.com/caiorss/2bba4c50866d9467aaa8c7792b337f71][shared library]]
    + Example containibng: Cross platform shared library exporting
      functions, classes, polymorphic classes and C-interfaces
      (wrapper functions with C-linkage). It also contains a C++
      client-code and Python wrapper which uses Python ctype FFI
      foreign function interface.
  + [[https://github.com/caiorss/example-pybind11-vcpkg][example-pybind11-vcpkg]]
    + This example project contains a Python3 native module written in
      C++ with the help of CMake and Pybind11, vcpkg (C++) Package
      manager.
** IDE with CMake support 
*** Overview 

 + Note: List of IDEs that can use CMake as project configuration file
   where the user does not need to generate IDE specific project file
   such as Visual Studio Solution or CodeBlocks projects.
*** Lightweight IDE - Integrated Development Environments 

   * [[https://doc.qt.io/qtcreator/][QTCreator]] (QT Company) [BEST]
     * Note: Best replacement for CodeBlocks IDE with CMake support.
     * Features:
       * Just-work solution, zero time spending on configuration
       * Despite the name, can be used with any type of C++ project.
       * Good Integration with debugger 
       * Cross-platform and ligthweight
       * Fast and accurate code completion
       * Basic refactoring support 
       * Outstanding CMake support
       * QT Widgets and QTQuick QML GUI builder, aka drag-and-drop GUI designer.
     * Supported Building Systems:
       * CMake
       * QBS
       * QMake
       * GNU Autotools - provided by plugin
     * Download: https://www.qt.io/offline-installers
     * Source Code: https://github.com/qt-creator/qt-creator
     * Additional: 
       + [[https://www.phoronix.com/scan.php?page=news_item&px=Qt-QMake-CMake-Future-Not-Qbs][The Qt Company Decides To Deprecate The Qbs Build System, Will Focus On CMake & QMake]]
       + [[https://blog.qt.io/blog/2018/10/29/deprecation-of-qbs/][QT Company - Deprecation of QBS in favor of CMake]]
       + [[https://doc.qt.io/qtcreator/creator-project-cmake.html][Qt Creator Documentation - Setting Up CMake]]

   * [[https://www.kdevelop.org/][KDevelop IDE]] [BEST]
     + Note: KDevelop allows managing project with CMake, visualization
       of all CMake targets, run individual targets with mouse click,
       run install target and so on.
     + Note: On Windows, it doesn't support Visual Studio / MSVC
       projects with MSVC (VC++) "visual" C++ compiler.

   * [[https://code.visualstudio.com/][VScode - Visual Studio Code]] (Microsft MSFT) [BEST]
     * Note: Lightweight editor built on top of [[https://en.wikipedia.org/wiki/Electron_(software_framework)][Electron]] framework
       using web technologies with extensions, aka plugin,
       support. 

     * Note: Some of the following features are provided by VScode
       extensions. 

     * Features:

       * Command-based like Emacs, but VScode uses Ctrl + P for
         launching commands, intead of Emacs' Alt + x or Meta-X
         keybindings.

       * Configurable-like Emacs, but VScode uses JSon for configuration
         files and Javascript for extensions. 

       * Syntax highlight for many languages, including C++ and CMake
         scripting language.

       * Code folding 

       * CMake building system support

       * _CMake support_: Automatic toolchain (compilers, linker and so
         on) scanning for CMake.

       * _CMake support:_ Also supports CMake utility targets, that are
         not associated to any source file. 

       * Code Navigation: symbol panel and click-at symbol to open the
         file where it is defined. 

       * Cross Platform: works on Windows, Linux and Mac OSX.

       * Built-in terminal emulator panel.

       * Can open and run projects from any programming languages in
         Docker containers which allows creating reproducible
         development environments.

     * VScode Extensions:
       + [[https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools][ms-vscode.cpptools]] [ESSENTIAL]
         + C/C++ IntelliSense, debugging, and code browsing.
       + [[https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools][ms-vscode.cmake-tools]] [ESSENTIAL]
         + CMake support 
       + [[https://marketplace.visualstudio.com/items?itemName=twxs.cmake][twxs.cmake]]  [ESSENTIAL]
         * CMake language support
       + [[https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers][ms-vscode-remote.remote-containers]] [ESSENTIAL]
         * Development in containers, specially Docker containers.
       + [[https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker][ms-azuretools.vscode-docker]] [ESSENTIAL]
         * Allows managing Docker containers.
       + [[https://marketplace.visualstudio.com/items?itemName=danielpinto8zz6.c-cpp-compile-run][danielpinto8zz6.c-cpp-compile-run]] [ESSENTIAL]
         + Makes possible compiling and running single C++-files.
       + [[https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools-themes][ms-vscode.cpptools-themes]]
         * C/C++ Extension UI Themes 
       + [[https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2][CoenraadS.bracket-pair-colorizer-2]] 
         + Set different colors for matching brackets, parenthesis,
           square brackets, curly brackets which helps code
           readability. 
       + [[https://marketplace.visualstudio.com/items?itemName=tonka3000.qtvsctools][tonka3000.qtvsctools]]
         * Integration with QT Tools.
       + [[https://marketplace.visualstudio.com/items?itemName=hars.CppSnippets][hars.CppSnippets]]
         + Many basic recurring C++ snippets for class, enum, enum
           class and control structures. 
       + [[https://marketplace.visualstudio.com/items?itemName=lfs.vscode-emacs-friendly][lfs.vscode-emacs-friendly]] 
         + Emulates Emacs keybinds, for instance, replaces Ctrl-P with
           Meta-X for lauching commands.

   * [[https://gitlab.com/cppit/jucipp][Jucipp / Gitlab]] 
     + "A lightweight & cross-platform IDE supporting the most recent
       C++ standards. Current IDEs struggle with C++ support due to the
       complexity of the programming language. juCI++, however, is
       designed especially towards libclang with speed, stability, and
       ease of use in mind." 
     + Supported build systems: *CMake* ad Meson

   * [[https://wiki.gnome.org/Apps/Builder][GNome Builder IDE]]
     + "Builder aims to be an IDE for writing GNOME-based software. We
       believe this focus will help us build something great for our
       community. If you would like to help in this effort, join our
       IRC channel and we will help you find something to work
       on. Builder is primarily written in C and Python. Some aspects
       of Builder may be written in another language when it makes
       sense. Builder is developed in conjunction with GNOME
       releases. This means that we often contribute to, and rely on,
       features being developed in other GNOME modules such as Gtk." 
     + Supported building systems:
       + GNU Autotools
       + CMake
       + Meson 
     + https://builder.readthedocs.io/en/latest/
     + https://github.com/GNOME/gnome-builder

   * [[https://codelite.org/][CodeLite IDE]] 
     * "CodeLite is an open source, free, cross platform IDE specialized
       in C, C++, PHP and JavaScript (mainly for backend developers
       using Node.js) programming languages which runs best on all major
       Platforms ( OSX, Windows and Linux )"
*** Full-fledge IDE - Integrated Development Environments 
     
 *Heavy but, full featured IDEs:*

 * [[https://blogs.msdn.microsoft.com/vcblog/2016/10/05/cmake-support-in-visual-studio/][Microsft Visual Studio]] [Windows-only] [BEST]

 * [[https://www.youtube.com/watch?v=Rbb0fVCz41w][JetBrains - Clion IDE]] [BEST]

 * [[https://cevelop.com/][Eclipse CEvelop]] (Modified Eclipse IDE for C and C++ Development)
   * Many embedded systems vendors provide IDEs or development
     environment based on modified Eclipse IDEs. 
   * Note: It does not support CMake directly, it requires some the
     installation of some plugins:
   * Plugin: [[https://marketplace.eclipse.org/content/cmake-eclipse-helper][cmake-eclipse-helper]]
   * Plugin: [[https://marketplace.eclipse.org/content/cmake4eclipse][cmake4eclipse]]
   * Plugin: [[https://marketplace.eclipse.org/content/cmake-editor][cmake-editor]]

 * Other Eclipse-based IDEs and Frameworks:

   + [[https://marketplace.eclipse.org/content/linux-kernel-programming-ide-link-ide][Linux Kernel Programming IDE (LinK+ IDE)]]
     * "LinK+ IDE is a simple IDE for Linux Kernel Developers and
       Lovers. It is based on Eclipse IDE customized for Linux kernel
       programming. It reduces the development time and executes code
       in an elegant fashion. This IDE supports Linux kernel
       configuration, compilation & emulation, system call development
       and device driver development. LinK+ IDE includes various
       templates in the category of character, block and network
       device driver subsystems for device driver development. It
       includes various bus infrastructure templates and also provides
       Linux device driver code completion, code assistance & code
       navigation for developers."

   + [[https://www.eclipse.org/downloads/packages/release/helios/sr2/eclipse-ide-cc-linux-developers-includes-incubating-components][Eclipse IDE for C/C++ Linux Developers]]
     + "This package augments the C/C++ package specifically for Linux
       developers. It includes GNU Autotools integration with the CDT
       and plugins to interact with native Linux tools such as GCov,
       GProf, OProfile, and Valgrind. Visualization and analysis
       plugins for Linux tracing tools LTTng and SystemTap are also
       present. For Linux distribution packagers, an RPM .spec editor
       with rpmlint integration is available. Note that this package
       includes some incubating components, as indicated by features
       with "(Incubation)" following their name."

   + [[https://marketplace.eclipse.org/content/modembed][MODembed]] (Microchip PIC 8-bits, 16 Bits Microcontrollers and
     MSP430 core from Texas Instruments)
     * "MODembed is an experimental IDE aiming to provide a more
       advanced toolchain for embedded software development. It
       provides a model-based approach for defining the whole
       compilation process."

   + [[https://marketplace.eclipse.org/content/somnium-drt-cortex-m-ide][somnium-drt-cortex-m-ide]]
     + "SOMNIUM DRT Cortex-M IDE is a professional C and C++ embedded
       software development environment for ARM Cortex-M devices,
       which is built on the Eclipse platform. DRT is fully compatible
       with the GNU toolchain and other third party software. DRT
       provides industry-leading levels of optimization, support for
       the latest C and C++ language standards and unique debugging
       tools, including live expression view without breakpointing,
       trace and fault diagnosis."
 
   + [[https://marketplace.eclipse.org/content/arduino-eclipse-ide-named-sloeber-product][The Arduino Eclipse IDE named Sloeber (Product)]]
     + "This product allows you to create, compile and upload sketches
       with nearly the same simplicity as the Arduino IDE but with all
       full functional features one would expect from a professional
       IDE and includes a serial monitor and a graphical plotter. This
       is a free and open-source plugin that is a professional and
       complete alternative to the Arduino IDE. This is an add-on to
       the CDT plugin and as such has all C/C++ development features
       plus a toolbar with the Arduino buttons from the Arduino IDE
       and an Arduino menu for importing libraries and more." 

   + [[https://marketplace.eclipse.org/content/opencl-development-tool][OpenCL Development Tool]] 

     + Note: OpenCL (Kronos Group) is a vendor-agnostic C-extension
       language for general purpose computing on GPUs.

     + "OpenCL Development Tool is an IDE based on Eclipse CDT for
       developers writing kernels and host stubs in C, C++ and OpenCL
       language. The tool provides wizards creating OpenCL projects
       and kernels by one click. The editor provides syntax checking,
       error highlighting and offers solutions for typical
       errors. Also provides cheat sheets for best practices."

 * EClipse tooling and Convenience for Embedded Systems 

   * [[https://marketplace.eclipse.org/content/gnu-mcu-eclipse][GNU MCU Eclipse]] and [[https://gnu-mcu-eclipse.github.io/][GNU ARM → GNU MCU Eclipse!]]
     * "The GNU MCU Eclipse (formerly GNU ARM Eclipse) is an open
       source project that includes a family of Eclipse plug-ins and
       tools for multi-platform embedded ARM & RISC-V development,
       based on GNU toolchains."

   * [[https://marketplace.eclipse.org/content/embsysregview][EmbSysRegView]] - View Registers of Embedded Devices 
     * "EMBedded SYStems REGister VIEW is an Eclipse Plugin which is
       designed for monitoring and modifying memory values of embedded
       devices. Therefore it offers a structured display of the
       special functions registers (SFR). While debugging, the
       register values are presented in the Hexadecimal (HEX) and
       Binary (Bin) column of the view. Modifications of peripheral
       registers values are possible via: Editing in the Binary column
       via BitButtons; Editing in the Hex column; Choosing an
       interpretation from an ComboBox in the Hex column (not
       supported by all chip xml files); The EmbSysRegView works with
       any 32 bit target that stores data in little endian byte order
       and maps its register into memory adress space. In other words,
       if you find your registers in the CDT Memory View, the
       RegisterView will also work with that device assumin that a
       chip xml description is available."

   * [[https://marketplace.eclipse.org/content/embedded-reservation-space#group-details][Embedded Reservation Space]]
     * "This Embedded Reservation space (ERS) plugin will help
       embedded programmer to know the embedded resource that are
       utilized by team members. This information (usage of embedded
       resources) will be shared between team member using ERS
       plugin. ERS plugin contains two plugins one is server and other
       is client plugin. Server plugin will be installed by team
       leader and client plugin will be installed by team
       members. Team leader enter the embedded resources that are used
       by different team members. The team members access the
       information using client plugin." 

   * [[https://marketplace.eclipse.org/content/impulse-embedded-extension][impulse Embedded Extension]] (Support for Serial RS232 and JTag)
     * "An embedded system is a computer system with a dedicated
       function within a larger mechanical or electrical system, often
       with real-time computing constraints. This extension contains a
       serial line (RS232) adapter, a J-Link adapter, a CDT memory
       adapter, a Serial Wire Viewer (SWV) reader, a SystemView reader
       and a binary log format reader from the ukos project. impulse
       is a powerful waveform viewer and analyser tool, helping
       engineers to comfortably understand and debug complex
       semiconductor and multi-core software systems."

   * [[https://marketplace.eclipse.org/content/code-confidence-tools-ecos][code-confidence-tools-ecos]] [EVALUATION VERSION] (Note: ECos is an RTOS used in automotive industry)
     * "The Code Confidence™ Tools provide the most productive
       environment for eCos RTOS application development. All
       components are fully integrated with the Eclipse™ C/C++
       Development Tooling (CDT), creating a seamless development
       experience from the initial installation of eCos(R) source code
       to the final delivery of your fully debugged eCos
       application. Product features include project creation wizards,
       an advanced configuration editor, C/C++ editor integration,
       performance-optimized GNU toolchains, support for profiling,
       code coverage analysis, and kernel-aware debug views which
       simplify and accelerate eCos application debugging. The tools
       incorporate ThreadSpy™ technology for the thread-aware
       debugging of eCos applications using JTAG, BDM, SWD and other
       on-chip debug hardware. All debugging features are integrated
       with the Eclipse Debugger Services Framework (DSF) which is
       optimized for use with embedded systems."

   * [[https://marketplace.eclipse.org/content/code-confidence-tools-freertos][Code Confidence Tools for FreeRTOS]] [EVALUATION VERSION]
     * "The Code Confidence™ Tools provide the most productive debug
       environment for embedded application engineers working with the
       FreeRTOS™ kernel. All components are fully integrated with the
       award-winning Eclipse™ Platform (IDE) and C/C++ Development
       Tooling (CDT), providing a seamless debugging
       experience. Product features include full support for the
       debugging of individual FreeRTOS tasks at both source code and
       machine assembly levels. Code Confidence ThreadSpy™ technology
       provides per-task backtrace, and enables inspection of the
       local variables within each stack frame of each task. All
       debugging features are fully integrated with the
       high-performance Debugger Services Framework (DSF), enabling
       the use of per-task breakpoints, watchpoints and
       single-stepping while allowing the inspection of call stacks,
       source code variables, processor registers and memory
       regions. An evaluation version is available for download."

 * Articles about Eclipse IDE:

   + [[https://en.wikipedia.org/wiki/List_of_Eclipse-based_software][List of Eclipse-based software - Wikipedia]]

   + [[https://dzone.com/articles/going-to-mars-building-a-diy-eclipse-ide-for-arm-e][Going to Mars: Building a DIY Eclipse IDE for ARM Embedded Microcontrollers - DZone IoT]]

   + [[https://eclipsecon.org/2013/node/1330.html][Buildroot Eclipse Bundle : A powerful IDE for Embedded Linux developers | EclipseCon 2013]]

   + [[http://blog.atollic.com/extend-your-embedded-arm-c/c-ide-with-additional-features-more-power-to-developers][Extend your embedded ARM C/C++ IDE with additional features more power to developers!]]

   + [[https://developer.toradex.com/getting-started/module-2-my-first-hello-world-in-c/configure-eclipse][Configure Eclipse - Getting Started with Toradex]]

   + [[https://www.appinf.com/download/EclipseEmbeddedLinuxPaper.pdf][Using Eclipse to develop for Embedded Linux on a Windows Host]] [White Paper]

   + [[http://courses.daiict.ac.in/pluginfile.php/5878/mod_resource/content/0/presentation/pres_R_eclipse.pdf][Eclipse in Embedded]] 

   + [[https://devel.rtems.org/wiki/Developer/Eclipse/Information][Developer/Eclipse/Information – RTEMS Project]]

   + [[https://www.biglakesoftware.com/debugging-u-boot-using-eclipse/][Debugging u-boot using Eclipse - Big Lake Software]]

   + [[https://dantechrb.com/blog/build-and-debug-u-boot-for-the-mx6sx-in-eclipse-kds-3-2][Build and debug u-boot for the MX6sx in eclipse ( KDS 3.2 )]]
** Minimal CMake Project Workflow

This section contains a minimal CMake project that generates a single
executable which uses OpenGL libraries. All sources at: [[https://gist.github.com/caiorss/fd9e61887e9b2575f2275a80af44fac2][gist]]

A CMake project contains at least the file CMakeLists.txt (Cmake
building definitions akin to Makefile) and one or more sources -
files: *.c, *.cpp, *.cxx, *.hpp. 

Workflow:

 + Build and install the application or library directly from command
   line.

 + Generate IDE-specific building scripts if the IDE does not support
   opening CMake projects. Example: CMake can generate Makefiles for
   EClipse CDT or Visual Studio solution for old Visual Studio
   versions which doesn't support CMake.

 + Open and manage the project directly if the IDE or editor supports
   CMake. In Visual Studio, QTCreator or KDevelop, to open a CMake
   project, it is just necessary to open the directory containing the
   CMakeLists.txt. 

 *File:* CMakeLists.text 

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 3.9)

  # Proeject name - should not contain whitespace 
  project(OpengGL_CPP)

  #========== Global Configurations =============#
  #----------------------------------------------#

  # Set the C++ standard for all targets (It sets the flags
  # (-std=c++11, -std=c++14 ...) on Clang or GCC. and /std=c++17 on MSVC
  # OPTIONAL:
  #---------------------------------
  set(CMAKE_CXX_STANDARD 17)     
  set(CMAKE_VERBOSE_MAKEFILE ON)

  #========== Targets Configurations ============#

  # Build an executable (Unix-like OSes generates ./openglDemo1, on
  # Windows ./opengDemo1.exe)
  # ..........................................
  add_executable(openglDemo1 opengl1.cpp)

  # Set executable dependency libraries
  # Equivalent to pass flags -lGL, -lGLU and -lglut 
  target_link_libraries(openglDemo1 GL GLU glut)

  # Add extension .bin to executable name to make it easier
  # to identify that the binary file is an executable.
  # So, it renames the executable  'openglDemo1' to 'openglDemo1.bin'
  if(UNIX)
    set_target_properties(openglDemo1 PROPERTIES SUFFIX ".bin")
  endif()

  # Add target to run executable 
  add_custom_target(run-ex1
      COMMAND openglDemo1 
      DEPENDS openglDemo1 
      WORKING_DIRECTORY ${CMAKE_PROJECT_DIR}
  )
#+END_SRC

Without all the comments and the custom target, the CMakeLists.txt
file would become:

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 3.9)
  project(OpengGL_CPP)
  set(CMAKE_CXX_STANDARD 17)     
  set(CMAKE_VERBOSE_MAKEFILE ON)

  #========== Targets Configurations ============#
  add_executable(openglDemo1 opengl1.cpp)
  target_link_libraries(openglDemo1 GL GLU glut)
#+END_SRC


 *Building on Command Line:*

1 Install OpenGL development libraries (Fedora Linux):

#+BEGIN_SRC sh 
  $ sudo dnf install freeglut-devel.x86_64
  # Optional: Faster and better building system than GNU Make
  $ sudo dnf install ninja-build.x86_64 
#+END_SRC

2 Clone sample project:

#+BEGIN_SRC sj 
  $ git clone https://gist.github.com/caiorss/fd9e61887e9b2575f2275a80af44fac2 cmake-opengl
  Cloning into 'cmake-opengl'...
  remote: Enumerating objects: 4, done.
  remote: Counting objects: 100% (4/4), done.
  remote: Compressing objects: 100% (4/4), done.
  remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0
  Unpacking objects: 100% (4/4), done.

  $ cd cmake-opengl/

  $ ls
  CMakeLists.txt  opengl1.cpp
#+END_SRC

3 Build with Makefile:
 
   + cmake -H<SOURCE> -B<BUILD> [-G <Build-Systems>]
     + <SOURCE> - Directory where is CMakeLists.txt (In this case (.)
       current directory)
     + <BUILD> - Directory containing compilation output and the
       building scripts generated by CMake for some building
       systems. In this exaple: ./cache 
     + -G  <Build-Systems> -> [Optional] Specifies the building
       systems which CMake will generate the scripts for. On Linux,
       the default building system is Makefiles and on Windows it is
       MSBuild. 

#+BEGIN_SRC sh 
  # Generate => Building scripts for Makefile on ./cache directory 
  $ cmake -H. -Bcache 

  -- The C compiler identification is GNU 8.2.1
  -- The CXX compiler identification is GNU 8.2.1
  ... ...   ... ...   ... ...   ... ...   ... ... 
  -- Generating done
  -- Build files have been written to: /home/archbox/root-scripts/cmake-opengl/cache
#+END_SRC

Build the executable running the building script (Makefile) from CMake:

 + Note: It will build all CMake targets, all executables and libraries.

#+BEGIN_SRC sh 
  $ cmake --build cache

  /usr/bin/cmake -H/home/archbox/root-scripts/cmake-opengl -B/home/archbox/root-scripts/cmake-opengl/cache --check-build-system CMakeFiles/Makefile.cmake 0
  /usr/bin/cmake -E cmake_progress_start /home/archbox/root-scripts/cmake-opengl/cache/CMakeFiles /home/archbox/root-scripts/cmake-opengl/cache/CMakeFiles/progress.marks
   .. ...  .. ...  .. ...  .. ...  .. ...  .. ... 
  ir/build
  gmake[2]: Entering directory '/home/archbox/root-scripts/cmake-opengl/cache'
  [ 50%] Building CXX object CMakeFiles/openglDemo1.dir/opengl1.cpp.o
  /usr/lib64/ccache/c++    -std=gnu++1z -o CMakeFiles/openglDemo1.dir/opengl1.cpp.o -c /home/archbox/root-scripts/cmake-opengl/opengl1.cpp
  [100%] Linking CXX executable openglDemo1.bin
#+END_SRC

Build a single target:

#+BEGIN_SRC sh 
 $ cmake --build cache --target openglDemo1
#+END_SRC

Inspect executable: 

#+BEGIN_SRC sh 
  $ file cache/openglDemo1.bin 
   
   cache/openglDemo1.bin: ELF 64-bit LSB
   executable, x86-64, version 1 (SYSV), dynamically linked, interpreter
   /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0,
   BuildID[sha1]=269d06a0054677d70ecf0258268565535e3dfbd4, not stripped
#+END_SRC

Execute a custom target, for instance the custom target _run-ex1_ which runs
the executable (aking to $ make run).

#+BEGIN_SRC sh 
  $ cmake --build cache --target run-ex1

    ... ... .... 
  Scanning dependencies of target run-ex1
  gmake[3]: Leaving directory '/home/archbox/root-scripts/cmake-opengl/cache'
  /usr/bin/gmake -f CMakeFiles/run-ex1.dir/build.make CMakeFiles/run-ex1.dir/build
  gmake[3]: Entering directory '/home/archbox/root-scripts/cmake-opengl/cache'
  ./openglDemo1.bin
  [INFO] Starting OpenGL main loop.
  [INFO] Running loop.
  [INFO] Running loop.
#+END_SRC

4 Build with Ninja. 

 + The compilation can be faster and less verbose with Ninja-build
   building systems.

#+BEGIN_SRC sh 
  # Remove cache directory 
  rm -rf cache

  # Generate building scripts for Ninja building system in directory ./cache 
  $ cmake -H. -Bcache -G Ninja
  -- The C compiler identification is GNU 8.2.1
   ... .... ... .... ... .... ... ....
  -- Generating done
  -- Build files have been written to: /home/archbox/root-scripts/cmake-opengl/cache

  # Build a single target 
  $ cmake --build cache --target openglDemo1
  [2/2] Linking CXX executable openglDemo1.bin

  # Build all targets 
  $ cmake --build cache --target all
  ninja: no work to do.

  # Run target: run-ex1 (akin to $ make run)
  $ cmake --build cache --target run-ex1
  [0/1] cd /home/archbox/root-scripts/cm...pts/cmake-opengl/cache/openglDemo1.bin
#+END_SRC
 
5 Open project with IDE or editor that doesn't support CMake, for
instance: Code Blocks.

 + The following command generates a blocks project file
   (OpengGL_CPP.cbp) and a GNU make building (Makefile) script. Then,
   the project can be opened from Code Blocks by selecting the file
   OpenGL_CPP.cpb which is a CodeBlocks project file.

#+BEGIN_SRC 
  $ cmake -H. -Bcblock -G "CodeBlocks - Unix Makefiles"

  -- The C compiler identification is GNU 8.2.1
   ... ... ... ... ... ... .... 
  -- Configuring done
  -- Generating done
  -- Build files have been written to: /home/archbox/root-scripts/cmake-opengl/cblock

  $ tree cblock -L 1
  cblock
  ├── CMakeCache.txt
  ├── CMakeFiles
  ├── cmake_install.cmake
  ├── Makefile
  └── OpengGL_CPP.cbp

  1 directory, 4 files
#+END_SRC

** Project with multiple targets and a single CMakeLists
*** Adding and setting multiple targets  

This section provides shows how to set up a project with additional
configuration and multiple targets which means a project with multiple
executables, shared libraries or static libraries.

 *Set up executable target*

 + Executable target defintion => Builds a *.exe on Windows.

#+BEGIN_SRC cmake  
   add_executable(SampleApp main.cpp source1.cpp source2.cpp)
#+END_SRC

Header files can also be added to the target in order to make them
easier to access in an IDE such as Visual Studio. 

#+BEGIN_SRC cmake  
   add_executable( SampleApp 
                   main.cpp 
                   class1.cpp class2.hpp 
                   class1.cpp lcass2.hpp
                 )
#+END_SRC


 *Set target defines #define or -D<DEFINITION>=VALUE or /D<DEFINTION>=<VALUE>*

 + Compiler defintions. => Defines.
   + It is the same as compiling with GCC with command line option
     -D{DEFINITION}={VALUE} or compiling with MSVC VC++ with the
     command line option /D{DEFINITION}={VALUE} which becomes #define
     {DEFINITION} {VALUE} in the code.
   + Docs: [[https://cmake.org/cmake/help/latest/command/target_compile_definitions.html][target_compile_definitions — CMake 3.13.2 Documentation]]

#+BEGIN_SRC cmake 
    target_compile_definitions(SampleApp PRIVATE  
       VERBOSITY=100  # Same as #define VERBOSITY 100 
       Optimize       # Same as -DOptimize or #define Optimize
       foo=bar        # Same as -Dfoo=bar on (GGCC or Clang) or /Dfoo=bar on MSVC
      )
   # In a single line 
    target_compile_definitions(SampleApp PRIVATE VERBOSITY=100 Optimize foo=bar)
#+END_SRC

 *Set target include directories*

 + Include directories containing header files. Similar to
   command line option -I with GCC.
   + [[https://cmake.org/cmake/help/v3.0/command/target_include_directories.html][target_include_directories — CMake 3.0.2 Documentation]]

#+BEGIN_SRC cmake 
  # Similar to: g++ main.cpp src1.cpp ... -o app.bin -Isrc/include1 -I/home/user/include
  target_include_directories(SampleApp PUBLIC src/include1 /home/usr/include)
#+END_SRC

 *Set directories where shared or static libraries will be searched*

Set the directories where shared or static libraries will be
searched. Note: this command sets the search path for shared libraries
for all targets. 

#+BEGIN_SRC cmake
  link_directories(  
    # C:\Users\DummyUser\libs
    "C:\\Users\\DummyUser\\libs" # Windows paths with backward slash must be escaped with '\'
    "C:/libs/Graphics"           # Windows paths with forward slash 
    "/home/DummyUser/libs" 
  )
#+END_SRC

The command shown in the previous code is equivalent to compiling a
target with GCC as: 

#+BEGIN_SRC sh 
  $ g++ file1.cpp -c -o file1.o -LC:\Users\DummyUser\libs -LC:/libs/Graphics/ -L/home/DummyUser/libs
#+END_SRC


Shared Librarie files extensions: 
 + ~*.dll~ files on Windows for all compilers.
 + ~*.so~ files on Unix-like OSes
 + ~*.dylib~ or ~*.so~ on MacOSX

Static librarie file extension:
 + ~*.lib~ files for MSVC, VC++
 + ~*.a~ for GCC, GCC/Mingw or Clang++. 

 *Set linking libraries*

 + Libraries that the executable will link against.
   + It can be: shared libraries installed on the system or either
     shared or static libraries in the current project.
   + Note: Project libraries are also targets. 

#+BEGIN_SRC cmake  
   # Project shared library SampleSharedLib.so (Linux, Unix) or 
   # SampleSharedLib.dll on Windows. 
   add_library( SampleSharedLib SHARED  
                tools.cpp      tools.hpp 
                CShell.cpp     CShell.hpp 
                FileSystem.cpp FileSystem.hpp
              )
   # Configuration of target SampleSharedLib
   target_include_directories(SampleSharedLib PRIVATE src/lib/include1)

   # Project static library 
   add_library(StaticLibrary STATIC lib1.cpp lib2.cpp lib3.cpp)

   target_link_libraries(SampleApp  
           GL blas opencv ole32 user32  # System libraries  /usr/lib/*.so files on Linux 
                                        # or *.lib files for MSVC VC++/Windows compiler and DLLs 
                                        # at C:\Windows\System32
           SampleSharedLib              # Project shared library 
           StaticLibrary                # Project static library 
   )
#+END_SRC

 *Set compiler flags* 

 + Target compilar flags.
   + Note: The compilation flags are compiler-specific, the following
     flags only works for GCC and Clang, but they don't work for MSVC
     (VC++ Compiler) that uses forward slashes for compiler options
     instead of dashes. 

#+BEGIN_SRC cmake 
   if(NOT MSVC) 
      # Only for GCC or Clang 
      # (g) => Add debugging symbols 
      target_compile_options(SampleApp -g -Wall -Wpendantic -Wextra )
   else()
      # MSVC (VC++) => "visual" C++
      target_compile_options(SampleApp /Zi /Wall /Yd)         
   endif()
#+END_SRC


 *Set target compiler extensions and C++ standard*

Documentation: 
  + [[https://cmake.org/cmake/help/latest/command/target_compile_features.html][target_compile_features]]
  + [[https://cmake.org/cmake/help/latest/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html][CMAKE_CXX_KNOWN_FEATURES]] - Arguments of command target_compile_features
  + See: https://github.com/Kitware/CMake/tree/master/Tests/CompileFeatures

#+BEGIN_SRC cmake 

   # Equivalent to compiling the target usign GCC with -std=c++14 (C++14 ISO Standard)
   # Or /std:c++14 in MSVC VC++ 
   target_compile_features(SomeExecutableTarget PRIVATE cxx_std_14)

   # Equivalent to compiling the target usign GCC with -std=c++17 (C++17 ISO Standard)
   # Or /std:c++17 in MSVC VC++ 
   target_compile_features(SomeExecutableTarget PRIVATE cxx_std_17)

   # Equivalent to compiling the target usign GCC with -std=c++20 - Experimental C++20
   target_compile_features(SomeExecutableTarget PRIVATE cxx_std_20)
#+END_SRC


 *Set target Properties*

  + Set target properties:

#+BEGIN_SRC cmake 
 set_target_properties(SampleApp PROPERTIES 
     {PROPERTY1} {VALUE1}
     {PROPERTY2} {VALUE2}
     ... .... ... ... 
     {PROPERTYN} {VALUEN}
  )
#+END_SRC

Example 1: Add file extension .bin to Unix executable (note:
executables of Unix-like operating system do not have extension *.exe
like in Microsft Windows): 

#+BEGIN_SRC cmake 
 if(UNIX)
    # When it is compiled, instead of generating the executable named as SampleApp, 
    # the program will be named as "SampleApp.bin". 
    set_target_properties(SampleApp PROPERTIES SUFFIX ".bin")
  endif()
#+END_SRC

Example 2: Modify multiple properties, set the shared library file
name to AddinExtesion.xll. 

#+BEGIN_SRC cmake 
  add_library(WrapperLibrary SHARED src1.cpp src2.cpp ... srcN.cpp)
  # ... omit configuration ... # 

  set_target_properties(WrapperLibrary PROPERTIES
    # On Unix, it would add "lib" to beggining of the file name.
    # If prefix was not set to empty, the output file name would be
    # 'libAddinExtesion.xll'
    PREFIX       ""  

    # Change file name without changing prefix or extension (suffix)
    OUTPUT_NAME  "AddinExtension"

    # Change file extension 
    SUFFIX      ".xll"    
  
    # Makes all symbols hidden by default (compiles with by compiling
    # with flag -fvisibility=hidden on Unix-like Oses).  This setting
    # mimics the behavior of MSVC compiler extension
    # __declspec(dllexport)/__declspec(dllimport)
    CXX_VISIBILITY_PRESET hidden
  )
#+END_SRC

The target properties could also be set individually:

#+BEGIN_SRC cmake 
  add_library(WrapperLibrary SHARED src1.cpp src2.cpp ... srcN.cpp)
  # ... omit configuration ... # 
  set_target_properties(WrapperLibrary PROPERTIES PREFIX      "")
  set_target_properties(WrapperLibrary PROPERTIES OUTPUT_NAME "AddinExtension")
  set_target_properties(WrapperLibrary PROPERTIES SUFFIX      ".xll")  
#+END_SRC

 *Add more targets* 

A CMake project can have multiple targets, generating executables,
static libraries or shared libraries.

#+BEGIN_SRC cmake 
  add_executable(DocGenerator src/docgen/main.cpp src/docgen/src2.cpp ...)
  # ... configuration of DocGenerator

  add_executable(Display src/docgen/main.cpp src/docge/src2.cpp ...)
  
  add_library(libCommon SHARED src/lib/src1.cpp src/lib/src2.cpp ...)

  # .... configure targes .... #
#+END_SRC

 *To avoid* 

 + *Commands which affects all targets*: for instance,
   include_directories(dir1 dir2 ...) will add those include
   directories to all targets regardless if they need them or not. It
   is better to use the command target_include_directories as it
   affects just a single target. The word 'should not' does not means
   'never'. If the intent is really set the same include directories
   for all targets, then the command include_directories should be
   used. 

 + *Non portable compiler settings.* Example: Compiler flags such as
   -D{KEY}=VALUE, used by GCC and Clang, or /D{KEY}=VALUE, used by
   MSVC (VC++) are non portable accross different compilers. To
   overcome this, CMake provides many commands with an unified
   interface to many compilers and build-systems, such as
   _target_compile_definitions_ that allows setting defines in a
   compiler agnostic manner.
*** Example 

Project directory structure:

 + ~C:\User\Dummy\Documents\SampleProject~  (Project Root Directory)

   * CMakeLists.txt

   * ./bin => Directory where the compiled binaries will be installed. 

   * ./src - Directory 
     + src/main.cpp
     + src/execMain.cpp
     + src/source1.cpp
     + src/source1.hpp
     + src/source2.cpp
     + src/source2.hpp 
     + src/source3.cpp 
     + ... ... .. 

   * ./lib - directory
     + lib/lib1.cpp
     + lib/lib2.cpp
     + lib/lib3.cpp


  File: *CMakeLists.txt* file for this hypothetical project.

Global configuration: 
 + Note: Global settings such _add_definitions_ and _include_directories_
   should be avoided.  

#+CAPTION: Part 1 of CMakeListi.txt - Global project's configuration 
#+BEGIN_SRC cmake 
   # ========= Global Configuration  ===============#
   # The global configuration is shared by all targets. 
   cmake_minimum_required(VERSION 3.9)
 
   project( SuperCADTool
            # Note: the following fields are optional 
            DESCRIPTION "Another CAD Computer Aided Design APP"
            VERSION     1.0 
            LANGUAGE    CXX 
          )
 
   set(CMAKE_CXX_STANDARD 17)     
   set(CMAKE_VERBOSE_MAKEFILE ON)

  # AVOID! 
  # Global compile definition
  # Add compiled definition -DQT_QML_DEBUG for all target.s 
  add_definitions(-DQT_QML_DEBUG)

  # AVOID!
  # Global includes added to all targets 
  include_directories("C:\\boost\\v1.67\\include"  "/home/someone/includes")

  # AVOID! 
  # Global linking directories which contains static (*.a) or shared
  # libraries (*.so or *.dll files)
  link_directories(  
     # C:\Users\DummyUser\libs
     "C:\\Users\\DummyUser\\libs" # Windows paths with backward slash must be escaped with '\'
     "C:/libs/Graphics"           # Windows paths with forward slash 
     "/home/DummyUser/libs" 
   )
#+END_SRC

Target Configurations: 

#+CAPTION: Part 2 of CMakeListi.txt - Per-target configuration. 
#+BEGIN_SRC cmake 
   # ======= Configuration per target =============#

   # Target: SampleApp executable 
   #---------------------------------------------------------
   add_executable(SampleApp src/main.cpp src/source1.cpp src/source2.cpp) 
   target_compile_definitions(SampleApp PRIVATE VERBOSITY=100 Optimize foo=bar)
   target_include_directories(SampleApp PUBLIC src/include1 /home/usr/include)

   target_link_libraries(SampleApp  
           GL blas opencv ole32 user32  # System libraries  /usr/lib/*.so files on Linux 
                                        # or *.lib files for MSVC VC++/Windows compiler and DLLs 
                                        # at C:\Windows\System32
           SampleSharedLib              # Project shared library 
           StaticLibrary                # Project static library 
   )

  # Target: Executable2 - Add header files to make them visible in the IDE 
  #-----------------------------------------------------------------
  add_executable(Executable2 src/execMain.cpp 
                             src/source1.cpp src/source1.hpp 
                             src/source2.cpp src/source2.hpp 
                 ) 

  # Target: SampleShared - Shared library dll, so 
  #-------------------------------------------------------------------
  add_library(SampleSharedLib SHARED  lib/lib1.cpp lib/lib2.cpp lib/lib3.cpp)
  target_include_directories(SampleSharedLib PRIVATE src/lib/include1)
#+END_SRC

Intallation commands: 

#+CAPTION: Part 3 of CMakeListi.txt - Target/commands for installing executables and libraries.
#+BEGIN_SRC cmake 
  # Install binaries locally during development.
  # The binaries are installed in project's "${ROOT DIRECTORY}./bin" 
  #----------------------------------------------------------------------

  # During the development install ./bin dir.  in project's root directory 
  # To install using CMAKE_INSTALL_PREFIX path, set this variable to 'OFF'
  set(INSTALL_LOCAL ON) 

  if(INSTALL_LOCAL ON)
    # Overrides the default default install location that would be 
    # ${CMAKE_INSTALL_PREFIX}/bin as ${CMAKE_CURRENT_LIST_DIR}/bin 
    #
    # Note: CMAKE_CURRENT_LIST_DIR is the directory where is CMakeLists.txt 
    install(TARGETS SampleApp Executable2 SampleSharedLib DESTINATION  ${CMAKE_CURRENT_LIST_DIR}/bin)
  else()
    # Install binary to directory probvided by the variable CMAKE_INSTALL_PREFIX 
    install(TARGETS SampleApp Executable2 SampleSharedLib DESTINATION  bin)
  endif()
#+END_SRC


 *Compilation:*

Once the project file CMakeLists.txt is opened in any supported IDE or
an text editor such as QTCreator, the IDE will show all available
targets and provide menus, context menus or buttons where is possible
to select all targets for building the entire project; build individual
targets; debug an specific executable targets and run the *install*
target that copies the compiled files to the directory stored in the
variable *CMAKE_INSTALL_PREFIX*. 

 *Running targets manually from command line without any IDE:* 

Step 1. Configuration - run the command from the project's top level directory.

 + Configure with install path CMAKE_INSTALL_PREFIX set to default
   sytem location. (/usr/local on Linux). To install the binaries to
   the this location, set the variable INSTALL_LOCAL in the code to
   OFF. 

#+BEGIN_SRC sh 
  # Use Ninja build system 
  $ cmake -Bcache -H. -G Ninja 

  # Use Makefile 
  $ cmake -Bcache -H. -G Ninja 
#+END_SRC

 + Configure base install path (CMAKE_INSTALL_PREFIX) to
   /home/dummy/Documents/myapp, assuming that INSTALL_LOCAL is set to
   OFF.

#+BEGIN_SRC sh 
  $ cmake -Bcache -H. -G Ninja -DCMAKE_INSTALL_PREFIX=/home/dummy/Documents/myapp 
#+END_SRC

Step 2. Run targets. 

 + Run all targetes building the whole project 

#+BEGIN_SRC sh 
   $ cmake --build cache --target  
#+END_SRC

 + Run only the target SampleApp that builds the SampleApp executable:

#+BEGIN_SRC sh 
  $ cmake --build cache --target SampleApp
#+END_SRC

 + Run only the target Executable2 that builds the Excutable2 executable 

#+BEGIN_SRC sh 
   $ cmake --build cache --target Executable2 
#+END_SRC
 
 + Run the target 'install' that will install all binaries specified
   in target install to ./bin directory if the option *INSTALL_LOCAL* is
   set in the code (ON). To install the standard location specified by
   ${CMAKE_INSTALL_PREFIX}, set *INSTALL_LOCAL* in the code to OFF.

#+BEGIN_SRC sh 
   $ cmake --build cache --target install 
#+END_SRC

*** Further Reading

General 

 + Ben Morgan - The University of Warwick - [[https://web.archive.org/web/20190109203537/https://indico.fnal.gov/event/9717/session/38/contribution/82/material/slides/0.pdf][C++11/14/1z in CMake]]
 + [[https://foonathan.net/doc/compatibility/][Documentation of Compatibility]]
 + [[https://manpages.debian.org/stretch-backports/cmake-data/cmake-compile-features.7.en.html][Manpage - Cmake compile features]]
 + https://community.kde.org/Guidelines_and_HOWTOs/CMake/Library

Install Dependencies - Shared Libraries: 

 + https://cmake.org/cmake/help/latest/command/install.html

 + [[https://stackoverflow.com/questions/41175354/can-i-install-shared-imported-library][Can I install shared imported library?]]

 + https://cmake.org/pipermail/cmake/2014-December/059338.html

 + [[https://cmake.org/pipermail/cmake/2009-June/030205.html][Install of library sub-project prior to building application]]

 + [[http://cmake.3232098.n2.nabble.com/Copying-Shared-Libraries-DLLs-Next-to-the-Executable-td7597163.html][Copying Shared Libraries (DLLs) Next to the Executable]]
** Consuming or Dependencies 
*** Overview 

Note: 
 + object-code => Here means any compiled machine code, any file with
   the extensions: ~*.exe, *.o, *.obj, *.so, *.dylib~

CMake can consume libraries or external dependencies in many different ways: 

  * *Library Installation with building system* 
    + Installing the libraries with CMake, GNU Make, GNU autotools or
      any building systems and consuming them via find_package(LIB) and
      target_link_libraries( ....).
    + Disadvantages:
      * As C++ compilers do not have a standard and stable ABI -
        Application Binary Interface, the library needs to be
        installed for every different compiler and different version
        of the same compiler, otherwise it will not be possible to
        build an application that links against a library built with
        different compiler. 
      * Installing multiple versions of the same library may result in
        dependency hell breaking dynamic-linked applications depending
        on it.

  * *Library installation from operating system's package manager*
    + Installing libraries with a package manager such as Linux
      Fedora (dnf), Ubuntu (apt-get or Mac OSX (brew) and consuming
      them via find_package(LIB) and target_link_libraries(...).      
    + Disadvantages:
      * The installation is not reproducible in other platforms and
        often, it is not possible to install multiple versions of the
        same library and it may not be available in all package
        managers.

  * *CMake add_subdirectory(lib/<LIBRARY_DIR>)*
    + The library directory containing the source code is added to the
      project either via CMake [[https://cmake.org/cmake/help/latest/module/ExternalProject.html][ExternalProject]], manual copy or via git
      add submodule. The library is consumed in the project by adding
      a line: add_subdirectory(lib/<LIBRARY_DIR>) to the file
      CMaklists.txt. And the applications links against the library
      with target_link_libraries(app lib::libname).
    + Advantages:
      * No ABI issues as the library is built with the same compiler
        as the application.
      * Better for static linking.
      * More simple as it does not require the library maintainer to
        provide a CMake module for find_package.
      * Better reproducibility and easier compilation on different
        operating systems and also easier cross-compilation for
        embedded targets.
      * No dependency hell: As multiple versions of the library can be
        used in different projects without disrupting each other.
    + Disadvantages:
      * Longer compile-time
      * More disk space spending
      * The library is recompiled for every project.

  * *C++-specific Package Manager with CMake Integration*
    * Package managers automates the process of downloading libraries'
      source code and compiling them alongside the project. It is no
      possible to generalize C++ package managers as there are many differences
      among them. In the case of Conan package manager, it builds and
      installs the library object-code and header files to the Conan's
      cache directory where the library can be reused on many projects
      and recompiled on-demand if the compiler used to build the
      project is not ABI-compatible with the compiler used to build
      the libraries object codes.
    * Note: there are other package managers built as CMake scripts,
      but they fall short when dealing with libraries using other
      building systems such as GNU autotools or GNU Makefiles.
    * Advantages:
      * Automates the process of getting and installing libraries.
      * Saves disk space.
      * Shorter compile-time as library-object codes can be reused in
        other projects.
      * No ABI issues
      * No dependency hell 
      * Better for static linking and cross-compilation for embedded
        systems.
      * Reproducible on many different operating systems.
      * Makes easier to install big libraries, frameworks or libraries
        with many dependencies such as Boost and Poco libraries which
        depends on openssl which is problematic to build on Windows.
    * Disadvantages:
      * conan is not mainstream and there are still many competing
        package managers.
      * conan requires a Python installation, although it is not a big
        issue since there are many tools using Python as an embedded
        scripting language such GNU Debugger GDB or Windows Debugger.
*** CMake add_subdirectory

External libraries or sub-projects can be consumed with CMake command
add_subdirectory(<PATH-TO/LIB-DIRECTORY>) which builds the project and
the library source code <LIB-DIRECTORY> containing a
CMakeLists.txt. The benefits of this approach is that libraries are:

 * Libraries does not need to be installed in the system before
   usage.

 * No ABI incompatibility issue as the compiler used for building the
   application and library are the same. 

 * Better tracking of dependencies and no dependency hell as
   different versions of the same library can be used in many project
   without disrupting each other.

Drawbacks:

 + Higher disk space usage as every project needs a copy of the
   library sources.

 + Libraries need to use CMake as building system and contain a
   CMakeLists.txt file at root directory, otherwise, it will not be
   possible to use add_subdirectory command.

 + Possible complexity of git add submodule. 

 *Libraries used:*

   + [[https://github.com/gabime/spdlog][spdlog]]
   + [[https://github.com/cpputest/cpputest][cpputest]]

  *Creating project* 

(1) Create project and git repository 

#+BEGIN_SRC sh 
  $ git init .
  Initialized empty Git repository in /home/user/projects/cmake-experiment/.git/

  $ git add CMakeLists.txt main.cpp 

  $ git commit -m started
  [master (root-commit) 8e60c5c] started
   2 files changed, 16 insertions(+)
   create mode 100644 CMakeLists.txt
   create mode 100644 main.cpp
#+END_SRC

(2) Add external libraries to the project via git submodule or by
copying them manually.    

#+BEGIN_SRC sh 
  $ git submodule add  https://github.com/gabime/spdlog extern/spdlog
  $ git submodule add https://github.com/cpputest/cpputest extern/cpputest
#+END_SRC

(3) Show current directory: 

#+BEGIN_SRC sh 
  $ tree -L 2 .
  .
  ├── CMakeLists.txt
  ├── CMakeLists.txt.user
  ├── extern
  │   ├── cpputest
  │   └── spdlog
  └── main.cpp

  3 directories, 3 files
#+END_SRC


 *File: CMakeLists.txt*

#+BEGIN_SRC cmake 
   cmake_minimum_required(VERSION 2.8)
   project(cmake-experiment)

   set(CMAKE_CXX_STANDARD 17)
   set(CMAKE_VERBOSE_MAKEFILE ON)

   add_subdirectory(extern/spdlog)
   add_subdirectory(extern/cpputest)

   add_executable(app main.cpp)
   target_link_libraries(app spdlog::spdlog CppUTest)
#+END_SRC

 + The command [[https://cmake.org/cmake/help/latest/command/add_subdirectory.html][add_subdirectory]] adds the sources of the library spdlog
   to the current build by processing the file
   extern/spdlog/CMakeLists.txt.

 + Libraries can be made easier to use and consume by listing in their
   documentation the _targets they define_ which client codes can link
   against with _add_library_. If the those targets are not mentioned
   the user has to inspect all libraries CMakeLists.txt files which
   can be cumbersome in libraries with many nested directories.  

Finding targets defined by spdlog and CppUtest libraries:

 + The file extern/spdlog/CMakeLists.txt contains the following lines
   that defines library targets which the top-level CMakeLists.txt
   file can consume:

#+BEGIN_SRC cmake
  add_library(spdlog INTERFACE)
  add_library(spdlog::spdlog ALIAS spdlog)
#+END_SRC

 + The file extern/CppUtest/CMakeLists.txt contains the following
   lines which builds the extern/CppUtest/src/CppUtest/CMakeLists.txt
   as a sub-project.

#+BEGIN_SRC cmake 
  include_directories(${CppUTestRootDirectory}/include)
  add_subdirectory(src/CppUTest)
#+END_SRC

 + The file extern/CppUtest/src/CppUtest/CMakeLists.txt contains the
   following lines which defines the target CppUtest which the top
   level CMakeLists.txt that has add_subdirectory(extern/cpputest)
   can link against: 

#+BEGIN_SRC cmake 
   add_library( CppUTest
               CommandLineArguments.cpp
               MemoryLeakWarningPlugin.cpp
               TestHarness_c.cpp
               ... ... ... ... 
              )
#+END_SRC

 *File: main.cpp*

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <spdlog/spdlog.h>
  #include <CppUTest/CommandLineTestRunner.h>
  #include <CppUTest/Utest.h>
  #include <CppUTest/TestHarness.h>

  double func(double x)
  {
      return 3 * x * x - 21.0 * x + 36.0;
  }

  TEST_GROUP(MainTest)
  {
  };

  TEST(MainTest, functionPoints)
  {
      spdlog::info("Running functionPointsTest.");

      DOUBLES_EQUAL(0.0, func(4.0), 0.001);
      DOUBLES_EQUAL(0.0, func(3.0), 0.001);
      DOUBLES_EQUAL(0.0, func(3.0), 0.001);
      DOUBLES_EQUAL(10.0, func(126.0), 0.001);

      // Supposed to fail
      DOUBLES_EQUAL(1.0, func(18.0), 0.001);

      spdlog::info("Ending functionPointsTest.");
  };

  int main(int argc, char** argv)
  {
      SPDLOG_TRACE("Entering function");
      spdlog::info("Starting server OK.");
      spdlog::error("Server crashed. ");
      spdlog::info("Received request from 192.168.10.1 at port 9090");
      spdlog::info("Sending response to client 192.168.100.1 connection ID 10");
      SPDLOG_TRACE("Exit application");

      std::cout << "========== Running Tests ============" << std::endl;

      return RUN_ALL_TESTS(argc, argv);
  }
#+END_SRC

 *Build on Command Line* 

#+BEGIN_SRC sh 
  $ cmake -H. -B_build -GNinja -DCMAKE_BUILD_TYPE=Debug
   ... ... ... ... ... ... 
  -------------------------------------------------------

  -- Configuring done
  -- Generating done
  -- Build files have been written to: /home/archbox/projects/cmake-experiment/_build

  $ cmake --build _build --target
#+END_SRC

 *Running* 

#+BEGIN_SRC sh 
  $ _build/app 
  [2019-07-11 17:24:59.450] [info] Starting server OK.
  [2019-07-11 17:24:59.450] [error] Server crashed. 
  [2019-07-11 17:24:59.450] [info] Received request from 192.168.10.1 at port 9090
  [2019-07-11 17:24:59.451] [info] Sending response to client 192.168.100.1 connection ID 10
  ========== Running Tests ============
  [2019-07-11 17:24:59.451] [info] Running functionPointsTest.

  ../main.cpp:23: error: Failure in TEST(MainTest, functionPoints)
          expected <10>
          but was  <45018> threshold used was <0.001>

  .
  Errors (1 failures, 1 tests, 1 ran, 4 checks, 0 ignored, 0 filtered out, 1 ms)
#+END_SRC
*** FetchContent module (Approach 1)

The CMake module [[https://cmake.org/cmake/help/v3.15/module/FetchContent.html][FetchContent]] can fetch dependencies at configuration
time from many possible sources such as GIT remote repositories, http
servers (URLs) and compressed files such as *.tar, *.tgz, *.zip and so
on.

Documentation: 
 + https://cmake.org/cmake/help/v3.15/module/FetchContent.html 

See also: 
 + https://cmake.org/cmake/help/latest/module/ExternalProject.html
 + https://blog.kitware.com/cmake-superbuilds-git-submodules/

 *Example:* 

File: CMakeLists.txt 

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 3.14 FATAL_ERROR)
  project(cmake-experiment)

  set(CMAKE_CXX_STANDARD 17)
  set(CMAKE_VERBOSE_MAKEFILE ON)

  # See documentation at: https://cmake.org/cmake/help/latest/module/FetchContent.html
  include(FetchContent)

  #========== Fetch cpputest ============================#

  FetchContent_Declare(
      cpputest
      GIT_REPOSITORY  "https://github.com/cpputest/cpputest.git"
      GIT_TAG         "v3.8"
  )
  FetchContent_GetProperties(cpputest)
  if(NOT cpputest_POPULATED)
      FetchContent_Populate(cpputest)
      message(" [INFO] cpputest_SOURCE_DIR = ${cpputest_SOURCE_DIR} ")
      message(" [INFO] cpputest_BINARY_DIR = ${cpputest_BINARY_DIR} ")

      # Optional => From: https://github.com/cpputest/cpputest/blob/master/CMakeLists.txt
      set(TEST OFF)
      set(TEST_DETAILED OFF)

      add_subdirectory(${cpputest_SOURCE_DIR} ${cpputest_BINARY_DIR})

      # Note: this path was found by trial and error, it is library-specific
      include_directories(${cpputest_SOURCE_DIR}/include)
  endif()

  #===== Fetch spdlog as archive ====================#

  FetchContent_Declare(
      spdlog
      URL       "https://github.com/gabime/spdlog/archive/v1.3.1.zip"
  )
  FetchContent_GetProperties(spdlog)
  if(NOT spdlog_POPULATED)
      FetchContent_Populate(spdlog)
      # message(" [INFO] spdlog_SOURCE_DIR = ${spdlog_SOURCE_DIR} ")
      # message(" [INFO] spdlog_BINARY_DIR = ${spdlog_BINARY_DIR} ")

      # Optional => Set library build options
      # Build options at: https://github.com/gabime/spdlog/blob/v1.x/CMakeLists.txt
      set(SPDLOG_BUILD_EXAMPLES OFF)
      set(SPDLOG_BUILD_BENCH    OFF)
      set(SPDLOG_BUILD_TESTS    OFF)

      add_subdirectory(${spdlog_SOURCE_DIR} ${spdlog_BINARY_DIR})
  endif()

  # ========= Target Settings ==========================#
  add_executable(app main.cpp)
  target_link_libraries(app  CppUTest spdlog::spdlog)
#+END_SRC

File: main.cpp 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <spdlog/spdlog.h>
  #include <CppUTest/CommandLineTestRunner.h>
  #include <CppUTest/Utest.h>
  #include <CppUTest/TestHarness.h>

  double func(double x)
  {
      return 3 * x * x - 21.0 * x + 36.0;
  }

  TEST_GROUP(MainTest)
  {
  };

  TEST(MainTest, functionPoints)
  {
      spdlog::info("Running functionPointsTest.");

      DOUBLES_EQUAL(0.0, func(4.0), 0.001);
      DOUBLES_EQUAL(0.0, func(3.0), 0.001);
      DOUBLES_EQUAL(0.0, func(3.0), 0.001);
      DOUBLES_EQUAL(10.0, func(126.0), 0.001);

      // Supposed to fail
      DOUBLES_EQUAL(1.0, func(18.0), 0.001);

      spdlog::info("Ending functionPointsTest.");
  };

  int main(int argc, char** argv)
  {
      SPDLOG_TRACE("Entering function");
      spdlog::info("Starting server OK.");
      spdlog::error("Server crashed. ");
      spdlog::info("Received request from 192.168.10.1 at port 9090");
      spdlog::info("Sending response to client 192.168.100.1 connection ID 10");
      SPDLOG_TRACE("Exit application");

      std::cout << "========== Running Tests ============" << std::endl;

      return RUN_ALL_TESTS(argc, argv);
  }
#+END_SRC

 *Building and running from command line:*

Configuration step 

#+BEGIN_SRC sh 
   $ cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=Debug
   -- The C compiler identification is GNU 8.3.1
   -- The CXX compiler identification is GNU 8.3.1
   -- Check for working C compiler: /usr/lib64/ccache/cc
   -- Check for working C compiler: /usr/lib64/ccache/cc -- works

    ... .... ... ... ... ... ... ... ... ... 

   -- Configuring done
   -- Generating done
   -- Build files have been written to: /home/user/projects/cmake-experiment/build
#+END_SRC

Building step 

#+BEGIN_SRC sh  
  $ cmake --build build --target
#+END_SRC

Check build directory: 

#+BEGIN_SRC sh 
  $ tree -L 2 build
  build
  ├── app
  ├── CMakeCache.txt
  ├── CMakeFiles
  │   ├── 3.14.3
  │   ├── app.dir
  │   ├── cmake.check_cache
  │   ├── CMakeDirectoryInformation.cmake
  │   ├── CMakeError.log
  │   ├── CMakeOutput.log
  │   ├── CMakeRuleHashes.txt
  │   ├── CMakeTmp
  │   ├── feature_tests.bin
  │   ├── feature_tests.c
  │   ├── feature_tests.cxx
  │   ├── Makefile2
  │   ├── Makefile.cmake
  │   ├── progress.marks
  │   └── TargetDirectories.txt
  ├── cmake_install.cmake
  ├── _deps
  │   ├── cpputest-build
  │   ├── cpputest-src
  │   ├── cpputest-subbuild
  │   ├── spdlog-build
  │   ├── spdlog-src
  │   └── spdlog-subbuild
  ├── Makefile
  ├── spdlogConfigVersion.cmake
  └── spdlog.pc

  11 directories, 18 files

#+END_SRC

Running: 

#+BEGIN_SRC sh 
   $ build/app 
   [2019-07-14 01:16:58.305] [info] Starting server OK.
   [2019-07-14 01:16:58.305] [error] Server crashed. 
   [2019-07-14 01:16:58.305] [info] Received request from 192.168.10.1 at port 9090
   [2019-07-14 01:16:58.305] [info] Sending response to client 192.168.100.1 connection ID 10
   ========== Running Tests ============
   [2019-07-14 01:16:58.305] [info] Running functionPointsTest.

   /home/archbox/projects/cmake-experiment/main.cpp:23: error: Failure in TEST(MainTest, functionPoints)
           expected <10>
           but was  <45018> threshold used was <0.001>

   .
   Errors (1 failures, 1 tests, 1 ran, 4 checks, 0 ignored, 0 filtered out, 0 ms)
#+END_SRC

*** FetchContent module (Approach 2)

The usage of the CMake module FetchContent can be simplified by
defining functions and macros encapsulating its functionalities.

Libraries Used: 
 + [[https://github.com/tplgy/cppcodec][cppcodec]]
 + [[https://github.com/gabime/spdlog][spdlog]]

Example: 

 File: CMakeLists.txt 

#+BEGIN_SRC cmake 
   cmake_minimum_required(VERSION 3.14 FATAL_ERROR)
   project(cmake-experiment)

   set(CMAKE_CXX_STANDARD 17)
   set(CMAKE_VERBOSE_MAKEFILE ON)

   # See documentation at: https://cmake.org/cmake/help/latest/module/FetchContent.html

   #========== Macros for automating Library Fetching =============#
   include(FetchContent)

   # Download library from Github and add it as sub-project
   #
   macro(Download_Library_Git  NAME TAG REPOSITORY_URL)
       FetchContent_Declare(
           ${NAME}
           GIT_REPOSITORY  ${REPOSITORY_URL}
           GIT_TAG         ${TAG}
       )
       FetchContent_GetProperties(${NAME})
       if(NOT cpputest_POPULATED)
           FetchContent_Populate(${NAME})
           message("${NAME}_SOURCE_DIR} = ${${NAME}_SOURCE_DIR}")
           add_subdirectory(${${NAME}_SOURCE_DIR} ${${NAME}_BINARY_DIR})
       endif()
   endmacro()

   macro(Download_Library_Github LIBRARY_NAME TAG USER PROJECT )
       Download_Library_Git(
           ${LIBRARY_NAME}
           ${TAG}
           "https://github.com/${USER}/${PROJECT}.git"
           )
   endmacro()

   # Download library archive (zip, *.tar.gz, ...) from URL
   macro(Download_Library_Url NAME URL)
       FetchContent_Declare(${NAME} URL  ${URL})
       FetchContent_GetProperties(${NAME})
       if(NOT ${NAME}_POPULATED)
           FetchContent_Populate(${NAME})
           add_subdirectory(${${NAME}_SOURCE_DIR} ${${NAME}_BINARY_DIR})
       endif()
   endmacro()

   # Add path header files to the include path of all targets.
   # => NAME => Library name added with any Download_Library command.
   # => RELATIVE_PATH => Path to header files relative to library root directory
   #
   function(include_headers_directory NAME REALATIVE_PATH)
       include_directories("${${NAME}_SOURCE_DIR}/${RELATIVE_PATH}")
   endfunction()

   #============== Library Download =========================#

   Download_Library_Url(
       spdlog
       "https://github.com/gabime/spdlog/archive/v1.3.1.zip"
       )

   Download_Library_Github(
       cppcodec  # Library name - arbitrary
       v0.2      # Git tag
       tplgy     # Github user name
       cppcodec  # Name of project that will be cloned.
                 # Note: It is does not always have the same name as the library.
       )

   # Only use it if CMake cannot find the headers or the library is not
   # set properly.
   include_headers_directory(cppcodec ./cppcodec)

   # ========= Targets Settings ==========================#

   add_executable(mainapp main.cpp)
   target_link_libraries(mainapp cppcodec spdlog::spdlog)
#+END_SRC

 *File:* main.cpp 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <spdlog/spdlog.h>

  #include <cppcodec/base32_crockford.hpp>
  #include <cppcodec/base64_rfc4648.hpp>


  int main(int argc, char** argv)
  {
      SPDLOG_TRACE("Entering function");

      spdlog::info("Starting server OK.");

      spdlog::info("Received request from 192.168.10.1 at port 9090");
      spdlog::info("Sending response to client 192.168.100.1 connection ID 10");

      using base32 = cppcodec::base32_crockford;
      using base64 = cppcodec::base64_rfc4648;

      std::vector<uint8_t> decoded = base64::decode("YW55IGNhcm5hbCBwbGVhc3VyZQ==");
      std::cout << "decoded size (\"any carnal pleasure\"): " << decoded.size() << '\n';
      std::cout << base32::encode(decoded) << std::endl; // "C5Q7J833C5S6WRBC41R6RSB1EDTQ4S8"


      SPDLOG_TRACE("Exit application");

      return 0;
  }
#+END_SRC

Running: 

#+BEGIN_SRC sh 
  $ cd proejct_directory 
  $ cmake -B_build -H. -DCMAKE_BUILD_TYPE=Debug
  $ cmake --build _build --target

  # Run 
  $ _build/mainapp 
  [2019-07-19 17:46:56.306] [info] Starting server OK.
  [2019-07-19 17:46:56.306] [info] Received request from 192.168.10.1 at port 9090
  [2019-07-19 17:46:56.306] [info] Sending response to client 192.168.100.1 connection ID 10
  decoded size ("any carnal pleasure"): 19
  C5Q7J833C5S6WRBC41R6RSB1EDTQ4S8
#+END_SRC

*** FetchContent_makeAvailable (Approach 3) :opengl:glfw:graphics:

This example demonstrates how to use FetchContent for building an
OpenGL application that uses the GLFW library downloaded from github
releases URL. The commands FetchContent_Declare and
FetchContent_MakeAvaiable can be used with any other library as long
as it has CMakeLists.txt in its root directory.

Key CMake Commands Uses: 

  + FetchContent_MakeAvailable
  + FetchContent_Declare

See: 

  + GLFW Official Web Site
    + https://www.glfw.org/

  + Documentation:
    + https://www.glfw.org/documentation.html

  + GLFW Repository
    + https://github.com/glfw/glfw

  + GLWF Releases
    + https://github.com/glfw/glfw/releases

  + Glut Teapot 
    + https://github.com/Balajanovski/teapot-demo
    + https://www.sjbaker.org/wiki/index.php?title=The_History_of_The_Teapot#Images_of_the_Complete_Dataset


  *Sample Project* 

File: CMakeLists.txt 

#+BEGIN_SRC cmake 
   cmake_minimum_required(VERSION 3.5)
   project(GLFW_project)

   set(CMAKE_CXX_STANDARD 17)
   set(CMAKE_CXX_STANDARD_REQUIRED ON)
   set(CMAKE_VERBOSE_MAKEFILE ON)

   #================ GLFW Settings  ===============#

   include(FetchContent)

   # Set GLFW Options before FectchContent_MakeAvailable 
   set( GLFW_BUILD_EXAMPLES OFF CACHE BOOL  "GLFW lib only" )
   set( GLFW_BUILD_TESTS OFF CACHE BOOL     "GLFW lib only" )
   set( GLFW_BUILD_DOCS OFF CACHE BOOL      "GLFW lib only" )
   set( GLFW_BUILD_INSTALL OFF CACHE BOOL   "GLFW lib only" )

   FetchContent_Declare(
     glfwlib
     URL   https://github.com/glfw/glfw/releases/download/3.3.2/glfw-3.3.2.zip
   )

   FetchContent_MakeAvailable(glfwlib)

   #========= Find Packages =========================#

   find_package(OpenGL REQUIRED)

   #========== Target Configurations ================#

   add_executable(app1 main.cpp)
   target_link_libraries(app1 glfw OpenGL::GL glut GLU)
#+END_SRC

File: main.cpp 

#+BEGIN_SRC cpp 
  #include <GLFW/glfw3.h>
  #include <GL/glu.h>
  #include <GL/glut.h>

  int main(int argc, char** argv)
  {
      GLFWwindow* window;

      /* Initialize the library */
      if (!glfwInit())
          return -1;

      glutInit(&argc, argv);

      /* Create a windowed mode window and its OpenGL context */
      window = glfwCreateWindow(640, 480, "Hello World", NULL, NULL);
      if (!window)
      {
          glfwTerminate();
          return -1;
      }

      /* Make the window's context current */
      glfwMakeContextCurrent(window);

      glClearColor(0.0f, 0.5f, 0.6f, 1.0f);


      /* Loop until the user closes the window */
      while (!glfwWindowShouldClose(window))
      {
          /* Render here */
          glClear(GL_COLOR_BUFFER_BIT);

          glRotated(15.0, 1.0, 1.0, 1.0);
          ::glutWireTeapot(0.65);

          /* Swap front and back buffers */
          glfwSwapBuffers(window);

          /* Poll for and process events */
          glfwPollEvents();
      }

      glfwTerminate();
      return 0;
  }
#+END_SRC

 *Building from Command Line* 

 _Configuration step_

  +  $ cmake -H. -B_build -DCMAKE_BUILD_TYPE=Debug 

#+BEGIN_SRC sh 
  $ cmake -H. -B_build -DCMAKE_BUILD_TYPE=Debug 
  -- The C compiler identification is GNU 8.3.1
  -- The CXX compiler identification is GNU 8.3.1
      ... ... ... .... ... 

  -- Found OpenGL: /usr/lib64/libOpenGL.so   
  -- Configuring done
  -- Generating done
  -- Build files have been written to: /home/archbox/projects/glfw-learning/_build

#+END_SRC

 _Building step_

  + $ cmake --build _build --target 

#+BEGIN_SRC sh 
   $ cmake --build _build --target 

   ... ... ... ... ... ... 
   ... ... ... ... ... ... 

   Scanning dependencies of target glfw
   gmake[2]: Leaving directory '/home/archbox/projects/glfw-learning/_build'
   /usr/bin/gmake -f _deps/glfwlib-build/src/CMakeFiles/glfw.dir/build.make _deps/glfwlib-build/src/CMakeFiles/glfw.dir/build
   gmake[2]: Entering directory '/home/archbox/projects/glfw-learning/_build'
   [  5%] Building C object _deps/glfwlib-build/src/CMakeFiles/glfw.dir/context.c.o

    ... ... ... ... ... .. 
   ... ... ... ... ... ... 

   [ 10%] Building C object _deps/glfwlib-build/src/CMakeFiles/glfw.dir/init.c.o

   ... ... ... ... ... ... 
   ... ... ... ... ... ... 

   [ 89%] Linking C static library libglfw3.a

   [100%] Linking CXX executable app1

#+END_SRC

 _Running_ 

#+BEGIN_SRC sh 
  $ _build/app1 
 #+END_SRC

#+CAPTION: Graphics Output
[[file:images/opengl_glut_teapot1.png][file:images/opengl_glut_teapot1.png]]
*** CPM.cmake module [best]                           :cmake:best:dependency:

The CMake module CPM.cmake is a wrapper around CMake's FetchContent
which simplifies downloading libraries and dependencies
sub-projects. It can download libraries from GIT repositories, HTTP
servers and FTP servers. The downside of this dependency management
that it is only suitable for ligthweight libraries. 

This dependency approach is suitable not for large libraries or
frameworks with significant compile time, such as Boost libraries, QT
Framework or Poco libraries, as a downloaded library will have to be
recompiled for every new project. For this case, the best solution is
to use a package manage such as Conan or Vcpkg which can reuse binary
artifacts across many projects.

Official Repository: 
  + https://github.com/TheLartians/CPM.cmake

Examples: 
  + https://github.com/TheLartians/CPM.cmake/wiki/More-Snippets

 
  *Sample Project* 

In this sample project, the CMakeLists.txt automatically downloads and
installs CPM.cmake in the current project binary directory
${CMAKE_BINARY_DIR}. The module CPM.cmake provide the function
'CPMAddPackage' which is used for fetching the librares _spdlog_ and
_cppcodec_ from HTTP server and GIT repository. 

Gist: 
  + [[https://gist.github.com/caiorss/76b8540d8a358ab0c740709962e1e511][GIST 76b8540d8a358ab0c740709962e1e511]]

File: CMakeLists.txt 

#+BEGIN_SRC sh 
  cmake_minimum_required(VERSION 3.9)
  project(Simple_Cmake_Project)

  #========== Global Configurations =============#
  #----------------------------------------------#

  set(CMAKE_CXX_STANDARD 17)     
  set(CMAKE_VERBOSE_MAKEFILE ON)
  set(CMAKE_CXX_EXTENSIONS OFF)

  # ------------ Download CPM CMake Script ----------------#

  ## Automatically donwload and use module CPM.cmake
  file(DOWNLOAD https://raw.githubusercontent.com/TheLartians/CPM.cmake/v0.26.2/cmake/CPM.cmake
                   "${CMAKE_BINARY_DIR}/CPM.cmake")
  include("${CMAKE_BINARY_DIR}/CPM.cmake")

  #----------- Add dependencies --------------------------#

  CPMAddPackage(
      NAME spdlog
      URL  "https://github.com/gabime/spdlog/archive/v1.3.1.zip"

      # -->> Only enable this, if the library does not use CMake.
      #      The library uses only Makefile, GNU autotools and so on.  
      #      In other words, does not have a CMakeLists.txt at root directory.
      # DOWNLOAD_ONLY YES
  )

  CPMAddPackage(
      NAME               cppcodec 
      GITHUB_REPOSITORY  tplgy/cppcodec 
      GIT_TAG            v0.2
      #VERSION            0.2 

      OPTIONS 
          "BUILD_TESTING OFF"
  )
  include_directories( ${cppcodec_SOURCE_DIR}/ )

  message([TRACE] " spdlog source = ${spdlog_SOURCE_DIR} ")
  message([TRACE] " cppcodec source = ${cppcodec_SOURCE_DIR} ")

  #----------- Set targets -------------------------------#

  add_executable(app1 app1.cpp)
  target_link_libraries(app1 cppcodec spdlog::spdlog)
#+END_SRC


File: app1.cpp 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <spdlog/spdlog.h>

  #include <cppcodec/base32_crockford.hpp>
  #include <cppcodec/base64_rfc4648.hpp>


  int main(int argc, char** argv)
  {
      SPDLOG_TRACE("Entering function");

      spdlog::info("Starting server OK.");

      spdlog::info("Received request from 192.168.10.1 at port 9090");
      spdlog::info("Sending response to client 192.168.100.1 connection ID 10");

      using base32 = cppcodec::base32_crockford;
      using base64 = cppcodec::base64_rfc4648;

      std::string secret = "SGVsbG8gd29ybGQgQ01ha2UgQ1BNIHdpdGggYmFzZTY0IGVuY29uZGluZy4=";
    
      std::vector<uint8_t> decoded = base64::decode(secret);
      std::string text(decoded.begin(), decoded.end());
    
      std::cout << " =>> Decoded text = " << text << std::endl; 

      SPDLOG_TRACE("Exit application");

      return 0;
  }
#+END_SRC

Building: 

#+BEGIN_SRC sh 
  # Download code 
   $ git clone https://gist.github.com/caiorss/76b8540d8a358ab0c740709962e1e511 demo-cpm 
   $ cd demo-cpm

  # [1] Configuration step 
   $ cmake -H. -B_build -DCMAKE_BUILD_TYPE=Debug
  -- The C compiler identification is GNU 10.1.1
  -- The CXX compiler identification is GNU 10.1.1
  -- Check for working C compiler: /usr/bin/cc
    ... ....  ... ....  ... .... 
   ... ....  ... ....  ... .... 
  -- CPM: adding package spdlog@ ()
  -- Build type: Debug
  -- CPM: adding package cppcodec@0.2 (v0.2)
  [TRACE] spdlog source = /home/myuser/temp-projects/cmake-cpm/_build/_deps/spdlog-src 
  [TRACE] cppcodec source = /home/myuser/temp-projects/cmake-cpm/_build/_deps/cppcodec-src 
  -- Found PkgConfig: /usr/bin/pkg-config (found version "1.6.3") 
  -- Checking for module 'catch2'
  --   Package 'catch2', required by 'virtual:world', not found
  -- Did NOT find system Catch2, instead using bundled version
  -- Configuring done
  -- Generating done
  -- Build files have been written to: /home/myuser/temp-projects/cmake-cpm/_build

  # [2] Building step 
  $ cmake --build _build --target
#+END_SRC

Running: 

#+BEGIN_SRC sh 
   $ _build/app1 
  [2020-06-01 02:34:11.610] [info] Starting server OK.
  [2020-06-01 02:34:11.610] [info] Received request from 192.168.10.1 at port 9090
  [2020-06-01 02:34:11.610] [info] Sending response to client 192.168.100.1 connection ID 10
   =>> Decoded text = Hello world CMake CPM with base64 enconding
#+END_SRC
** Build a project from command line - detailed 

A project using Cmake as building system contains a build script at
top level directory named CMakeLists.txt. To build a project with
CMake, it is necessary to consider that CMake, is not a building
system and does not build anything. Actually, Cmake generates building
scripts for the platform preferred building scripts. For instance, on
Linux, it can generate Makefile, Eclipse Makefiles; on Windows it can
generate MSBuild scripts, NMake (Windows SDK's make) and so on.

 + Check all possible building system for which CMake can generate
   build scripts.
   + Command: $ *cmake -G*

#+BEGIN_SRC sh 
   # Running on Windows 10 
   $ cmake -G
   CMake Error: No generator specified for -G

   Generators
     Visual Studio 15 2017 [arch] = Generates Visual Studio 2017 project files.
                                    Optional [arch] can be "Win64" or "ARM".
     Visual Studio 14 2015 [arch] = Generates Visual Studio 2015 project files.
                                    Optional [arch] can be "Win64" or "ARM".
     Visual Studio 12 2013 [arch] = Generates Visual Studio 2013 project files.
                                    Optional [arch] can be "Win64" or "ARM".
     Visual Studio 11 2012 [arch] = Generates Visual Studio 2012 project files.
                                    Optional [arch] can be "Win64" or "ARM".
     Visual Studio 10 2010 [arch] = Generates Visual Studio 2010 project files.
                                    Optional [arch] can be "Win64" or "IA64".
     Visual Studio 9 2008 [arch]  = Generates Visual Studio 2008 project files.
                                    Optional [arch] can be "Win64" or "IA64".
     Borland Makefiles            = Generates Borland makefiles.
     NMake Makefiles              = Generates NMake makefiles.
     NMake Makefiles JOM          = Generates JOM makefiles.
     Green Hills MULTI            = Generates Green Hills MULTI files
                                    (experimental, work-in-progress).
     MSYS Makefiles               = Generates MSYS makefiles.
     MinGW Makefiles              = Generates a make file for use with
                                    mingw32-make.
     Unix Makefiles               = Generates standard UNIX makefiles.
     Ninja                        = Generates build.ninja files.
     Watcom WMake                 = Generates Watcom WMake makefiles.
     CodeBlocks - MinGW Makefiles = Generates CodeBlocks project files.
     CodeBlocks - NMake Makefiles = Generates CodeBlocks project files.
     CodeBlocks - NMake Makefiles JOM
                                  = Generates CodeBlocks project files.
     CodeBlocks - Ninja           = Generates CodeBlocks project files.
     CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.
     CodeLite - MinGW Makefiles   = Generates CodeLite project files.
     CodeLite - NMake Makefiles   = Generates CodeLite project files.
     CodeLite - Ninja             = Generates CodeLite project files.
     CodeLite - Unix Makefiles    = Generates CodeLite project files.
     Sublime Text 2 - MinGW Makefiles
                                  = Generates Sublime Text 2 project files.
     Sublime Text 2 - NMake Makefiles
                                  = Generates Sublime Text 2 project files.
     Sublime Text 2 - Ninja       = Generates Sublime Text 2 project files.
     Sublime Text 2 - Unix Makefiles
                                  = Generates Sublime Text 2 project files.
     Kate - MinGW Makefiles       = Generates Kate project files.
     Kate - NMake Makefiles       = Generates Kate project files.
     Kate - Ninja                 = Generates Kate project files.
     Kate - Unix Makefiles        = Generates Kate project files.
     Eclipse CDT4 - NMake Makefiles
                                  = Generates Eclipse CDT 4.0 project files.
     Eclipse CDT4 - MinGW Makefiles
                                  = Generates Eclipse CDT 4.0 project files.
     Eclipse CDT4 - Ninja         = Generates Eclipse CDT 4.0 project files.
     Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files.
#+END_SRC

 *STEP 1: Generate Building Script*

Project directory listing:

#+BEGIN_SRC sh 
  $ tree .
  .
  ├── build.bat
  ├── client1.cpp
  ├── CMakeLists.txt
  ├── Makefile
  ├── pywrapper.py
  ├── testlib.cpp
  └── testlib.hpp
#+END_SRC

 *Generate building scripts for platform-preferred building system:*

 + $ cmake -H<SOURCE> -B<BUILD>
   + <SOURCE> => Source directory where all *.cpp, *.hpp code. In this
     case it is (.) dot, current directory. If the directory was
     ./src, the command would be -Hsrc or -H./src
   + <BUILD> => Compilation output, directory where are all building
     scripts. 

Command output on Windows 10 - MSVC 2017. Note: It will set VC++ for
32 bits target, not 64 bits.

#+BEGIN_SRC sh 
  $ cmake -H. -Bbuild
  -- Building for: Visual Studio 15 2017
  -- The C compiler identification is MSVC 19.16.27025.1
  -- The CXX compiler identification is MSVC 19.16.27025.1  
  ... ...   ... ...   ... ...   ... ...   ... ... 
  -- Configuring done
  -- Generating done
  -- Build files have been written to: C:/Users/archbox/Desktop/experiments/dll/build
#+END_SRC

Command output on Linux: 

#+BEGIN_SRC sh 
  $ cmake -H. -Bbuild
  -- The C compiler identification is GNU 8.2.1
  -- The CXX compiler identification is GNU 8.2.1
  -- Check for working C compiler: /usr/lib64/ccache/cc
  -- Check for working C compiler: /usr/lib64/ccache/cc -- works
  ... ...   ... ...   ... ...   ... ...   ... ... 
   [INFO] Libtest location is at: libtest_location-NOTFOUND
  -- Configuring done
  -- Generating done
  -- Build files have been written to: /home/archbox/root-scripts/gist/build

  # List ./build directory 
  $ tree -L 1 build
  build
  ├── CMakeCache.txt
  ├── CMakeFiles
  ├── cmake_install.cmake
  └── Makefile

  1 directory, 3 files
#+END_SRC

  *Generate building script for specific building system:*

 + $ cmake -H<SOURCE> -B<BUILD> -G <BUILD-SYSTEM>
   + <SOURCE> => Source directory where all *.cpp, *.hpp code. In this
     case it is (.) dot, current directory. If the directory was
     ./src, the command would be -Hsrc or -H./src
   + <BUILD> => Compilation output, directory where are all building
     scripts.
   + <BUILD-SYSTEM> => All available build system can be listed with $ cmake -G.

#+BEGIN_SRC sh 
 # Generate MSbuild building scripts for 32 bits target 
  $ cmake -H. -Bbuild -G "Visual Studio 15 2017"

  # Generate MSbuild building scripts for 64 bits target 
  $ cmake -H. -Bbuild -G "Visual Studio 15 2017 Win64"
#+END_SRC

 *Generate building script with debug symbols enabled:*

It automatically adds the debugging flags (/Zi) for VC++ Microsoft
Visual C++ Compiler which necessary for debugging a program with GDB,
LLDB or WinDBG. 

 + Add the flag *-DCMAKE_BUILD_TYPE=DEBUG*

#+BEGIN_SRC sh 
  # Example 1:
  $ cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=DEBUG

  # Example 2:
  $ cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=RELEASE

  # Example 3: 
  cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=DEBUG -G "Visual Studio 15 2017 Win64"

  # Example 4: 
  cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=DEBUG -G "Visual Studio 15 2017 Win64"

  # Example 5: 
  cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=RELEASE -G "Visual Studio 15 2017 Win64"
#+END_SRC


 *STEP 2: Compile the project invoking the generated building scripts*

Invoke the building scripts indirectly using CMake:

 + $ cmake --build <BUILD>
   + <BUILD> Is the build directory generated at step 1. 

#+BEGIN_SRC sh 
  $ cmake --build build
  # OR
  $ cmake --build build --config Debug 
  # OR
  $ cmake --build build --config Release
#+END_SRC

Invoke the building script directly, call the building tool:
 + This building method depends on the current building system.

For MSBuild, the compilation becomes:

#+BEGIN_SRC sh
  $ MSBuild build\testlib.vcxproj

  Microsoft (R) Build Engine version 15.5.180.51428 for .NET Framework
  Copyright (C) Microsoft Corporation. All rights reserved.

  Build started 12/21/2018 12:49:38 PM.
  Project "C:\Users\archbox\Desktop\experiments\dll\build\testlib.vcxproj" on node 1 (default targets).
  Project "C:\Users\archbox\Desktop\experiments\dll\build\testlib.vcxproj" (1) is building "C:\Users\archbox\ Desktop\experiments\dll\build\ZERO_CHECK.vcxproj" (2) on node 1 (default targets).
  ... ... ... ... ... ... ... ... ... ... ... ... ... ... 
  testlib.vcxproj -> C:\Users\archbox\Desktop\experiments\dll\build\Debug\testlib.dll
  FinalizeBuildStatus:
    Deleting file "testlib.dir\Debug\testlib.tlog\unsuccessfulbuild".
    Touching "testlib.dir\Debug\testlib.tlog\testlib.lastbuildstate".
  Done Building Project "C:\Users\archbox\Desktop\experiments\dll\build\testlib.vcxproj" (default targets).
#+END_SRC

For Linux or Unix GNU-Make, the compilation becomes:

#+BEGIN_SRC sh 
   $ cd build

   $ make
   /usr/bin/cmake -H/home/archbox/root-scripts/gist -B/home/archbox/root-scripts/gist/build --check-build-system CMakeFiles/Makefile.cmake 0
   /usr/bin/cmake -E cmake_progress_start /home/archbox/root-scripts/gist/build/CMakeFiles /home/archbox/root-scripts/gist/build/CMakeFiles/progress.marks
   make -f CMakeFiles/Makefile2 all
   make[1]: Entering directory '/home/archbox/root-scripts/gist/build'
   make -f CMakeFiles/testlib.dir/build.make CMakeFiles/testlib.dir/depend
   make[2]: Entering directory '/home/archbox/root-scripts/gist/build'
   ... ... ... ... ... ... ... ... ... ... ... ... 
   [100%] Built target client1-executable
   make[1]: Leaving directory '/home/archbox/root-scripts/gist/build'
   /usr/bin/cmake -E cmake_progress_start /home/archbox/root-scripts/gist/build/CMakeFiles 0  


  # Built executables: 
  #--------------------------------
  $ file libtestlib.so 
  libtestlib.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically 
  linked, BuildID[sha1]=ce79ed7580a16cbc27bf113a2967eb1d66f496a3, not stripped

  $ file client1-executable.bin 
  client1-executable.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, 
  for GNU/Linux 3.2.0, BuildID[sha1]=8103d822a6d58497b63346dfcc1f7375599114f7, not stripped
#+END_SRC

Or just in a single step: 

#+BEGIN_SRC sh 
  $ cd build && make && cd ..
#+END_SRC

** Show system information 

#+BEGIN_SRC sh  
  cmake --sytem-information 
#+END_SRC 

Output on Linux: 

#+BEGIN_SRC sh 
   Avoid ctest truncation of output: CTEST_FULL_OUTPUT
   ========================================================
   === MAIN VARIABLES
   ========================================================
   CMAKE_STATIC_LIBRARY_PREFIX == "lib"
   CMAKE_STATIC_LIBRARY_SUFFIX == ".a"
   CMAKE_SHARED_LIBRARY_PREFIX == "lib"
   CMAKE_SHARED_LIBRARY_SUFFIX == ".so"
   CMAKE_SHARED_MODULE_PREFIX == "lib"
   CMAKE_SHARED_MODULE_SUFFIX == ".so"


   CMAKE_DL_LIBS == "dl"
   CMAKE_LIBRARY_PATH_FLAG == "-L"
   CMAKE_LINK_LIBRARY_FLAG == "-l"
   CMAKE_SKIP_RPATH == "NO"
   CMAKE_SYSTEM_INFO_FILE == "Platform/Linux"
   CMAKE_SYSTEM_NAME == "Linux"
   CMAKE_SYSTEM == "Linux-4.18.18-200.fc28.x86_64"
   CMAKE_CXX_COMPILER == "/usr/lib64/ccache/c++"
   CMAKE_C_COMPILER == "/usr/lib64/ccache/cc"
   CMAKE_COMPILER_IS_GNUCC == "1"
   CMAKE_COMPILER_IS_GNUCXX == "1"

   // C shared library flag
   CMAKE_SHARED_LIBRARY_C_FLAGS == "-fPIC"
   CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS == "-shared"
   CMAKE_SHARED_LIBRARY_LINK_FLAGS == ""
   ... ...    ... ...    ... ...    ... ...    ... ... 
#+END_SRC

** Show all modules 

#+BEGIN_SRC sh 
  $ cmake --help-module-list
#+END_SRC

Output: 

#+BEGIN_SRC text 
  AddFileDependencies
  AndroidTestUtilities
  BundleUtilities
  CMakeAddFortranSubdirectory
  CMakeBackwardCompatibilityCXX
  CMakeDependentOption
  CMakeDetermineVSServicePack
  CMakeExpandImportedTargets
  CMakeFindDependencyMacro
  CMakeFindFrameworks
  CMakeFindPackageMode
  CMakeForceCompiler
  CMakeGraphVizOptions

  ... ... ... ... ... ... 

  FindLAPACK
  FindLATEX
  FindLTTngUST
  FindLibArchive
  FindLibLZMA
  FindLibXml2
  FindLibXslt
  FindLua
  FindLua50
  FindLua51
  FindMFC
  FindMPEG
  FindMPEG2
  FindMPI
  FindMatlab
  FindMotif
  FindOpenACC

  ... ... ... ... ... ... ... ... 

#+END_SRC

** Microsft Windows OS Specific Snippets
*** Executable Target with resource icon

This section provides an example about how to add a resource icon to a
Windows executable target.

Files:

| Project Item    | Description                            |   |
|-----------------+----------------------------------------+---|
| Application     | ProgramWithICON.exe                    |   |
| Sources:        | src/main.cpp src/src1.cpp src/src2.cpp |   |
| Icon            | src/programImage.ico                   |   |
| Resource script | src/icon.rc                            |   |
|-----------------+----------------------------------------+---|

Resource file: src/icon.rc 

#+BEGIN_SRC cpp
  // Icon Resource => Compiled by Resource compiler
  id ICON "programImage.ico"
#+END_SRC

CMakeLists.txt 

#+BEGIN_SRC cmake 
   # .... Omit beginning and global configuration .... #
    add_executable(ProgramWithICON src/main.cpp src/src1.cpp src/src2.cpp)
   if(WIN32)
      target_sources(ProgramWithICON src/icon.rc)
   endif()
 
   target_include_directories(ProgramWithICON  ./includes)
  # .... Omit additional configuration ... #
#+END_SRC
*** Build executable for console or window subsystem 

The following CMakeLists.txt file defines two executables targets
built with the same source file main.cpp. The target
_app_console_subsystem.exe_ is compiled for the Windows' *console subsystem* and 
the target _app_window_subsystem.exe_ for the *window subsystem*. 

Applications compiled for the console subsystem opens a terminal when
clicked and prints the std::cout and std::cerr output to it while
applications built for the window subsystem do not open any terminal
and do not print any std::cout or std::cerr output. 

An window-subsystem application can perform logging by using the
Windows API function [[https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-outputdebugstringw][OutputDebugString]], writing to a file or
redirecting the std::cout and std::cerr streams to file stream
object such as std::ofstream. 

File: CMakeLists.txt 

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 2.8)
  project(cppwindows)

  #=======================================

  # Copy target file to current directory whenerver it is rebuilt
  function(copy_after_build TARGET_NAME )
      # Note: CMAKE_CURRENT_LIST_DIR is the directory where is this
      # CMakeLists.txt file.
      set(DESTDIR ${CMAKE_CURRENT_LIST_DIR}/bin/)
      file(MAKE_DIRECTORY ${DESTDIR})

      # Copy binary file to <CMakeLists.txt didctory>./bin
      # after target is compiled.
      add_custom_command(TARGET ${TARGET_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
                                 $<TARGET_FILE:${TARGET_NAME}> ${DESTDIR}
                                 )
  endfunction()

  #----------------------------------------

  # Build the executable: app_console_subsystem.exe which opens a
  # terminal when clicked
  add_executable(app_console_subsystem main.cpp)
  copy_after_build(app_console_subsystem)

  # Builds the executable: app_window_subsystem.exe
  # which does not open a terminal when clicked, it only shows
  # a message box
  add_executable(app_window_subsystem WIN32 main.cpp)
  copy_after_build(app_window_subsystem)
#+END_SRC

File: main.cpp 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <windows.h>

  int main()
  {
      std::cout << "Hello World Windows Console and Window subsystem!" << std::endl;
      OutputDebugStringA("Output of applications built for Window Subsystem");

      // Show messagebox window
      DWORD const infoboxOptions  = MB_OK | MB_ICONINFORMATION | MB_SETFOREGROUND;
      MessageBoxA( nullptr, "Messagebox text", "MessageBox title", infoboxOptions);

      std::cout << "Exit application " << std::endl;
      OutputDebugStringA("Exit application");

      std::cin.get();
      std::cout << " => Enter RETURN to exit" << std::endl;
      return 0;
  }
#+END_SRC

#+CAPTION: Application app_console_subsystem.exe (Console subsystem)
[[file:images/cmake_console_subsystem1.png][file:images/cmake_console_subsystem1.png]]

#+CAPTION: Application app_window_subsystem.exe (Window subsystem)
[[file:images/cmake_window_subsystem1.png][file:images/cmake_window_subsystem1.png]]

*** Set target subsystem: console/window

Set target subsystem. 

#+BEGIN_SRC cmake 
  if(WIN32)
     set_target_properties(WindowApplicationExample PROPERTIES LINK_FLAGS_DEBUG "/SUBSYSTEM:CONSOLE")
     set_target_properties(WindowApplicationExample PROPERTIES COMPILE_DEFINITIONS_DEBUG "_CONSOLE")
     set_target_properties(WindowApplicationExample PROPERTIES LINK_FLAGS_RELWITHDEBINFO "/SUBSYSTEM:CONSOLE")
     set_target_properties(WindowApplicationExample PROPERTIES COMPILE_DEFINITIONS_RELWITHDEBINFO "_CONSOLE")
     set_target_properties(WindowApplicationExample PROPERTIES LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS")
     set_target_properties(WindowApplicationExample PROPERTIES LINK_FLAGS_MINSIZEREL "/SUBSYSTEM:WINDOWS")
  endif(WIN32)
#+END_SRC

Taken from: 
 + [[https://gitlab.kitware.com/cmake/community/wikis/doc/cmake/recipe/VSConfigSpecificSettings][Vsconfigspecificsettings · Wiki · CMake / Community · GitLab]]
 + [[https://developercommunity.visualstudio.com/content/problem/46678/cmake-set-subsystem-to-console.html][cmake: Set subsystem to console - Developer Community]]
 + [[https://stackoverflow.com/questions/33873735/correctly-set-visual-studio-linker-flag-subsystem-in-cmake][c++ -
   Correctly set Visual Studio linker flag /SUBSYSTEM in CMAKE - Stack
   Overflow]]
*** Export all shared library symbols 

CMake has a handy option _CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS_ that can
export all DLL shared library symbols without any
~__declspec(dllexport)~ or ~__declspec(dllimport)~ annotation.

 *Example:* 

File: main.cpp (executable main.exe)

#+BEGIN_SRC cmake 
   cmake_minimum_required(VERSION 3.5)
   project(testbed_project)

   #=========== Global Settings ==============================#
   # ... omit other settings ... 
 
   # Export ALL DLLs symbols on Windows without __declspec(xxxx) annotations.
   set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS true)

   #=============== Targets-specific settings ====================#

   # Target: libutil (Library)
   add_library(utils SHARED utils.cpp utils.hpp)

   # Target: app1 => Executable (Dynamically linked)
   add_executable(main main1.cpp)
   target_link_libraries(main utils)
#+END_SRC

File: utils.hpp (Shared library utils.dll)

#+BEGIN_SRC cpp 
   #ifndef _UTILS_HPP_
   #define _UTILS_HPP_

   #include <string>

   namespace  utils {

        class Dummy{
        private:
             std::string m_name = "<Untitled>";
        public:
            Dummy();
            Dummy(std::string const& name);
            void  showName() const;
        };
   }
   #endif 
#+END_SRC

File: utils.cpp (Shared library utils.dll)

#+BEGIN_SRC cpp 
   #include <iostream> 
   #include "utils.hpp"

   namespace utils{
         Dummy::Dummy() { }
         Dummy::Dummy(std::string const& name): m_name(name) { }

         void Dummy::showName() const
         {
             std::cout << " [TRACE] Object name is : " << m_name << "\n";
         }
   }
#+END_SRC

Without the CMake option _CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS_, the class
Dummy would need the __declspec annotation and the code would be: 

#+BEGIN_SRC cpp 
     class __declspec(dllexport) Dummy{
     private:
          std::string m_name = "<Untitled>";
     public:
         Dummy();
         Dummy(std::string const& name);
         void  showName() const;
     };
#+END_SRC

To make a symbol private (visible only the _utils.cpp_ compilation-unit)
annotate it with the _static_ keyword or place the symbols in a
_anonymous namespace_, example:

#+BEGIN_SRC cpp 
   static void internal_function(int) {
     // ... code here ... 
   }

   static class InternalClass {
     // ... code here ... 
   }

   static struct MyStruct{
      double x; 
      double y;
   }; 

  // ---- OR make the symbols private with anonymous namespace  ------// 

  namespace {

     void internal_function(int) {
       // ... code here ... 
     }

     class InternalClass {
       // ... code here ... 
     }

     static struct MyStruct{
        double x; 
        double y;
     }; 

  }

#+END_SRC
** Snippets 
*** Place build-tree object-code in source directory 

The following sample project shows how to place build-tree
object-codes (executables and libraries) in the source directory
(project directory) for making easier to find them wihout browsing the
build tree. 

The sample project is comprised of two executables app1 and app2
linked against a shared library libutils. 

 *Sample Project* 

File: CMakeLists.txt

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 3.5)
  project(testbed_project)

  #=========== Global Settings =================#

  set(CMAKE_VERBOSE_MAKEFILE ON)
  set(CMAKE_CXX_STANDARD 17)
  set(CMAKE_CXX_STANDARD_REQUIRED ON) 

  #  => Place executable(s) in ${SOURCE DIRECTORY}/out/bin 
  #  => Place libraries in ${SOURCE DIRECTORY}/out/lib 
  #
  #  => Note: ${SOURCE DIRECTORY} is the directory where is this CMakeLists.txt 
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/out/lib)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/out/lib)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/out/bin)

  # Set relative rpath to shared library in executable object code
  # See:
  #  => https://cmake.org/cmake/help/latest/prop_tgt/BUILD_RPATH_USE_ORIGIN.html
  #  => https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/RPATH-handling
  if(UNIX)
    SET(CMAKE_INSTALL_RPATH "$ORIGIN/../lib:$ORIGIN/")
  endif()

  # Export ALL DLLs symbols on Windows without __declspec(xxxx) annotations.
  set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS true)

  #=============== Targets-specific settings ====================#

  # Target: libutil (Library)
  add_library(utils SHARED utils.cpp utils.hpp)
  add_library(utils_static STATIC utils.cpp utils.hpp)

  # Target: app1 => Executable (Dynamically linked)
  add_executable(app1 main1.cpp)
  target_link_libraries(app1 utils)

  # Target: app2 => Executable (Dynamically linked)
  add_executable(app2 main2.cpp)
  target_link_libraries(app2 utils)

  # Target: app1_static => Executable (static linked)
  add_executable(app1_static main1.cpp)
  target_link_libraries(app1_static utils_static)

  # Target: app1_static => Executable (static linked)
  add_executable(app2_static main1.cpp)
  target_link_libraries(app2_static utils_static)


  #============== Target: Install ===============================#
  # Equivalent to: $ make install 

  install(TARGETS app1 app2 app1_static app2_static utils utils_static  
    RUNTIME  DESTINATION bin # Executable: *.exe, 
    LIBRARY  DESTINATION lib # Shared libraries: *.dll, *.so and so on 
    ARCHIVE  DESTINATION lib # Static libraries: *.a 
  )

  install(FILES README.txt DESTINATION ./)

#+END_SRC

File: README.txt 

#+BEGIN_SRC text 
  ======= Application User Guide ==========

    + app1 => Application for creating PCB - Printed Circuit Board
    + app2 => App. for communicating with remote link

    <INSERT TEXT HERE ....>  
#+END_SRC

File: utils.hpp (CMake targets: utils and utils_static)

#+BEGIN_SRC cpp 
  #ifndef _UTILS_HPP_
  #define _UTILS_HPP_

  #include <string>

  namespace  utils {

       class Dummy{
       private:
            std::string m_name = "<Untitled>";
       public:
            Dummy();
            Dummy(std::string const& name);
            void  showName() const;
       };
  }

  #endif 
#+END_SRC

File: utils.hpp (CMake targets: utils and utils_static)

#+BEGIN_SRC cpp 
   #include <iostream> 

   #include "utils.hpp"

   namespace utils{

        Dummy::Dummy() { }
        Dummy::Dummy(std::string const& name): m_name(name) { }

        void Dummy::showName() const
        {
            std::cout << " [TRACE] Object name is : " << m_name << "\n";
        }

   }
#+END_SRC

File: main1.cpp (CMake targets: app1 and app1_static )

#+BEGIN_SRC cpp
  #include <iostream>
  #include "utils.hpp"

  using utils::Dummy;

  int main()
  {
      std::puts(" [TRACE] I am the application 1. Ok.");
      Dummy dummy1("I_am_dummy_object_A");
      dummy1.showName();

      return 0;
  }
#+END_SRC

File: main2.cpp (CMake targets: app2 and app2_static )

#+BEGIN_SRC cpp 
  #include <iostream>
  #include "utils.hpp"

  int main()
  {
      std::puts(" [TRACE] I am the application 2. Ok.");
      utils::Dummy dummy2("I_am_dummy_object_B");
      dummy2.showName();

      return 0;
  }
#+END_SRC

 *Build and running on Linux* 

Configure and build: 

#+BEGIN_SRC sh
  #  + (-B/tmp/_build2) => Place build tree at /tmp/_build2
  #  + Install binaries (object-code) at ~/Desktop/appinstall
  $ cmake -H. -B/tmp/_build2 -DCMAKE_INSTALL_PREFIX=~/Desktop/appinstall
  $ cmake --build /tmp/build2 --target 
#+END_SRC

Check binaries in the source directory (project directory):

#+BEGIN_SRC sh
   # List source/project directory 
   $ ls .
   out/  CMakeLists.txt  main1.cpp  main2.cpp  README.txt  utils.cpp  utils.hpp

   
   $ tree .
   .
   ├── CMakeLists.txt
   ├── main1.cpp
   ├── main2.cpp
   ├── out
   │   ├── bin
   │   │   ├── app1
   │   │   ├── app1_static
   │   │   ├── app2
   │   │   └── app2_static
   │   └── lib
   │       ├── libutils.so
   │       └── libutils_static.a
   ├── README.txt
   ├── utils.cpp
   └── utils.hpp

   3 directories, 12 files
#+END_SRC

Test executables: 

#+BEGIN_SRC sh 
  $ out/bin/app1
   [TRACE] I am the application 1. Ok.
   [TRACE] Object name is : I_am_dummy_object_A

  $ out/bin/app2
   [TRACE] I am the application 2. Ok.
   [TRACE] Object name is : I_am_dummy_object_B

  $ out/bin/app1_static 
   [TRACE] I am the application 1. Ok.
   [TRACE] Object name is : I_am_dummy_object_A

  $ out/bin/app2_static 
   [TRACE] I am the application 1. Ok.
   [TRACE] Object name is : I_am_dummy_object_A


  # Check app1 dependencies 
  $ ldd out/bin/app1
          linux-vdso.so.1 (0x00007ffff7ffa000)
          libutils.so => /home/archbox/shared/demo-cmake-proj2/out/lib/libutils.so (0x00007ffff7bd0000)
          libstdc++.so.6 => /lib64/libstdc++.so.6 (0x00007ffff783e000)
          libm.so.6 => /lib64/libm.so.6 (0x00007ffff74aa000)
          libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007ffff7292000)
          libc.so.6 => /lib64/libc.so.6 (0x00007ffff6ed4000)
          /lib64/ld-linux-x86-64.so.2 (0x00007ffff7dd6000)

  # Check app1_static dependencies 
  $ ldd out/bin/app2_static 
          linux-vdso.so.1 (0x00007ffff7ffa000)
          libstdc++.so.6 => /lib64/libstdc++.so.6 (0x00007ffff7a44000)
          libm.so.6 => /lib64/libm.so.6 (0x00007ffff76b0000)
          libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007ffff7498000)
          libc.so.6 => /lib64/libc.so.6 (0x00007ffff70da000)
          /lib64/ld-linux-x86-64.so.2 (0x00007ffff7dd6000)
#+END_SRC

Build and install (execute CMake's intall target):

#+BEGIN_SRC sh 
  $ cmake --build /tmp/_build2/ --target install
#+END_SRC

Check intalled files: 

#+BEGIN_SRC sh 
  $ ls ~/Desktop/appinstall/
  bin/  lib/  README.txt

  $ tree ~/Desktop/appinstall/
  ├── bin
  │   ├── app1
  │   ├── app1_static
  │   ├── app2
  │   └── app2_static
  ├── lib
  │   ├── libutils.so
  │   └── libutils_static.a
  └── README.txt

  $ ~/Desktop/appinstall/bin/app1
   [TRACE] I am the application 1. Ok.
   [TRACE] Object name is : I_am_dummy_object_A

  $ ~/Desktop/appinstall/bin/app2
   [TRACE] I am the application 2. Ok.
   [TRACE] Object name is : I_am_dummy_object_B

  $ ~/Desktop/appinstall/bin/app1_static 
   [TRACE] I am the application 1. Ok.
   [TRACE] Object name is : I_am_dummy_object_A
#+END_SRC

Check dependencies of app1:

#+BEGIN_SRC sh 
  $ ldd ~/Desktop/appinstall/bin/app1
          linux-vdso.so.1 (0x00007ffff7ffa000)
          libutils.so => /home/archbox/Desktop/appinstall/bin/../lib/libutils.so (0x00007ffff7bd0000)
          libstdc++.so.6 => /lib64/libstdc++.so.6 (0x00007ffff783e000)
          libm.so.6 => /lib64/libm.so.6 (0x00007ffff74aa000)
          libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007ffff7292000)
          libc.so.6 => /lib64/libc.so.6 (0x00007ffff6ed4000)
          /lib64/ld-linux-x86-64.so.2 (0x00007ffff7dd6000)
#+END_SRC

 *Build and running on Windows 10 with MSVC 2017*  

#+BEGIN_SRC sh 
  $ cmake -H. -B..\_build_proj -G "Visual Studio 15 2017 Win64" -DCMAKE_INSTALL_RPEFIX=%USERPROFILE%\appinstall
  $ cmake --build ..\_build_proj --target 
#+END_SRC

List directory: 

#+BEGIN_SRC sh 
  λ ls
  CMakeLists.txt  README.txt  main1.cpp  main2.cpp  out/  utils.cpp  utils.hpp
#+END_SRC

List binaries in the source directory: 

#+BEGIN_SRC sh 
  λ ls out\bin\Debug\
  app1.exe*  app1.pdb          app1_static.ilk  app2.exe*  app2.pdb          app2_static.ilk  utils.dll*  utils.pdb
  app1.ilk   app1_static.exe*  app1_static.pdb  app2.ilk   app2_static.exe*  app2_static.pdb  utils.ilk
#+END_SRC

Test executables: 

#+BEGIN_SRC sh 
  λ out\bin\Debug\app1.exe
   [TRACE] I am the application 1. Ok.
   [TRACE] Object name is : I_am_dummy_object_A

  λ out\bin\Debug\app2.exe
   [TRACE] I am the application 2. Ok.
   [TRACE] Object name is : I_am_dummy_object_B

  λ out\bin\Debug\app1_static.exe
   [TRACE] I am the application 1. Ok.
   [TRACE] Object name is : I_am_dummy_object_A
#+END_SRC

Install: 

#+BEGIN_SRC sh 
  λ cmake --build ..\_build_proj --target install
#+END_SRC

Check installation: 

#+BEGIN_SRC sh 
  λ ls C:\\Users\archbox\appinstall\
  README.txt  bin/  lib/

  λ ls %USERPROFILE%\appinstall/bin
  app1.exe*  app1_static.exe*  app2.exe*  app2_static.exe*  utils.dll*

  λ ls %USERPROFILE%\appinstall/lib
  utils.lib  utils_static.lib

  λ type %USERPROFILE%\appinstall\README.txt
  ======= Application User Guide ==========

    + app1 => Application for creating PCB - Printed Circuit Board
    + app2 => App. for communicating with remote link

    <INSERT TEXT HERE ....>
#+END_SRC

*** Set common file extension for all executables

Unlike Windows, native executables files on Unix-like operating
systems don't have a file extension such as .exe which makes harder for
automation tools, such as Jenkins, distinguish them form other files. 

 + The following CMakeListst.txt builds two executables app1 and
   app2. The executable names on Windows are app1.exe and app2.exe. On
   Unix-like operating systems, their name become _app1.bin_ and
   _app2.bin_. Without the line with *CMAKE_EXECUTABLE_SUFFIX* their name
   on Unix-like operating systems would be _app1_ and _app2_.

File: CMakeLists.txt 

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 3.9)
  project(ProjectWithUnixExtension)

  #----------------------------------------------#

  set(CMAKE_CXX_STANDARD 17)     
  set(CMAKE_VERBOSE_MAKEFILE ON)
  set(CMAKE_CXX_EXTENSIONS OFF)

  # Add file extension .bin to all executable files on Unix (Linux, OSX, BSD, ...)
  if(UNIX)
    set(CMAKE_EXECUTABLE_SUFFIX ".bin")
  endif()

  #========== Targets Configurations ============#
  add_executable(app1  main1.cpp)
  add_executable(app2  main1.cpp src1.cpp src2.cpp src3.cpp)
#+END_SRC
*** Glob files from a directory or sub-directories

Globing allows adding files of a given cmake target without specifying
all of them explicitly. Although, it is not a good practice, it can be
useful for migrating projects using other building systems to CMake. 

Example: sample project that used GNU autotools or Makefiles. 

  + ./path/to/project <DIRECTORY>
    * CMakeLists.txt

    * main/   <DIR> =>> Executable Target: main -> ./main (Unix) or  main.exe (Windows)
      + main.cpp
      + class1.cpp
      + class1.hpp
      + class2.cpp
      + class2.hpp 

    * mylib  <DIR>  =>> Shared Library Target:  mylib1 libmylib1.so (Unix), libmylib1.dylib (OSX) or mylib1.dll (Windows)
      + class1A.cpp
      + class1A.hpp
      + class2A.cpp
      + class2A.hpp
      + .... ... ..
      + ./directory/ <DIR> 
        + file1A.cpp
        + file1A.hpp
        + file1A.cpp
        + file1A.hpp
        + ... ... ... 

File: CMakeLists.txt 

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 3.0)
  project(cmake-glob)

  set(CMAKE_CXX_STANDARD 17)
  set(CMAKE_VERBOSE_MAKEFILE ON)

    #----------------------------------------------#
    #    mylib  => Library target                  #
    #----------------------------------------------#

  # Assign all *.cpp files paths in the directory ./mylib 
  # to the variable 'mylib_sources'. It allso includes the 
  # subdirectories of ./mylib. 
  file(GLOB_RECURSE mylib_sources "mylib/*.cpp")
  file(GLOB_RECURSE mylib_headers "mylib/*.hpp")

  add_library(mylib SHARED ${lib_sources} ${lib_headers} )
  target_include_directories(mylib PUBLIC ./lib)

    #----------------------------------------------#
    #     main  => Executable target               #
    #----------------------------------------------#

  # --> Assign the path of all *.cpp files in the directory 
  #  ./main to the variable 'main_sources'
  #  note: it does not include subdirectories. 
  file(GLOB main_sources "main/*.cpp")
  file(GLOB main_headers "main/*.hpp")

         add_executable( main ${main_sources} ${main_headers})
  target_link_libraries( main mylib glut gl ... )
#+END_SRC

 *Highlights* 

  + The following lines sets the variable _main_sources_ to the
    following list of strings containing the file names:
    main/main.cpp, main/class1.cpp, main/class2.cpp and so on.

  + _GLOB_ scans all files in a directory with a given pattern, but does
    not scan in sub-directories. 

#+BEGIN_SRC cmake 
  file(GLOB main_sources "main/*.cpp")
#+END_SRC

  + The next lien sets the variable _mylib_headers_ to mylib a list of
    strings contains the file names: mylib/class1A.cpp
    mylib/class2A.cpp ... mylib/directory/file1A.cpp,
    mylib/directory/file2A.cpp and so on.

  + _GLOB_RECURSE_ scans all files in a directory and subdirectories
    with a given pattern. 

#+BEGIN_SRC cmake 
  file(GLOB_RECURSE mylib_sources "mylib/*.cpp") 
#+END_SRC

*** Copy some target binaries to a directory

This piece of code copies the target binaries (compiled code) to a
directory relative to project's root directory where is CMakeLists.txt 

Targets:

#+BEGIN_SRC cmake 
  # TARGET: testlib Shared library => Builds liblinalg.so on Unix or
  # linalg.dll on Windows.
  add_library(linalg SHARED  src/testlib.cpp)

  # TARGET: app Executable => Builds 'app' on Unix-like Oses and
  # unix.exe on Windows.
  add_executable(app src/main/main-app.cpp src/main/file1.cpp src/main/file2.cpp)
#+END_SRC

Copy target files to top level directory where is CMakeLists.txt 

#+BEGIN_SRC cmake
  # If not set the install directory, attemp set the install directory
  # CMAKE_INSTALL_PREFIX to the directory ./bin 
  if(NOT DEFINED CMAKE_INSTALL_PREFIX OR CMAKE_INSTALL_PREFIX MATCHES "")
    set(CMAKE_INSTALL_PREFIX  "./bin")
  endif()

  message(" [INFO] CMakeLists.txt is in the directory ${CMAKE_CURRENT_LIST_DIR}")

  # Copy targets to ./ - Directory where is this file CMakeLists.txt (project top level dir)
  install(TARGETS app linalg DESTINATION  ${CMAKE_CURRENT_LIST_DIR})
#+END_SRC

This target can be run with: 

 + STEP 1: Set CMake building system or the project type with -G.

#+BEGIN_SRC sh 
 $ cd project-directory 

 #===> Set build system 
 # -H<SOURCE> -B<COMPILATION-OUTPUT> -G <BUILDING-SYSTEM>
 $ cmake -H. -G "Unix Makefiles" -Bbuild 
#+END_SRC
 
 + STEP 2: Run targets 

#+BEGIN_SRC sh 
 #===> Run all targets [all default.]
 $ cmake --build build --target all 

 #===> Run target install and copy the binaries to ./bin 
 $ cmake --build build --target install 
#+END_SRC

*** Create target to run compiled executable 

The piece following piece of code runs an executable target after it
is built in a similar way to a command $ make run. 

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 3.9)

   ... ...  ... ...  ... ...

  # TARGET: myapplication 
  add_executable(myapplication src/main.cpp src/code1.cpp code2.cpp ...)

  # TARGET: run -> Runs the executable myapplication 
  # On Unix-like Oses, it runs  /<build-directory>/myapplication 
  # On Windows: it runs  <build-directory>/myapplication.exe 
  add_custom_target(run
      COMMAND myapplication
      DEPENDS myapplication
      WORKING_DIRECTORY ${CMAKE_PROJECT_DIR}
  )
#+END_SRC

After the building system is set and output directory ./build, run:

#+BEGIN_SRC sh 
   #===> Run all targets [all default.]
   $ cmake --build build --target run
#+END_SRC

*** Issue an error if condition is not met 

In this piece of code, if the compiler is not MSVC (vc++, aka cl.exe),
CMake stops the generation of the building script showing an error
message to the user.

#+BEGIN_SRC cmake 
  ... ... 

  if(MSVC)
     set_target_properties(WindowApp1 PROPERTIES LINK_FLAGS "/entry:mainCRTStartup")
  else() 
     message(FATAL_ERROR " [ERROR] Linker flags of target WindowApp1 not set for this compiler")
  endif()
  ... ... 
#+END_SRC
*** Copy a target file whenever it is recompiled

Example:  Copy a shared library to project root directory ./
whenever it is rebuilt. 

 + Set the shared library target. (libtestlib.so on Unix or testlib.dll
   on Windows)

#+BEGIN_SRC cmake 
  add_library( testlib  SHARED  ./testlib.cpp)
  set_target_properties(testlib PROPERTIES CXX_VISIBILITY_PRESET hidden)
#+END_SRC

 + Automatically copy to root directory the generated shared library
   binary to root directory on every recompilation of the target
   testlib. 

#+BEGIN_SRC cmake
  add_custom_command(TARGET testlib POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy 
    $<TARGET_FILE:testlib>                     # Source    
    ${CMAKE_CURRENT_SOURCE_DIR}/libtest.so     # Destination, file or directory 
    # OR: ${CMAKE_CURRENT_SOURCE_DIR}/         # Directory destination. 
  )
#+END_SRC

Test this post-build target: 

#+BEGIN_SRC sh 
  # Generate cache directory containing building scripts or project files 
  # specifics for some building systems
  $ cmake -H. -Bcache -G "CHOOSE SYSTEM>"

  # Run all targets  [Default]
  $ cmake --build cache --target
  $ cmake --build cache --target all 

  # Run target 'testlib'. 
  $ cmake --build cache --target testlib 
#+END_SRC

After the target is recompiled, the shared library is copied to the
current directory (project top-level directory ./).

References: 
 + https://stackoverflow.com/questions/31277186
 + https://stackoverflow.com/questions/15694347/

*** Cross compiling for Android 

See: 
  + https://developer.android.com/ndk/guides/cmake
  + http://www.ccp4.ac.uk/dist/checkout/cmake-3.1.3/Help/manual/cmake-toolchains.7.rst
  + https://itk.org/Wiki/ITK/Cross_Compiling
  + https://cristianadam.eu/20181202/a-better-qnx-cmake-toolchain-file/
  + https://stackoverflow.com/questions/12844772/how-to-cross-compile-cmake-for-arm-with-cmake
  + https://stackoverflow.com/questions/5098360/cmake-specifying-build-toolchain

File: application1.cpp 

#+BEGIN_SRC cpp 
  #include <iostream>

  int main(int argc, char** argv)
  {

    std::cout << " [INFO] Hello world from application1" << std::endl;
    ::system("whoami");

    return 0;
  }
#+END_SRC

File: CmakeLists.txt 

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 3.9)
  project(Simple_Cmake_Project)

  #========== Global Configurations =============#
  #----------------------------------------------#
  set(CMAKE_CXX_STANDARD 17)
  set(CMAKE_VERBOSE_MAKEFILE ON)

  #========== Targets Configurations ============#
  add_executable(app1 application1.cpp)
#+END_SRC

 *Building*:

STEP 1: Set CMake Configuration.

#+BEGIN_SRC sh 
   # Using Makefile (Linux)   
   $ cmake -H. -B_build -G Ninja -DCMAKE_BUILD_TYPE=Debug \
      -DCMAKE_TOOLCHAIN_FILE=$HOME/Android/Sdk/ndk-bundle/build/cmake/android.toolchain.cmake \
      -DANDROID_ABI=armeabi-v7a \
      -DANDROID_NATIVE_API_LEVEL=21

   # OR Using Ninja build generator 
   $ cmake -H. -B_build -G Ninja -DCMAKE_BUILD_TYPE=Debug \
     -DCMAKE_TOOLCHAIN_FILE=$HOME/Android/Sdk/ndk-bundle/build/cmake/android.toolchain.cmake \
     -DANDROID_ABI=armeabi-v7a \
     -DANDROID_NATIVE_API_LEVEL=21
#+END_SRC

STEP 2: Build 

#+BEGIN_SRC sh 
   $ cmake --build _build --target
   [4/4] Linking CXX executable app1

   # Check executable 
   $ file _build/app1
   _build/app1: ELF 32-bit LSB shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, 
   interpreter /system/, BuildID[sha1]=8d6b159e0e65604fe1f65bca5ad9eef36aa4ab26, with debug_info, not stripped

   # Attempt to run => Fails because the current machine (host) is Linux
   # x86_64 - 64 bits, not ARM 32 bits
   $ _build/app1
   bash: _build/app1: cannot execute binary file: Exec format error
#+END_SRC

STEP 3: Deploy with ADB - Android Debug Bridge 

#+BEGIN_SRC sh 
  $ adb push _build/app1 /data/local/tmp
  _build/app1: 1 file pushed. 18.6 MB/s (2848980 bytes in 0.146s)
#+END_SRC

STEP 4: Run application on Android.

  + Run in adb shell

#+BEGIN_SRC sh 
  $ adb shell

  on5xelte:/ $ /data/local/tmp/app1
   [INFO] Hello world from application1
  shell
#+END_SRC

  + Run with adb directly 

#+BEGIN_SRC sh 
  $ adb shell /data/local/tmp/app1
   [INFO] Hello world from application1
  shell
#+END_SRC
*** Detect Operating System 
**** Detect operating system with predefined variables  

 Check whether current OS is Microsft Windows NT:

 #+BEGIN_SRC cmake
   if(WIN32)
     # actions ... 
     message("Compiling for Windows NT")
   else()
     # else actions .... ...
   endif()
 #+END_SRC

 Check whether current OS is a Unix-like operating system (Linux, BSD,
 MacOSX, Android and so on): 

 #+BEGIN_SRC cmake 
   if(UNIX)
     # actions ... 
     message("Running on Unix-like OS")
   endif()  
 #+END_SRC

 Check if current OS is MacOSX:

 #+BEGIN_SRC cmake 
   if(APPLE)
     # actions ... 
     message("Running on Unix-like OS")
   endif()  
 #+END_SRC

 Check if current OS is Linux:

 #+BEGIN_SRC cmake 
   if(LINUX)
     # actions ... 
     message("Running on Unix-like OS")
   endif()  
 #+END_SRC

 Check if current OS is UNIX, but not MacOSX:

 #+BEGIN_SRC cmake
   if(UNIX AND NOT APPLE)
     # actions ... 
     message("Running on Unix-like OS")
   endif()  
 #+END_SRC
**** Detect operating system with variable CMAKE_SYSTEM_NAME

 Example: 

 #+BEGIN_SRC cmake 
 if(${CMAKE_SYSTEM_NAME} matches "linux")
   message(" [INFO] compiling for Linux")
 elseif(${CMAKE_SYSTEM_NAME} matches "Windows")
   message(" [INFO] compiling for Windows")
 elseif(${CMAKE_SYSTEM_NAME} matches "darwin")
   message(" [INFO] compiling for Apple MacOSX")
 elseif(${CMAKE_SYSTEM_NAME} matches "Android")
   message(" [INFO] compiling for Android OS.")
 else()
   message( " [WARNING] Operating system not identified.")
 endif()
 #+END_SRC

 Possible Values of Variable _CMAKE_SYSTEM_NAME_

 #+BEGIN_SRC cmake
   if(${CMAKE_SYSTEM_NAME} matches <<MATCHING-STRING>)
     message(" [INFO] compiling for <<MATCHIGN-STTRING> ")
   endif()
 #+END_SRC

 | Value of <<MATCHING-STRING> | Operating System              |   |
 | for _CMAKE_SYSTEM_NAME_       |                               |   |
 |-----------------------------+-------------------------------+---|
 | Windows                     | Windows                       |   |
 | Darwin                      | MacOSX                        |   |
 | BSD                         | Free BSD, OpenBDS, NetBSD ... |   |
 | FreeBSD                     |                               |   |
 | Linux                       | Linux                         |   |
 | Android                     | Android                       |   |
 |-----------------------------+-------------------------------+---|
*** Detect whether current build is 32 bits or 64 bits

Check whether current configuration is for 64 bits build:

#+BEGIN_SRC cmake 
 if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    message(" [INFO] 64 bits build.")
 else()
    message(" [INFO] 32 bits build.")
 endif()
#+END_SRC
*** Detect Compiler 
**** Detect compiler using predefined variables  

  *MSVC*

 Check if current compiler is MSVC - Microsft - Visual C/C++ Compiler
 (Visual C++, vc++ for short):

 #+BEGIN_SRC cmake 
   if(MSVC)
     message(STATUS << "Running MSVC")
   endif()
 #+END_SRC

  *MSVC for 32 bits target*

 Detect MSVC set up for 32 bits target (buids 32 bits binaries):

 #+BEGIN_SRC cmake 
   if(MSVC AND NOT CMAKE_CL_64)
     message(" [INFO] Building for 32 bits Windows target.")
   endif()
 #+END_SRC

  *MSVC for 64 bits target*

 #+BEGIN_SRC cmake 
   if(MSVC AND CMAKE_CL_64)
     message(" [INFO] Building for 64 bits Windows target.")
   endif()
 #+END_SRC

  *Mingw* 

 Check if current compiler is GCC/Mingw, GCC compiler ported to
 Windows.

 #+BEGIN_SRC cmake
   if(MSVC)
     message("Running Mingw/GCC maybe on Windows")
   endif()
 #+END_SRC
**** Detect compiler using CMAKE_CXX_COMPILER_ID variable 

 The variable CMAKE_CXX_COMPILER_ID can be used for checking the
 current C++ compiler.
  + See: [[https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html#variable:CMAKE_%253CLANG%253E_COMPILER_ID][Documentation]]

 #+BEGIN_SRC cmake 
    if (${CMAKE_CXX_COMPILER_ID} matches GNU)
      message(STATUS " [INFO] Using GCC - GNU C/C++ Compiler or MingW/GCC.")
    elseif(${CMAKE_CXX_COMPILER_ID} matches CLANG) 
      message(STATUS " [INFO] Using the super amazing, the finest C++ compiler: Clang++/LLVM.")
    elseif(${CMAKE_CXX_COMPILER_ID} matches MSVC)
      message(STATUS " [INFO] Using MSVC Windows 'Visual!!' C++ compiler")
    else()
      message( FATAL_ERROR " [ERROR] I cannot identify CMake Configuration not set for this compiler yet.")
    endif()
 #+END_SRC

 All possible values of ~CMAKE_CXX_COMPILER_ID~:

 | Value of ~CMAKE_CXX_COMPILER_ID~ | Compiler                                       |
 |--------------------------------+------------------------------------------------|
 | *Most used compilers*            |                                                |
 | GNU                            | GNU Compiler Collection (gcc.gnu.org)          |
 | Clang                          | LLVM Clang (clang.llvm.org)                    |
 | MSVC                           | Microsoft Visual Studio (microsoft.com)        |
 | Intel                          | Intel Compiler (intel.com)                     |
 | PGI                            | The Portland Group (pgroup.com)                |
 | G95                            | G95 Fortran (g95.org)                          |
 | Embarcadero, Borland           | Embarcadero (embarcadero.com)                  |
 | ARMCC                          | ARM Compiler (arm.com)                         |
 |                                |                                                |
 | *Other compilers*                |                                                |
 | Absoft                         | Absoft Fortran (absoft.com)                    |
 | ADSP                           | Analog VisualDSP++ (analog.com)                |
 | AppleClang                     | Apple Clang (apple.com)                        |
 | Bruce                          | Bruce C Compiler                               |
 | CCur                           | Concurrent Fortran (ccur.com)                  |
 | Cray                           | Cray Compiler (cray.com)                       |
 | HP                             | Hewlett-Packard Compiler (hp.com)              |
 | IAR                            | IAR Systems (iar.com)                          |
 | MIPSpro                        | SGI MIPSpro (sgi.com)                          |
 | NVIDIA                         | NVIDIA CUDA Compiler (nvidia.com)              |
 | OpenWatcom                     | Open Watcom (openwatcom.org)                   |
 | Flang                          | Flang Fortran Compiler                         |
 | PathScale                      | PathScale (pathscale.com)                      |
 | SDCC                           | Small Device C Compiler (sdcc.sourceforge.net) |
 | SunPro                         | Oracle Solaris Studio (oracle.com)             |
 | TI                             | Texas Instruments (ti.com)                     |
 | TinyCC                         | Tiny C Compiler (tinycc.org)                   |
 | XL, VisualAge, zOS             | IBM XL (ibm.com)                               |
*** Debug Information for diagnosing problems

 *Set Build Type*

Informs whether the current build type is Release or Debug. Relase has
optmization flags enabled and debugging symbols disabled. Debug
building type has optmization flags and debugging symbols flags
disabled.

The build type is:

 + Release when :
   + $ cmake --build <BUILD-DIRECTORY> --config Release --target
   + $ cmake --build <BUILD-DIRECTORY> --config Release --target install

 + Debug when using (Default):
   + $ cmake --build <BUILD-DIRECTORY> --config Debug --target
   + $ cmake --build <BUILD-DIRECTORY> --config Debug --target Application1
   + $ cmake --build <BUILD-DIRECTORY> --config Debug --target install 

 *Set Installation Directory* 

The installation directory can be set with the option
-DCMAKE_INSTALL_PREFIX, examples: 

#+BEGIN_SRC sh 
  # Configuration 
  $ cmake -Bcache -DCMAKE_INSTALL_PREFIX=C:\\Users\Dummy\apps 

  # Execute install target 
  $ cmake --build cache --config Debug --target install 
#+END_SRC

 *Useful Debugging Commands*

#+BEGIN_SRC cmake  
  message(" [INFO] Build type = ${CMAKE_BUILD_TYPE}")
#+END_SRC

Target word size 32 bits (x86) or 64 bits (x86_64):

#+BEGIN_SRC cmake 
  if(CMAKE_SIZEOF_VOID_P EQUAL 8)
     message(" [INFO] Target = 64 bits build.")
  else()
     message(" [INFO] Target = 32 bits build.")
  endif()
#+END_SRC

Compiler: 

#+BEGIN_SRC cmake 
  message(" [INFO] Compiler ID = ${CMAKE_CXX_COMPILER_ID}")
#+END_SRC

Current Platform: 

#+BEGIN_SRC cmake 
  message(" [INFO] System Name = ${CMAKE_SYSTEM_NAME} ")
#+END_SRC

Binary directory <BUILD-DIRECTORY>

#+BEGIN_SRC cmake 
  message(" [INFO] CMake binary dir = ${CMAKE_BINARY_DIR}")
#+END_SRC

Installation directory specifies the directory where the binaries will
be installed by the target *install*. It can be specified during
configuration phase by using:

 + *--DCMAKE_INSTALL_PREFIX=C:\Users\Dummy\app*

#+BEGIN_SRC cmake 
  message(" [INFO] Install path CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX} ")
#+END_SRC


Putting it all together:

#+BEGIN_SRC cmake 
   message(" [INFO]  System Name  - CMAKE_SYSTEM_NAME     = ${CMAKE_SYSTEM_NAME}")
   message(" [INFO]  Build type   - CMAKE_BUILD_TYPE      = ${CMAKE_BUILD_TYPE}")
   message(" [INFO]  Compiler ID  - CMAKE_CXX_COMPILER_ID = ${CMAKE_CXX_COMPILER_ID}")
   message(" [INFO]  Install path - CMAKE_INSTALL_PREFIX  = ${CMAKE_INSTALL_PREFIX} ")
   if(CMAKE_SIZEOF_VOID_P EQUAL 8)
      message(" [INFO] Target = 64 bits build.")
   else()
      message(" [INFO] Target = 32 bits build.")
   endif()
   message(" [INFO] CMake binary dir = ${CMAKE_BINARY_DIR}")
#+END_SRC
** Force Settings 
*** Force generation of debugging symbols 

This snippet forces the generation of debugging symbols regardless of
the build type. It is a useful setting when building from command
line. 

Add the following line to the CMake file: 

#+BEGIN_SRC cpp 
 set(CMAKE_BUILD_TYPE Debug) # Force debug build
#+END_SRC

After the line is added, the file CMakeLists.txt becomes:

#+BEGIN_SRC cmake
  #========= Global Configuration ===============# 
  cmake_minimum_required(VERSION 3.9)
  project(Demo_cpp_plugin)
  set(CMAKE_CXX_STANDARD 17)     
  set(CMAKE_VERBOSE_MAKEFILE ON)

  # Force debug build
  set(CMAKE_BUILD_TYPE Debug) # Force debug build

  #========== Targets Configurations ============#

  add_executable(app ... )
  .. ... ... ... 
#+END_SRC
*** Force Compiler to Clang 

Despite C++ language remarkable improvements, C++ compiler error
messages of most compilers still cryptic and hard to grasp. Even for
silly syntax mistakes, C++ compilers can fill the screen with error
messages providing little context about the compiler error. 

Such cryptic errors can be better diagnosed by switching the compiler
to Clang that provides much better error messages that other compilers.
The compiler can be temporarily switched by using the IDE, by setting
environment variables or by setting CMake variables to force using an
specific compiler.


Example: CMakeLists.txt forcing compiler to Clang.

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 3.9)
  project(NumericalMethods)
  set(CMAKE_CXX_STANDARD 17)     
  set(CMAKE_VERBOSE_MAKEFILE ON)

  set(FORCE_CLANG ON)
  # Force compiler to Clang++
  if(FORCE_CLANG)
      set(CMAKE_C_COMPILER clang)
      set(CMAKE_CXX_COMPILER clang++)
  endif()

  #========== Targets Configurations ============#

  # TARGET: rootFinding1.cpp 
  add_executable(rootFinding1 rootFinding1.cpp)
#+END_SRC

 *Explanation:*

This next line sets the variable FORCE_CLANG:

#+BEGIN_SRC cmake 
   set(FORCE_CLANG ON)   # Force using clang compiler 
   set(FORCE_CLANG OFF)  # Use default compiler 
#+END_SRC

When the variable FORCE_CLANG is set, the commands within the if-endif
block set the C and C++ compiler to Clang and Clang++.

#+BEGIN_SRC cmake 
  # Force compiler to Clang++
  if(FORCE_CLANG)
      set(CMAKE_C_COMPILER clang)
      set(CMAKE_CXX_COMPILER clang++)
  endif()
#+END_SRC
** Useful CMake Modules 
*** CMake Module Projects 

 * *Cotire* [BEST]
   * CMake module for speeding compilation by automating the usage of
     pre-compiled headers in a non-intrusive way that requires few
     modifications in the source code.
   * Note: The process of using pre-compiled headers is usually
     cumbersome and compiler-specific. This CMake module (script)
     automates this configuration.
   * Repository: https://github.com/sakra/cotire

 * *ruslo/poly*
   * wrench Collection of CMake toolchain files and scripts for
     cross-platform build and CI testing (GCC, Visual Studio, iOS,
     Android, Clang analyzer, sanitizers etc.) http://goo.gl/5JpHX
   * Contains CMAKE Toolchain files for iOS, Android, Raspberry Pi,
     Windows ... 
   * https://github.com/ruslo/polly

 * *cmake-precompile-headers*
   * Precompiled header setup for CMake. Supported CMake generators:
     Visual Studio; NMake Makefiles; Unix Makefiles (GCC); MinGW
     Makefiles; MSYS Makefiles and Ninja.
   * https://github.com/larsch/cmake-precompiled-header

 * *UCM*
   * Useful cmake macros that help with: compiler/linker flags,
     collecting sources, PCHs, Unity builds and other stuff.  
   * Repository: https://github.com/onqtam/ucm

 * *Dockcross* 
   * Cross compiling toolchains in Docker images
   * Repository: https://github.com/dockcross/dockcross

 * *clang-tidy-project-cmake*
   + Add clang-tidy checks to a target usingCMake 
   + Repository: https://github.com/polysquare/clang-tidy-target-cmake

 * *FindLAPACK*
   * CMake FindLAPACK.cmake that works with Intel MKL, Atlas, OpenBLAS, Netlib, LAPACK95 for C / C++ / Fortran
   * Repository: https://github.com/scivision/lapack-cmake

 * *android-cmake*
   * "CMake is great, and so is Android. This is a collection of CMake
     scripts that may be useful to the Android NDK community. It is
     based on experience from porting OpenCV library to Android:
     http://opencv.org/platforms/android.html Main goal is to share
     these scripts so that devs that use CMake as their build system
     may easily compile native code for Android."
   * Repository: https://github.com/taka-no-me/android-cmake

 * *cmake-avr*
   * cmake-avr - a cmake toolchain for AVR projects
   * https://github.com/mkleemann/cmake-avr

 * *arduino-cmake*
   * Arduino CMake Build system
   * https://github.com/francoiscampbell/arduino-cmake

 * *Hunder Package Manager* - A CMake module (aka script) that works as
   package manager. 
   + Repository: https://github.com/ruslo/hunter

*** Collected CMake Modules 

Collected CMake modules/scripts from other projects. 

   + [[https://github.com/OpenChemistry/avogadroapp/blob/master/cmake/DeployQt5.cmake][DeployQt5.cmake]]

   + [[https://github.com/OpenChemistry/avogadroapp/blob/master/cmake/AvogadroCPack.cmake][AvogadroCPack.cmake]]

   + [[https://gitlab.com/rpdev/opentodolist/blob/master/cmake/BuildLinuxAppImage.cmake][BuildLinuxAppImage.cmake]]

   + [[https://github.com/OpenChemistry/avogadroapp/blob/master/cmake/DetermineVersion.cmake][DetermineVersion.cmake]]

   + [[https://github.com/owncloud/client/blob/master/cmake/modules/GetGitRevisionDescription.cmake][GetGitRevisionDescription.cmake]]

   + [[https://github.com/owncloud/client/blob/master/cmake/modules/UseDoxygen.cmake][UseDoxygen.cmake]]

   + [[https://github.com/nitroshare/nitroshare-desktop/blob/226dd32879981c0bf2ef4c78faee3af3b797bfdc/cmake/Windeployqt.cmake][Windeployqt.cmake]]

   + [[https://github.com/nitroshare/nitroshare-desktop/blob/226dd32879981c0bf2ef4c78faee3af3b797bfdc/cmake/SharedLibrary.cmake][SharedLibrary.cmake]]

   + [[https://git.ircad.fr/Sight/sight/blob/dev/CMake/doxygen/doxygen_generator.cmake][doxygen_generator.cmake]]

   + [[https://git.ircad.fr/Sight/sight/blob/dev/CMake/install/linux_install.cmake][linux_install.cmake]]

   + [[https://git.ircad.fr/Sight/sight/blob/dev/CMake/install/osx_install.cmake][osx_install.cmake]]

   + [[https://git.ircad.fr/Sight/sight/blob/dev/CMake/install/win_install.cmake][win_install.cmake]]

   + [[https://git.ircad.fr/Sight/sight/blob/dev/CMake/vscode/vscode_generator.cmake][vscode_generator.cmake]]
** Cross references
*** Common Variables 
**** CMAKE_CURRENT_LIST_DIR - Directory where is CMakeLists.txt 

 Prints the directory where CMAkeLists.

 #+BEGIN_SRC cmake 
   message(" [INFO] CMakeLists.txt is in the directory ${CMAKE_CURRENT_LIST_DIR}")
 #+END_SRC

**** CMAKE_CXX_STANDARD - Set C++ Standard

 The variable ~CMAKE_CXX_STANDARD~ sets the project current C++
 standard. This variable can be set to 98 (for C++98); 11 (C++11); 14
 (C++14); 17 (C++17) and 20 (C++20 - experimental yet.)

  + Documentation: [[https://cmake.org/cmake/help/latest/prop_tgt/CXX_STANDARD.html#prop_tgt:CXX_STANDARD][CXX_STANDARD — CMake 3.13.2 Documentation]] 

 Example: Set project to compile with C++11 ISO standard.

 #+BEGIN_SRC cmake 
   set(CMAKE_CXX_STANDARD 11)
 #+END_SRC

 Usage: (File CMAKELists.txt)

 #+BEGIN_SRC cmake 
   cmake_minimum_required(VERSION 3.9)
   project(MY_PROJECT_NAME)

   set(CMAKE_CXX_STANDARD 17)
   ... ... .... .... 
 #+END_SRC

**** CMAKE_BUILD_TYPE - Set default building type to DEBUG 

 In the debug building type optimization flags are disabled and flags
 for generating debugging symbols are enabled, for GGC or GCC/Mingw and
 Clang the (-g) is automatically added and for MSVC, aka VC++ (cl.exe),
 the flag /Zi is also passed to the compiler. The default building type
 can be set to DEBUG with the following code.

 #+BEGIN_SRC cmake 
   # Set default building type to debug if it was not set
   # in command line with -DCMAKE_BUILD_TYPE=release
   if(NOT DEFINED CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE MATCHES "")
     set(CMAKE_BUILD_TYPE  debug)
   endif()
 #+END_SRC

 The building type can be changed by running cmake with the flag
  (-DCMAKE_BUILD_TYPE=release). Example: 

 #+BEGIN_SRC sh 
  $ cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=DEBUG -G "Visual Studio 15 2017 Win64"
 #+END_SRC

 Note: CMake is not case sensitive, so it does not matter using
 'release' or RELEASE; if or IF; endif or ENDIF and so on. 

**** CMAKE_CXX_FLAGS - Compiler flags 

 The globals compiler flags used to build all targets can be extended
 by setting the variable CMAKE_CXX_FLAGS. However, as the compiler
 flags depends on the compiler, the custom settings may not be portable
 if one uses a different compiler, for instance the (-g) flag used to
 generate debug symbols with GCC or Clang does not work with MSVC
 (visual c++ compiler, vc++) as it uses the flag /Zi for generating
 debugging symbols.

 Example 1: 

 #+BEGIN_SRC cmake
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}"  "-std=c++17 -g -Wall -Wextra -pendantic -O0" )
 #+END_SRC

 Example 2 (better):

 #+BEGIN_SRC cmake
   if(NOT MSVC)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}"  "-std=c++17 -g -Wall -Wextra -pendantic -O0" )
   endif()
 #+END_SRC
*** CMake Map 

  + Global configuration/settings 
    + add_definitions
    + set(<VARIABLE> <VALUE>)
    + add_subdirectory 

  + Target defintions
    + add_executable => Create target for building executable. 
    + add_library    => Create target for building static or shared library.
    + add_custom_target

  + Target Configuration:
    + set_target_properties(<TARGET> PROPERTIES <KEY> <VALUE> [<KEY <VALUE>] ...)
    + set_target_properties(testlib PROPERTIES CXX_VISIBILITY_PRESET hidden)
      + Make  symbols of shared or static library hidden by default,
        only explicitly annotated symbols are visible. It avoids name
        clashing which can lead to undefined behavior.

    + target_link_libraries(<executable-target> PUBLIC testlib)

  + Auxiliary targets:
    + install  => Install packages to some directoriy.

  + Find Commands:
    + find_path 
    + find_package
    + find_library
    + include_directory

  + Global Variables:
    + set(CMAKE_CXX_STANDARD 14)
    + set(CMAKE_VERBOSE_MAKEFILE ON)
    + set(CMAKE_BUILD_TYPE  debug)

 Typical CMake Variables:

 |--------------------------+----------------+-----------------------------------------------------------|
 | Variable                 | Compiler flags | Description                                               |
 |                          | affected       |                                                           |
 |--------------------------+----------------+-----------------------------------------------------------|
 | *Misc*                     |                |                                                           |
 | PROJECT_NAME             | -              | Sets project name.                                        |
 |                          |                |                                                           |
 | *Compiler*                 |                |                                                           |
 |                          |                |                                                           |
 | CMAKE_CXX_STANDARD       | -std=c++11     | Set the C++ standard used for compoling all sources       |
 | CMAKE_CXX_FLAGS          | -              | Additional compiler flags for all targets.                |
 | CMAKE_BUILD_TYPE         |                | Set whether build type is release or debug                |
 |                          |                |                                                           |
 | *Location*                 |                |                                                           |
 | CMAKE_BINARY_DIR         |                |                                                           |
 | CMAKE_CURRENT_LIST_DIR   |                | Get location of current CMakeLists.txt file.              |
 | CMAKE_INSTALL_PREFIX     |                | Location where targets will be installed (target _install_) |
 | CMAKE_CURRENT_BINARY_DIR |                |                                                           |
 |                          |                |                                                           |
 |--------------------------+----------------+-----------------------------------------------------------|

 Notes: 

  + The default value of the variable CMAKE_INSTALL_PREFIX are:
    + Windows:        C:/Program Files/${PROJECT_NAME}
    + Unix-like OS:   /usr/local
* Conan package Manager
** Main Web Sites

 + https://conan.io

 + https://twitter.com/conan_io?lang=en - News 

 + https://github.com/conan-io/ - Source code Repositories 

 + https://jfrog.com

** Benefits and Capabilities

Benefits: 

 + Reduce compile-time
 + Reduce library installation effort duplication
 + Increase library discoverability
 + Easier cross-compilation for different architectures
 + Host package recipes in local network or remotely 

Capabilities:

 + *Cache and reuse compilation binaries (aka object-code)*  such as intermediate
   object-code (*.o or *.obj), static libraries and shared libraries
   which reduces compile-time and effort duplication for installing
   a libraries since all projects using the same conan recipe can
   reuse the binaries.

 + *Package with embedded sources*: Sources can be embedded in a
   package. 

 + *Package with remote sources*: Conan packages (aka recipes) can fetch
   source code from remote sources such as Github, Gitlab,
   Sourceforge, FTP or even a *Conan Server* in local network.

 + Conan Recipes can build package's sources with a wide variety of tools such as:
   + GNU autotools
   + CMake
   + GNU Makefile
   + BSD Makefile 

** Videos 

Webinar JFrog: 

 * [[https://www.youtube.com/watch?v=xBLjXdyh3zs][{Webinar: Part 1 of 3} Introduction to C/C++ Package Management with Conan]]
 * [[https://www.youtube.com/watch?v=JsijdbjVlXw&feature=youtu.be][{Webinar: Part 2 of 3} Advanced package management for C/C++ with Conan]]
 * [[https://www.youtube.com/watch?v=ExpkMy6DJ6o&feature=youtu.be][{Webinar: Part 3 of 3} Modern DevOps for Modern C/C++ with Conan]] 

CppCon: 
 + [[https://www.youtube.com/watch?v=xA9yRX4Mdz0][CppCon 2017: D. Rodriguez-Losada Gonzalez “Faster Delivery of Large C/C++ Projects with...]]

** Selected Articles 

    + [[https://blog.conan.io/2018/01/30/Cross-building-Boost-Android.html][Cross building Boost C++ libraries to Android with Conan]]

    + [[https://blog.conan.io/2019/09/02/Deterministic-builds-with-C-C++.html][An introduction to deterministic builds with C/C++]]

    + [[https://news.ycombinator.com/item?id=20858044][An introduction to deterministic builds with C/C++ | Hacker News]]

    + [[https://blog.conan.io/2019/07/24/C++-build-systems-new-integrations-in-Conan-package-manager.html][C++ build systems new integrations in Conan package manager]]

    + [[https://community.arm.com/developer/tools-software/tools/b/tools-software-ides-blog/posts/driving-c-c-developer-use-cases-for-arm-with-conan][Conan platform manager and C/C++ - Tools, Software and IDEs blog - Software Tools - Arm Community]]

    + [[https://blog.jetbrains.com/clion/2019/05/getting-started-with-the-conan-clion-plugin/][Getting Started with the Conan CLion Plugin | CLion Blog]]

    + [[https://schneide.blog/2019/04/25/migrating-an-existing-c-codebase-to-use-conan/][Migrating an existing C++ codebase to conan | Schneide Blog]]

    + [[https://schneide.blog/2019/06/24/integrating-conan-cmake-and-jenkins/][Integrating conan, CMake and Jenkins | Schneide Blog]]

    + [[https://www.lattix.com/reducing-build-times-for-c-c-projects-with-conan-and-lattix/][Blog:Reducing build times for C/C++ Projects with JFrog's Conan and Lattix -]]

    + [[https://forums.unrealengine.com/community/community-content-tools-and-tutorials/1459614-a-cross-platform-workflow-for-integrating-third-party-libraries-using-the-conan-package-manager][A cross-platform workflow for integrating third-party libraries using the Conan package manager - Unreal Engine Forums]]

    + [[https://blog.conan.io/2018/12/03/Using-Facebook-Folly-with-Conan.html][Using Facebook Folly with Conan]]

    + https://github.com/conan-io/examples
      + Several Conan examples to complement the documentation and blog.

** Install Conan 

 *Standalone Installers* 

Conan Standalone Installers for Windows, Linux and Mac OSX which does
not require previous Python installation.

 + https://conan.io/downloads

 *Installation via PIP* 

Installing Conan requires a Python installation with pip.

#+BEGIN_SRC sh 
  $ pip instal conan 
#+END_SRC

The easiest way to get Python for any platform, including Windows is
through Miniconda distribution which is a lightweight version of
Python Anaconda distribution: 

 + https://docs.conda.io/en/latest/miniconda.html

 *Conan Addons for IDEs* 

Conan Extension (Addon) for Visual Studio 
 + https://docs.conan.io/en/latest/integrations/ide/visual_studio.html

Conan Plugin for JetBrains' CLION IDE: 
 + https://plugins.jetbrains.com/plugin/11956-conan

** Conan Package Repositories 

Search Conan Packages at Conan Center repository: 

Repository Lists:
 + https://docs.conan.io/en/latest/uploading_packages/remotes.html

Some Conan Repositories:

 + Main Repository: https://bintray.com/conan/conan-center
 + Others:
   + [[https://bintray.com/conan/conan-transit][Conan-Transit]]
   + [[https://bintray.com/conan-community/conan][Conan-Community]]
   + [[https://bintray.com/bincrafters/public-conan][Bincrafters]] - https://bincrafters.github.io/

** Libraries in Conan Center

 *Libraries in Conan Main Repositories* 
 
All libraries in Conan Community: 
 + https://bintray.com/conan-community/conan  

All libraries in Conan Bincrafters: 
 + https://bintray.com/bincrafters/public-conan

 *Selected Conan Libraries* 

|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| Conan Recipe                    | Description                                                                                                       |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| *Fundamental*                     |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| [[https://bintray.com/conan-community/conan/boost%253Aconan][Boost]]                           | Boost Libraries                                                                                                   |
| [[https://bintray.com/pocoproject/conan/Poco%253Apocoproject][Poco libraries]]                  | Poco framework libraries for network, compression, process and database.                                          |
| [[https://bintray.com/conan-community/conan/abseil%253Aconan][Google's abseil]]                 | Google's abseil library - https://abseil.io/                                                                      |
| [[https://bintray.com/bincrafters/public-conan/fmt%253Abincrafters/5.3.0%253Astable][fmt]]                             | Fast and type-safe and extensible printf library.                                                                 |
| [[https://bintray.com/range-v3/range-v3/range-v3%253Aericniebler][ranges-v3]]                       | Ranges library derived from Boost that will be added to C++20 stdandard library.                                  |
| [[https://bintray.com/cliutils/CLI11/CLI11%253Acliutils/1.8.0%253Astable][CLI11]]                           | Lightweight header-only command line parser.                                                                      |
| [[https://bintray.com/conan-community/conan/cereal%253Aconan][Cereal]]                          | Header-only serialization library                                                                                 |
|                                 |                                                                                                                   |
| [[https://bintray.com/conan-community/conan/parallelstl%253Aconan][parallel stl]]                    | C++ standard library algorithms with support for execution policies                                               |
| [[https://bintray.com/conan-community/conan/TBB%253Aconan][Intel TBB]]                       | Intel Threading Building Blocks (Intel TBB) for writing parallel C++ programs.                                    |
|                                 |                                                                                                                   |
| [[https://bintray.com/bincrafters/public-conan/pugixml%253Abincrafters/1.9%253Astable][PugiXML]]                         | XML Parser library                                                                                                |
| [[https://bintray.com/conan-community/conan/IrrXML%253Aconan][IrrXML]]                          | Simple and fast open source xml parser for C++                                                                    |
|                                 |                                                                                                                   |
|                                 |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| *Unit Testing*                    |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| [[https://bintray.com/bincrafters/public-conan/gtest%253Abincrafters][Google Test]]                     | Google unit testing library, aka GTest                                                                            |
| [[https://bintray.com/catchorg/Catch2/Catch2:catchorg/2.7.2:stable][Catch2]]                          | Single header unit test framework.                                                                                |
| [[https://bintray.com/bincrafters/public-conan/doctest%253Abincrafters/2.3.1%253Astable][Doctest]]                         | Header-only unit testing library with fast compile-time.                                                          |
|                                 |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| *Data Compression*                |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| [[https://bintray.com/conan-community/conan/zlib%253Aconan][Zlib]]                            | Zlib compression library                                                                                          |
| [[https://bintray.com/conan-community/conan/bzip2%253Aconan][bzip2]]                           | bzip2 is a freely available, patent free (see below), high-quality data compressor.                               |
|                                 |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| *Scientific / Math*               |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| [[https://bintray.com/conan-community/conan/lapack%253Aconan][Conan Lapack]]                    | Lapack linear algebra library                                                                                     |
| [[https://bintray.com/conan-community/conan/openblas%253Aconan][Open BLAS]]                       | OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version.                                        |
| [[https://bintray.com/conan-community/conan/eigen%253Aconan][eigen]]                           | Eigen is a C++ template library for linear algebra: matrices, vectors, numerical solvers, and related algorithms. |
|                                 |                                                                                                                   |
|                                 |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| *Computer Graphics*               |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| [[https://bintray.com/conan-community/conan/libpng%253Aconan][libpng]]                          | Portable Network Graphics An Open, Extensible Image Format with Lossless Compression                              |
| [[https://bintray.com/bincrafters/public-conan/freetype%253Abincrafters][freetype]]                        | Render text onto bitmaps, and provides support for other font-related operations.                                 |
| [[https://bintray.com/bincrafters/public-conan/imgui:bincrafters][imgui]]                           | Bloat-free Immediate Mode Graphical User interface for C++ with minimal dependencies                              |
| [[https://bintray.com/bincrafters/public-conan/glm%253Ag-truc][glm]]                             | A C++ mathematics library for graphics programming                                                                |
| [[https://bintray.com/bincrafters/public-conan/sdl2%253Abincrafters/2.0.9%253Astable][sdl2]]                            | Simple Direct Media Layer                                                                                         |
|                                 |                                                                                                                   |
| [[https://bintray.com/bincrafters/public-conan/glfw%253Abincrafters][glfw]]                            | GLFW is an Open Source, multi-platform library for OpenGL, OpenGL ES and Vulkan development on the desktop.       |
|                                 | It provides a simple API for creating windows, contexts and surfaces, receiving input and events.                 |
|                                 |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| *Computer Vision and*             |                                                                                                                   |
| *AI - Artificial Inteligence*     |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| [[https://bintray.com/conan-community/conan/opencv%253Aconan][OpenCV]]                          | Most well-known Library for computer vision and image processing.                                                 |
| [[https://bintray.com/conan-community/conan/tiny-dnn%253Aconan][tiny-dnn]]                        | tiny-dnn is a C++14 implementation of deep learning on systems with limited computational resource.               |
|                                 |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| *Encryption and TSL/SSL*          |                                                                                                                   |
| [[https://bintray.com/conan-community/conan/OpenSSL:conan][OpenSSL]]                         | Most well-known library TLS/SSL - Transport Layer Security                                                        |
| [[https://bintray.com/bincrafters/public-conan/cryptopp%253Abincrafters][cryptopp]]                        | Free C++ class library of cryptographic schemes.                                                                  |
| [[https://bintray.com/bincrafters/public-conan/Botan%253Abincrafters][botan]]                           | Botan is a cryptography library written in C++11                                                                  |
|                                 |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| *Miscellaneous*                   |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|
| [[https://bintray.com/conan-community/conan/ncurses%253Aconan][ncurses]]                         | API to write text-based user interfaces, TUIs in a terminal.                                                      |
| [[https://bintray.com/bincrafters/public-conan/libcurl%253Abincrafters][LibCurl]]                         | curl library that provides clients for many network protocols: http, https, ftp, sftp, ...                        |
| [[https://bintray.com/conan-community/conan/pybind11%253Aconan][Pybind 11]]                       | Library for creating Python native modules / libraries in C++.                                                    |
| [[https://bintray.com/conan-community/conan/pistache%253Aconan][pistache]]                        | C++ REST framework written by Mathieu Stefani at Datacratic. It is written in pure C++11.                         |
| [[https://bintray.com/conan-community/conan/stb%253Aconan][stb - single-file public domain]] | stb single-file public domain libraries for C/C++                                                                 |
| [[https://bintray.com/conan-community/conan/wiringpi%253Aconan][wiringpi]]                        | GPIO Interface library for the Raspberry Pi                                                                       |
|                                 |                                                                                                                   |
|---------------------------------+-------------------------------------------------------------------------------------------------------------------|

** Command Summary 
*** Search Conan Packages 

Search for Poco libraries in Conan Center repository: 

#+BEGIN_SRC sh 
  $ conan search Poco* -r=conan-center
  Existing package recipes:

  Poco/1.7.8p3@pocoproject/stable
  Poco/1.7.9@pocoproject/stable
  Poco/1.7.9p1@pocoproject/stable
  Poco/1.7.9p2@pocoproject/stable
  Poco/1.8.0.1@pocoproject/stable
  Poco/1.8.0@pocoproject/stable
  Poco/1.8.1@pocoproject/stable
  Poco/1.9.0@pocoproject/stable
#+END_SRC

Search for Google Test in Conan Center repository: 

#+BEGIN_SRC sh 
  $ conan search gtest/* -r=conan-center
  Existing package recipes:

  gtest/1.7.0@bincrafters/stable
  gtest/1.8.0@bincrafters/stable
  gtest/1.8.1@bincrafters/stable
#+END_SRC

Search for libcurl package on BinCrafters repository:

#+BEGIN_SRC sh 
  λ conan search libcurl/* -r=bincrafters
  Existing package recipes:

  libcurl/7.50.3@bincrafters/stable
  libcurl/7.52.1@bincrafters/stable
  libcurl/7.56.1@bincrafters/stable
  libcurl/7.60.0@bincrafters/stable
  libcurl/7.61.1@bincrafters/stable
#+END_SRC

Search for pybind11 on all conan repositories:

#+BEGIN_SRC sh 
  $ conan search pybind* -r=all
  Existing package recipes:

  Remote 'conan-center':
  pybind11/2.2.2@conan/stable
  pybind11/2.2.3@conan/stable
  pybind11/2.2.4@conan/stable
  Remote 'conan-transit':
  pybind11/0.1.0@jason2506/testing
  pybind11/1.4@memsharded/stable
  pybind11/any@memsharded/stable

#+END_SRC

*** List libraries in local cache / local repository

This command lists packages in local cache or local repository.

#+BEGIN_SRC sh 
   $ conan search
   Existing package recipes:

   OpenSSL/1.0.2o@conan/stable
   Poco/1.9.0@pocoproject/stable
   gtest/1.8.1@bincrafters/stable
   zlib/1.2.11@conan/stable
#+END_SRC

List Conan storage directory ~/.conan on Unix-like (Linux, BSD, OSX ...)

#+BEGIN_SRC sh 
  $ tree -L 2  ~/.conan/
  /home/archbox/.conan/
  ├── artifacts.properties
  ├── cacert.pem
  ├── conan.conf
  ├── conan.conf.back
  ├── data
  │   ├── gtest
  │   ├── OpenSSL
  │   ├── Poco
  │   └── zlib
  ├── hooks
  │   └── attribute_checker.py
  ├── profiles
  │   └── default
  ├── registry.json
  ├── registry.json.lock
  ├── settings.yml
  └── version.txt

  7 directories, 10 files

#+END_SRC

List directory ~/.conan/data 

#+BEGIN_SRC sh 
  $ tree -L 3  ~/.conan/data
  /home/archbox/.conan/data
  ├── gtest
  │   └── 1.8.1
  │       └── bincrafters
  ├── OpenSSL
  │   └── 1.0.2o
  │       └── conan
  ├── Poco
  │   └── 1.9.0
  │       └── pocoproject
  └── zlib
      └── 1.2.11
          └── conan

  12 directories, 0 files
#+END_SRC

*** List Remote Repositories: 

#+BEGIN_SRC sh 
  $ conan remote list

  conan-center: https://conan.bintray.com [Verify SSL: True]
  conan-transit: https://conan-transit.bintray.com [Verify SSL: True]
#+END_SRC

*** Add more remote repositories 


Add Repositories: 

 + Add Conan Center (Repository installed by default)

#+BEGIN_SRC sh 
  $ conan remote add conan-center https://conan.bintray.com
#+END_SRC

 + Add Conan Community:

#+BEGIN_SRC sh 
  $ conan remote add conan-community https://api.bintray.com/conan/conan-community/conan
#+END_SRC

 + Add bincrafters

#+BEGIN_SRC sh 
  $ conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan
#+END_SRC

*** Install library in local cache 

Example install package libcurl version 7.61.1 from repository BinCrafters:

 + Installation on Windows 64 bits for 64 bits target. The build type
   is Release, however the installation lacks the debug building.
 + Linux, OS or Nix users don't need to be concerned about
   Debug/Release build type.

#+BEGIN_SRC sh 
  λ conan install libcurl/7.61.1@bincrafters/stable

  Configuration:
  [settings]
  arch=x86_64
  arch_build=x86_64
  build_type=Release
  compiler=Visual Studio
  compiler.runtime=MD
  compiler.version=15
  os=Windows
  os_build=Windows
  [options]
  [build_requires]
  [env]

  libcurl/7.61.1@bincrafters/stable: Not found in local cache, looking in remotes...
  libcurl/7.61.1@bincrafters/stable: Trying with 'conan-center'...
  Downloading conanmanifest.txt
  [==================================================] 234B/234B
  Downloading conanfile.py
  [==================================================] 19.4KB/19.4KB
  Downloading conan_export.tgz
  [==================================================] 764B/764B
  Decompressing conan_export.tgz: 100%|██████████| 764/764 [00:00<00:00, 46.3kB/s]
  OpenSSL/1.0.2n@conan/stable: Not found in local cache, looking in remotes...
  OpenSSL/1.0.2n@conan/stable: Trying with 'conan-center'...
  Downloading conanmanifest.txt
  [==================================================] 58B/58B
  Downloading conanfile.py
  [==================================================] 20.1KB/20.1KB
  libcurl/7.61.1@bincrafters/stable: Installing package
  Requirements
      OpenSSL/1.0.2n@conan/stable from 'conan-center' - Downloaded
      libcurl/7.61.1@bincrafters/stable from 'conan-center' - Downloaded
      zlib/1.2.11@conan/stable from 'conan-center' - Cache
  Packages
      OpenSSL/1.0.2n@conan/stable:606fdb601e335c2001bdf31d478826b644747077 - Download
      libcurl/7.61.1@bincrafters/stable:ae6191bc1194317ff7cdbc84d4d302ab49975618 - Download
      zlib/1.2.11@conan/stable:6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7 - Cache

  zlib/1.2.11@conan/stable: Already installed!
  OpenSSL/1.0.2n@conan/stable: Retrieving package 606fdb601e335c2001bdf31d478826b644747077 from remote 'conan-center'
  Downloading conanmanifest.txt
  [==================================================] 4.6KB/4.6KB
  Downloading conaninfo.txt
  [==================================================] 1.2KB/1.2KB
  Downloading conan_package.tgz
  [==================================================] 5.6MB/5.6MB
  Decompressing conan_package.tgz: 100%|██████████| 5.32M/5.32M [00:00<00:00, 24.0MB/s]
  OpenSSL/1.0.2n@conan/stable: Package installed 606fdb601e335c2001bdf31d478826b644747077
  libcurl/7.61.1@bincrafters/stable: Retrieving package ae6191bc1194317ff7cdbc84d4d302ab49975618 from remote 'conan-center'
  Downloading conanmanifest.txt
  [==================================================] 1.0KB/1.0KB
  Downloading conaninfo.txt
  [==================================================] 1.8KB/1.8KB
  Downloading conan_package.tgz
  [==================================================] 704.7KB/704.7KB
  Decompressing conan_package.tgz: 100%|██████████| 688k/688k [00:00<00:00, 14.9MB/s]
  libcurl/7.61.1@bincrafters/stable: Package installed ae6191bc1194317ff7cdbc84d4d302ab49975618
#+END_SRC

Install debug build of libcurl package:

#+BEGIN_SRC sh 
  λ conan install libcurl/7.61.1@bincrafters/stable -s build_type=Debug
  Configuration:
  [settings]
  arch=x86_64
  arch_build=x86_64
  build_type=Debug
  compiler=Visual Studio
  compiler.runtime=MDd
  compiler.version=15
  os=Windows
  os_build=Windows
  [options]
  [build_requires]
  [env]

   ...  ...  ...  ...  ... 

  Decompressing conan_package.tgz: 100%|██████████| 967k/967k [00:00<00:00, 15.0MB/s]
  libcurl/7.61.1@bincrafters/stable: Package installed 8f5289d9807917ac37fa3752916c824d2a8061ad
#+END_SRC

Install debug and release build of a library compiling it from source:

#+BEGIN_SRC sh 
  λ conan install libcurl/7.61.1@bincrafters/stable -s build_type=None 
#+END_SRC

Install  release builds of libcurl for x86 target (32 bits):

#+BEGIN_SRC sh 
  λ conan install libcurl/7.61.1@bincrafters/stable -s build_type=Release -s arch=x86
  Configuration:
  [settings]
  arch=x86
  arch_build=x86_64
  build_type=Release
  compiler=Visual Studio
  compiler.runtime=MD
  compiler.version=15
  os=Windows
  os_build=Windows
  [options]
  [build_requires]
  [env]
#+END_SRC

List installed library in local cache:

#+BEGIN_SRC sh 
  λ conan search
  Existing package recipes:

  OpenSSL/1.0.2n@conan/stable
  OpenSSL/1.0.2o@conan/stable
  Poco/1.9.0@pocoproject/stable
  gtest/1.8.1@bincrafters/stable
  libcurl/7.61.1@bincrafters/stable
  zlib/1.2.11@conan/stable
#+END_SRC

*** Show pacakge information

#+BEGIN_SRC sh 
   λ conan info libcurl/7.61.1@bincrafters/stable

   OpenSSL/1.0.2n@conan/stable
       ID: 606fdb601e335c2001bdf31d478826b644747077
       BuildID: None
       Remote: conan-center=https://conan.bintray.com
       URL: http://github.com/lasote/conan-openssl
       License: The current OpenSSL licence is an 'Apache style' license: https://www.openssl.org/source/license.html
       Recipe: Cache
       Binary: Cache
       Binary remote: conan-center
       Creation date: 2018-05-10 07:47:33
       Required by:
           libcurl/7.61.1@bincrafters/stable
       Requires:
           zlib/1.2.11@conan/stable
   libcurl/7.61.1@bincrafters/stable
       ID: ae6191bc1194317ff7cdbc84d4d302ab49975618
       BuildID: None
       Remote: conan-center=https://conan.bintray.com
       URL: http://github.com/bincrafters/conan-libcurl
       Homepage: http://curl.haxx.se
       License: MIT
       Author: Bincrafters <bincrafters@gmail.com>
       Recipe: Cache
       Binary: Cache
       Binary remote: conan-center
       Creation date: 2018-11-16 03:42:43
       Required by:
           PROJECT
       Requires:
           OpenSSL/1.0.2n@conan/stable
           zlib/1.2.11@conan/stable
   zlib/1.2.11@conan/stable
       ID: 6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7
       BuildID: None
       Remote: conan-center=https://conan.bintray.com
       URL: http://github.com/conan-community/conan-zlib
       Homepage: https://zlib.net
       License: Zlib
       Author: Conan Community
       Recipe: Cache
       Binary: Cache
       Binary remote: conan-center
       Creation date: 2018-12-21 02:01:48
       Required by:
           OpenSSL/1.0.2n@conan/stable
           libcurl/7.61.1@bincrafters/stable
#+END_SRC

** Example CMake/Conan project  
**** Project Files

Gist: https://gist.github.com/caiorss/5067e2981488aff1b5765b02adbfdffc 

File: *conanfile.txt* 
 + Conan project file.
 + Poco:shared=False => Static link the library.

#+BEGIN_SRC conf 
  [requires]
  Poco/1.9.0@pocoproject/stable
  gtest/1.8.1@bincrafters/stable

  [generators]
  cmake

  [options]
  Poco:shared=False
#+END_SRC

File: *CMakeLists.txt*

#+BEGIN_SRC cmake 
   cmake_minimum_required(VERSION 3.9)

   #========== Global Configurations =============#
   #----------------------------------------------#
   project(ConanTesting CXX)
   set(CMAKE_CXX_STANDARD 17)     
   set(CMAKE_VERBOSE_MAKEFILE ON)

   # ===>> Conan bootstrap  ===============

   # Automatically install conan packages if they are not installed.
   # Assumptions:
   #  + The file conanfile.txt is in this directory
   #  + This CMakeLists.txt file is in the project ROOT directory.
   #  + The conan application is the project $PATH environment variable
   #    and accessible from command line.
   #-------------------------------------------------
   if(NOT EXISTS "${CMAKE_BINARY_DIR}/conanbuildinfo.cmake")
     execute_process(
       COMMAND           conan install . --install-folder "${CMAKE_BINARY_DIR}"
       WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
    )
   endif()

   include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
   conan_basic_setup()

   #========== Targets Configurations ============#

   message(" [INFO] =>> CONAN_LIBS = ${CONAN_LIBS} " )

   # ==> Target for testing POCO Libraries 
   add_executable(poco demo-poco.cpp)
   target_link_libraries(poco PRIVATE ${CONAN_LIBS})

   # ==> Target for testing GogleTest 
   add_executable(agtest demo-gtest.cpp)
   target_link_libraries(agtest PRIVATE ${CONAN_LIBS})

   # Add target to run executable 
   add_custom_target(run-poco
     COMMAND poco 
     DEPENDS poco 
     WORKING_DIRECTORY ${CMAKE_PROJECT_DIR}
     )

   add_custom_target(run-gtest
     COMMAND agtest 
     DEPENDS agtest 
     WORKING_DIRECTORY ${CMAKE_PROJECT_DIR}
     )

   install(TARGETS poco agtest  DESTINATION ./bin)
#+END_SRC

File: *demo-gtest.cpp*

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <Poco/Process.h>
  #include <gtest/gtest.h>

  auto FunctionObject = [](int n){ return 5 * n + 4; };

  TEST(testA, FunctionObject)
  {
      EXPECT_EQ(19, FunctionObject(3));
  }

  TEST(testC, FunctionObject)
  {
      EXPECT_EQ(123, FunctionObject(5));
  }

  TEST(testB, FunctionObject)
  {
      EXPECT_EQ(24, FunctionObject(4));
  }
#+END_SRC

File: *demo-poco.cpp*

#+BEGIN_SRC cpp
   #include <iostream>
   #include <Poco/Process.h>

   int main()
   {
       std::cout << "Running POCO Libraries Launch." << std::endl;
       std::cout << "Poco Libraries are AWESOME!" << std::endl;

       #if !defined(_WIN32)
         std::cerr << " [INFO] I am running on some Unix-like Operating System." << std::endl;
         Poco::Process::launch("cat", {"/etc/protocols"});
      #else
         std::cerr << " [INFO] I am running on Windows." << std::endl;
         Poco::Process::launch("notepad.exe", {});
      #endif
      return 0;
   }
#+END_SRC
**** Building on Windows 

Install Conan packages in the current project at directory ./build/ -
the packages are download from the default remote repository and
stored at the Conan cache. Once they were downloaded, further usages
of those packages will use them from the cache.

#+BEGIN_SRC sh 
  $  conan install . --install-folder build 

  Configuration:
  [settings]
  arch=x86_64
  arch_build=x86_64
  build_type=Release
  compiler=Visual Studio
  compiler.runtime=MD
  compiler.version=15
  os=Windows
  os_build=Windows
  [options]
  [build_requires]
  [env]

  gtest/1.8.1@bincrafters/stable: WARN: Package is corrupted, removing folder: C:\Users\archbox\.conan\data\gtest\1.8.1\bincrafters\stable\package\3f7b6d42d6c995a23d193db1f844ed23ae943226
  PROJECT: Installing C:\Users\archbox\conan-test\conanfile.txt
  Requirements
      OpenSSL/1.0.2o@conan/stable from 'conan-center' - Cache
      Poco/1.9.0@pocoproject/stable from 'conan-center' - Cache
      gtest/1.8.1@bincrafters/stable from 'conan-center' - Cache
      zlib/1.2.11@conan/stable from 'conan-center' - Cache
  Packages
      OpenSSL/1.0.2o@conan/stable:606fdb601e335c2001bdf31d478826b644747077 - Download
      Poco/1.9.0@pocoproject/stable:09378ed7f51185386e9f04b212b79fe2d12d005c - Download
      gtest/1.8.1@bincrafters/stable:3f7b6d42d6c995a23d193db1f844ed23ae943226 - Download
      zlib/1.2.11@conan/stable:6cc50b139b9c3d27b3e9042d5f5372d327b3a9f7 - Download

   ... ....    ... ....    ... ....    ... ....    ... ....    ... ....    ... .... 

  Poco/1.9.0@pocoproject/stable: Package installed 09378ed7f51185386e9f04b212b79fe2d12d005c
  PROJECT: Generator cmake created conanbuildinfo.cmake
  PROJECT: Generator txt created conanbuildinfo.txt
  PROJECT: Generated conaninfo.txt
  PROJECT: Generated graphinfo
#+END_SRC

List ./build directory: 

#+BEGIN_SRC sh 
  λ ls build\
  conanbuildinfo.cmake  conanbuildinfo.txt  conaninfo.txt  graph_info.json
#+END_SRC

Check project packages:

#+BEGIN_SRC sh 
   $ conan info .

   PROJECT
       ID: 78e985959974aade35877b722f1e41355f5575f4
       BuildID: None
       Requires:
           Poco/1.9.0@pocoproject/stable
   OpenSSL/1.0.2o@conan/stable
       ID: 35ea421ef4c1d32898da44c28e3cc900bc6459dc
       BuildID: None
       Remote: conan-center=https://conan.bintray.com
       URL: http://github.com/lasote/conan-openssl
       License: The current OpenSSL licence is an 'Apache style' license: https://www.openssl.org/source/license.html
       Recipe: Cache
       Binary: Cache
       Binary remote: conan-center
       Creation date: 2018-08-27 04:12:47
       Required by:
           Poco/1.9.0@pocoproject/stable
       Requires:
           zlib/1.2.11@conan/stable
   Poco/1.9.0@pocoproject/stable
       ID: 67516f54281f3227d74b2b66f92537d98ff1103d
       BuildID: None
       Remote: conan-center=https://conan.bintray.com
       URL: http://github.com/pocoproject/conan-poco
       License: The Boost Software License 1.0
       Recipe: Cache
       Binary: Cache
       Binary remote: conan-center
       Creation date: 2018-08-30 08:28:08
       Required by:
           PROJECT
       Requires:
           OpenSSL/1.0.2o@conan/stable
   zlib/1.2.11@conan/stable
       ID: 1d877a3df840030e6a8abb74c5ffb9088d08b47a
       BuildID: None
       Remote: conan-center=https://conan.bintray.com
       URL: http://github.com/conan-community/conan-zlib
       Homepage: https://zlib.net
       License: Zlib
       Author: Conan Community
       Recipe: Cache
       Binary: Cache
       Binary remote: conan-center
       Creation date: 2018-12-21 07:01:48
       Required by:
           OpenSSL/1.0.2o@conan/stable
#+END_SRC

Configure CMake on Windows for 64 bits target:

#+BEGIN_SRC sh
  λ cmake -H. -Bbuild -G "Visual Studio 15 2017 Win64" -DCMAKE_INSTALL_PREFIX=.
#+END_SRC

Compile with release build and install at ./bin:

#+BEGIN_SRC sh 
  λ cmake --build build --target install --config Release

    ...  ...  ...  ...  ...  ...  ...  ...  ... 
  PostBuildEvent:
    setlocal
    "C:\Program Files\CMake\bin\cmake.exe" -DBUILD_TYPE=Release -P cmake_install.cmake
    if %errorlevel% neq 0 goto :cmEnd
    :cmEnd
    endlocal & call :cmErrorLevel %errorlevel% & goto :cmDone
    :cmErrorLevel
    exit /b %1
    :cmDone
    if %errorlevel% neq 0 goto :VCEnd
    :VCEnd
    -- Install configuration: "Release"
    -- Installing: C:/Users/archbox/conan-test/./bin/poco.exe
    -- Installing: C:/Users/archbox/conan-test/./bin/agtest.exe
  FinalizeBuildStatus:
    Deleting file "x64\Release\INSTALL\INSTALL.tlog\unsuccessfulbuild".
    Touching "x64\Release\INSTALL\INSTALL.tlog\INSTALL.lastbuildstate".
  Done Building Project "C:\Users\archbox\conan-test\build\install.vcxproj" (default targets).


  Build succeeded.
      0 Warning(s)
      0 Error(s)

  Time Elapsed 00:00:11.72
#+END_SRC

List directory ./bin 

#+BEGIN_SRC sh 
  λ where ls
  C:\Program Files\Git\usr\bin\ls.exe

  λ ls bin
  agtest.exe*  poco.exe*
#+END_SRC

Run application bin/agtest.exe:

#+BEGIN_SRC sh 
   λ bin\agtest.exe
   Running main() from gmock_main.cc
   [==========] Running 3 tests from 3 test cases.
   [----------] Global test environment set-up.
   [----------] 1 test from testA
   [ RUN      ] testA.FunctionObject
   [       OK ] testA.FunctionObject (0 ms)
   [----------] 1 test from testA (0 ms total)

   [----------] 1 test from testC
   [ RUN      ] testC.FunctionObject
   C:\Users\archbox\conan-test\demo-gtest.cpp(14): error: Expected equality of these values:
     123
     FunctionObject(5)
       Which is: 29
   [  FAILED  ] testC.FunctionObject (0 ms)
   [----------] 1 test from testC (0 ms total)

   [----------] 1 test from testB
   [ RUN      ] testB.FunctionObject
   [       OK ] testB.FunctionObject (0 ms)
   [----------] 1 test from testB (0 ms total)

   [----------] Global test environment tear-down
   [==========] 3 tests from 3 test cases ran. (4 ms total)
   [  PASSED  ] 2 tests.
   [  FAILED  ] 1 test, listed below:
   [  FAILED  ] testC.FunctionObject

    1 FAILED TEST

#+END_SRC

Note: Due to the following code in CMakeLists.txt, it is not needed to
run the command conan-install before cmake to install the packages as
this block will automatically run the conan-install command if the
packages are not installed in the project ./build directory. It allows
to configure CMake in a single step with $ cmake -Bbuild ... or open the
project in an IDE which supports CMake without running conan directly.

 + Summary: with this piece of code, it is not necessary to run conan,
   Cmake will run it automatically as a subprocess.

#+BEGIN_SRC cmake
   if(NOT EXISTS "${CMAKE_BINARY_DIR}/conanbuildinfo.cmake")
     execute_process(
       COMMAND           conan install . --install-folder "${CMAKE_BINARY_DIR}"
       WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
    )
   endif()
#+END_SRC
**** Building on Linux 

Clone gist:

#+BEGIN_SRC sh
  $ git clone https://gist.github.com/caiorss/5067e2981488aff1b5765b02adbfdffc conan-test2
  Cloning into 'conan-test2'...
  remote: Enumerating objects: 8, done.
  remote: Counting objects: 100% (8/8), done.
  remote: Compressing objects: 100% (7/7), done.
  remote: Total 8 (delta 1), reused 3 (delta 1), pack-reused 0
  Unpacking objects: 100% (8/8), done.

#+END_SRC

List directory:

#+BEGIN_SRC sh
  $ ls
  CMakeLists.txt  conanfile.txt  demo-gtest.cpp  demo-poco.cpp
#+END_SRC

CMake configuration step:
 + Note: The CMakeLists.txt file is set to automatically run Conan in the
   build directory. 
 + Note: The packages weren't download because they are already
   cached.

#+BEGIN_SRC sh
  $ cmake -H. -Bbuild -G Ninja -DCMAKE_INSTALL_PREFIX=.
  -- Current conanbuildinfo.cmake directory: /home/archbox/root-scripts/conan-test2/build
  -- Conan: Compiler GCC>=5, checking major version 8
  -- Conan: Checking correct version: 8
  -- Conan: Using cmake global configuration
  -- Conan: Adjusting default RPATHs Conan policies
  -- Conan: Adjusting language standard
   [INFO] =>> CONAN_LIBS = PocoMongoDB;PocoNet;PocoNetSSL;PocoCrypto;PocoData;PocoDataSQLite;PocoZip;PocoUtil;PocoXML;PocoJSON;PocoFoundation;rt;gmock_main;gmock;gtest;pthread;ssl;crypto;dl;z 
  -- Configuring done
  -- Generating done
  -- Build files have been written to: /home/archbox/root-scripts/conan-test2/build


  $ ls build/
  bin/         CMakeCache.txt        conanbuildinfo.txt  rules.ninja
  CMakeFiles/  cmake_install.cmake   conaninfo.txt
  build.ninja  conanbuildinfo.cmake  graph_info.json
#+END_SRC

Run all targets: (build all executables and libraries)

#+BEGIN_SRC sh 
  $ cmake --build build --target
  [4/4] Linking CXX executable bin/agtest
#+END_SRC

Install: 

#+BEGIN_SRC sh 
  $ cmake --build build --target install
  [0/1] Install the project...
  -- Install configuration: ""
  -- Installing: /home/archbox/root-scripts/conan-test2/./bin/poco
  -- Set runtime path of "/home/archbox/root-scripts/conan-test2/./bin/poco" to ""
  -- Installing: /home/archbox/root-scripts/conan-test2/./bin/agtest
  -- Set runtime path of "/home/archbox/root-scripts/conan-test2/./bin/agtest" to ""

  $ ls bin/
  agtest*  poco*
#+END_SRC

Run the executable bin/agtest.

#+BEGIN_SRC sh 
  $ bin/agtest --gtest_list_tests
  Running main() from gmock_main.cc
  testA.
    FunctionObject
  testC.
    FunctionObject
  testB.
    FunctionObject


  $ bin/agtest 
  Running main() from gmock_main.cc
  [==========] Running 3 tests from 3 test cases.
  [----------] Global test environment set-up.
  [----------] 1 test from testA
  [ RUN      ] testA.FunctionObject
  [       OK ] testA.FunctionObject (0 ms)
  [----------] 1 test from testA (0 ms total)

  ... ... .... 

   1 FAILED TEST
#+END_SRC

Run the executable bin/poco

#+BEGIN_SRC 
   $ # /etc/protocols:
   # $Id: protocols,v 1.12 2016/07/08 12:27 ovasik Exp $
   #
   # Internet (IP) protocols
   #
   #	from: @(#)protocols	5.1 (Berkeley) 4/17/89
   #
   # Updated for NetBSD based on RFC 1340, Assigned Numbers (July 1992).
   # Last IANA update included dated 2011-05-03
   #
   # See also http://www.iana.org/assignments/protocol-numbers

   ip	0	IP		# internet protocol, pseudo protocol number
   hopopt	0	HOPOPT		# hop-by-hop options for ipv6

   ... .... ... ... .... ... ... .... ... ... .... ... ... .... ... 
#+END_SRC
** Example CMake/Conan project with conan-cmake module 
**** Project Files 

This sample project uses the CMake wrapper [[https://github.com/conan-io/cmake-conan][cmake-conan]] for integrating
Conan and CMake without the file conanfile.txt or running conan from
command line before using CMake. 

CMake Module cmake-conan: 
 + https://github.com/conan-io/cmake-conan

Project Gist: 
 + https://gist.github.com/caiorss/7b0732f5de5ebc40981521e63a122d8e

Packages used in this sample project: (Conan reference)
 + [[https://bintray.com/bincrafters/public-conan/gtest%253Abincrafters/1.8.1%253Astable][gtest/1.8.1@bincrafters/stable]]
 + [[https://bintray.com/pocoproject/conan/Poco%253Apocoproject/1.9.0%253Astable][Poco/1.9.0@pocoproject/stable]]


This project can be downloaded with: 

#+BEGIN_SRC sh 
  # Clone repository 
  $ git clone https://gist.github.com/caiorss/7b0732f5de5ebc40981521e63a122d8e gist 
  $ cd gist 
 
  # Open in QTCreator IDE 
  $ qtcrator CMakeLists.txt 
#+END_SRC

 *File: CMakeLists.txt* 

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 3.9)

  #========== Global Configurations =============#
  #----------------------------------------------#
  project(ConanTesting CXX)
  set(CMAKE_CXX_STANDARD 17)     
  set(CMAKE_VERBOSE_MAKEFILE ON)

  # ============= Conan Bootstrap =============================#

  # Download automatically, you can also just copy the conan.cmake file
  if(NOT EXISTS "${CMAKE_BINARY_DIR}/conan.cmake")
     message(STATUS "Downloading conan.cmake from https://github.com/conan-io/cmake-conan")
     file(DOWNLOAD "https://github.com/conan-io/cmake-conan/raw/v0.13/conan.cmake"
                   "${CMAKE_BINARY_DIR}/conan.cmake")
  endif()

  include(${CMAKE_BINARY_DIR}/conan.cmake)

  conan_cmake_run(REQUIRES

                  # Libraries to be installed locally
                  Poco/1.9.0@pocoproject/stable
                  gtest/1.8.1@bincrafters/stable

                  BASIC_SETUP
                  BUILD missing
                  )

  #========== Find Packages =====================#

  find_package(GTest REQUIRED)

  # find_package(Poco  REQUIRED Foundation)

  #========== Targets Configurations ============#


  # ==> Target for testing POCO Libraries 
  add_executable(poco demo-poco.cpp)
  target_link_libraries(poco PRIVATE ${CONAN_LIBS})

  # ==> Target for testing GogleTest 
  add_executable(agtest demo-gtest.cpp)
  target_link_libraries(agtest PRIVATE GTest::GTest GTest::Main)
  add_test(MyGoogleTest agtest)

  install(TARGETS poco agtest  DESTINATION ./bin)
#+END_SRC

 *File: demog-gtest.cpp* 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <Poco/Process.h>
  #include <gtest/gtest.h>

  auto FunctionObject = [](int n){ return 5 * n + 4; };

  TEST(testA, FunctionObject)
  {
          EXPECT_EQ(19, FunctionObject(3));
  }

  TEST(testC, FunctionObject)
  {
          EXPECT_EQ(123, FunctionObject(5));
  }

  TEST(testB, FunctionObject)
  {
          EXPECT_EQ(24, FunctionObject(4));
  }
#+END_SRC

 *File: poco-test.cpp* 

#+BEGIN_SRC cpp 
  #include <iostream>
  #include <Poco/Process.h>

  int main()
  {
      std::cout << "Running POCO Libraries Launch." << std::endl;
      std::cout << "Poco Libraries are AWESOME!" << std::endl;

      #if !defined(_WIN32)
        std::cerr << " [INFO] I am running on some Unix-like Operating System." << std::endl;
        Poco::Process::launch("cat", {"/etc/protocols"});
     #else
        std::cerr << " [INFO] I am running on Windows." << std::endl;
        Poco::Process::launch("notepad.exe", {});
      #endif

     return 0;
  }
#+END_SRC

**** Building on Linux/Unix 

Clone repository: 

#+BEGIN_SRC sh 
  $ git clone https://gist.github.com/caiorss/7b0732f5de5ebc40981521e63a122d8e gist 
  Cloning into 'gist'...
  remote: Enumerating objects: 8, done.
  remote: Counting objects: 100% (8/8), done.
  remote: Compressing objects: 100% (8/8), done.
  remote: Total 8 (delta 1), reused 0 (delta 0), pack-reused 0
  Unpacking objects: 100% (8/8), done.
#+END_SRC

Show project files: 

#+BEGIN_SRC sh 
  $ ls gist/
  CMakeLists.txt  demo-gtest.cpp  demo-poco.cpp
#+END_SRC

CMake - configuration => Generate project files. 

 + $ cmake -Hgist -Bcache -GNinja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=.
   * -Hgist
     * => Set source code location to directory ./gist
   * -Bcache
     * => Set binary output directory to ./cache
   * -GNinja
     + => Use Ninja build instead of Makefile
   * -DCMAKE_BUILD_TYPE=Debug
     + => Enable debug build which generates debugging symbols and disable optimization.
   * -DCMAKE_INSTALL_PREFIX=.
     + => Set install directory to current directory (PWD)

#+BEGIN_SRC sh 
  $ cmake -Hgist -Bcache -GNinja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=. 

  -- The CXX compiler identification is GNU 8.3.1
  -- Check for working CXX compiler: /usr/lib64/ccache/c++
  -- Check for working CXX compiler: /usr/lib64/ccache/c++ -- works
  -- Detecting CXX compiler ABI info
  -- Detecting CXX compiler ABI info - done
  -- Detecting CXX compile features
  -- Detecting CXX compile features - done
  -- Downloading conan.cmake from https://github.com/conan-io/cmake-conan
  -- Conan: Automatic detection of conan settings from cmake
  -- Conan: Settings= -s;build_type=Debug;-s;compiler=gcc;-s;compiler.version=8;-s;compiler.libcxx=libstdc++11
  -- Conan executing: conan install . -s build_type=Debug -s compiler=gcc -s compiler.version=8 -s compiler.libcxx=libstdc++11 -g=cmake --build=missing
  -- Configuration:
  [settings]
  arch=x86_64
  arch_build=x86_64
  build_type=Debug
  compiler=gcc
  compiler.libcxx=libstdc++11
  compiler.version=8
  os=Linux
  os_build=Linux
  [options]
  [build_requires]
  [env]

  conanfile.txt: Installing package
  Requirements
      OpenSSL/1.0.2o@conan/stable from 'conan-center' - Cache
      Poco/1.9.0@pocoproject/stable from 'conan-center' - Cache
      gtest/1.8.1@bincrafters/stable from 'conan-center' - Cache
      zlib/1.2.11@conan/stable from 'conan-center' - Cache
  Packages
      OpenSSL/1.0.2o@conan/stable:9c111a8074926a7147291383e3d366f41bac77b3 - Cache
      Poco/1.9.0@pocoproject/stable:5d73f6d80f86b797938bd4121e0ee66b325e7063 - Cache
      gtest/1.8.1@bincrafters/stable:884a98ecd973519f5d71b74c29f9e7ddcbd902d4 - Cache
      zlib/1.2.11@conan/stable:761432f3453a17c960259b5b2605153e3bcffd7d - Cache

  gtest/1.8.1@bincrafters/stable: Already installed!
  zlib/1.2.11@conan/stable: Already installed!
  OpenSSL/1.0.2o@conan/stable: Already installed!
  Poco/1.9.0@pocoproject/stable: Already installed!
  conanfile.txt: Generator cmake created conanbuildinfo.cmake
  conanfile.txt: Generator txt created conanbuildinfo.txt
  conanfile.txt: Generated conaninfo.txt
  conanfile.txt: Generated graphinfo

  -- Conan: Loading conanbuildinfo.cmake
  -- Conan: Adjusting output directories
  -- Conan: Using cmake global configuration
  -- Conan: Adjusting default RPATHs Conan policies
  -- Conan: Adjusting language standard
  -- Current conanbuildinfo.cmake directory: /home/archbox/projects/cache
  -- Conan: Compiler GCC>=5, checking major version 8
  -- Conan: Checking correct version: 8
  -- Found GTest: /home/archbox/.conan/data/gtest/1.8.1/bincrafters/stable/package/884a98ecd973519f5d71b74c29f9e7ddcbd902d4/lib/libgtestd.a  
  -- Looking for C++ include pthread.h
  -- Looking for C++ include pthread.h - found
  -- Looking for pthread_create
  -- Looking for pthread_create - not found
  -- Looking for pthread_create in pthreads
  -- Looking for pthread_create in pthreads - not found
  -- Looking for pthread_create in pthread
  -- Looking for pthread_create in pthread - found
  -- Found Threads: TRUE  
  -- Configuring done
  -- Generating done
  -- Build files have been written to: /home/archbox/projects/cache

#+END_SRC

Show cache directory: 

#+BEGIN_SRC sh 
  $ tree -L 2 cache
  cache
  ├── bin
  │   ├── agtest
  │   └── poco
  ├── build.ninja
  ├── CMakeCache.txt
  ├── CMakeFiles
  │   ├── 3.14.3
  │   ├── agtest.dir
  │   ├── CheckLibraryExists
  │   ├── cmake.check_cache
  │   ├── CMakeError.log
  │   ├── CMakeOutput.log
  │   ├── CMakeTmp
  │   ├── feature_tests.bin
  │   ├── feature_tests.cxx
  │   ├── poco.dir
  │   └── TargetDirectories.txt
  ├── cmake_install.cmake
  ├── conanbuildinfo.cmake
  ├── conanbuildinfo.txt
  ├── conan.cmake
  ├── conanfile.txt
  ├── conaninfo.txt
  ├── graph_info.json
  └── rules.ninja

  7 directories, 18 files
#+END_SRC

Build all targets: 

#+BEGIN_SRC sh 
  $ cmake --build cache --target 
  [4/4] Linking CXX executable bin/agtest
#+END_SRC

Run executable agtest (GoogleTest)

#+BEGIN_SRC sh 
 $ cache/bin/agtest  
#+END_SRC

Run executable poco

#+BEGIN_SRC sh 
  $ cache/bin/poco 
#+END_SRC

Install: 

#+BEGIN_SRC sh 
  $ cmake --build cache --target install
  [0/1] Install the project...
  -- Install configuration: "Debug"
  -- Installing: /home/archbox/projects/./bin/poco
  -- Set runtime path of "/home/archbox/projects/./bin/poco" to ""
  -- Installing: /home/archbox/projects/./bin/agtest
  -- Set runtime path of "/home/archbox/projects/./bin/agtest" to ""

 $ ls bin/
 agtest*  poco*

 # Run app ./agtest 
 $ bin/agtest 
  
 # Run app poco 
 $ bin/poco 
#+END_SRC
** Make conan-cmake module globally available 

The [[https://github.com/conan-io/cmake-conan][cmake-conan]] cmake module can be installed globally in the system
by moving the file conan.cmake to the default location where CMake
built-in modules are stored. 

Those locations are:

 + For Linux
   * //usr/share/cmake/Modules/

 + For Mac OSX
   + Similar path schema to Linux 

 + For Windows NT
   * C:\\Program Files (x86)\CMake\Modules

Installation on Linux:

#+BEGIN_SRC sh 
  $ mkdir -p /usr/share/cmake/Modules/custom && cd /usr/share/cmake/Modules/custom
  $ curl -O https://github.com/conan-io/cmake-conan/raw/v0.13/conan.cmake
#+END_SRC

Project Usage: 

#+CAPTION: File - CMakeLists.txt 
#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 2.8)
  project(test-package)

  # ============= Conan Boosttrap =========================#
  include(custom/conan)

  set(CONAN_PROFILE default)
  conan_cmake_run(REQUIRES
                     Poco/1.9.0@pocoproject/stable
                     gtest/1.8.1@bincrafters/stable
                  BASIC_SETUP
                  BUILD missing)

  # ============= Find Package ===========================#
  add_executable(test-package "main.cpp")
  target_link_libraries(test-package hello)
#+END_SRC

* Vcpkg package manager 
** Documentation 

 + VCPKG Faq: [[https://github.com/Microsoft/vcpkg/blob/master/docs/about/faq.md][Frequently Asked Questions]]

** Windows Vcpkg Intallation 

Assumption: Visual studio development tools are already installed.

1 Download and install VCPKG 
 + Note: Assumes that vcpkg will be installed at ~C:\vcpkg~

#+BEGIN_SRC sh 
  $ cd C:\
  $ git clone https://github.com/Microsoft/vcpkg
  $ cd vcpkg/
  $ bootstrap-vcpkg.bat
#+END_SRC

2 Run the command Windows Key + R or execute from the terminal the
   following command. It opens the environment variables Window.

#+BEGIN_SRC sh 
  $ rundll32.exe sysdm.cpl,EditEnvironmentVariables
#+END_SRC

3 Set the following environment variables.

 + Set PATH to ~%PATH%;C:\vcpkg~
 + Add new variable VCPKG_ROOT and set it to: ~C:\vcpkg~


4 Test installation. Open a new terminal and enter:

#+BEGIN_SRC sh
  # Show where is the vcpkg.exe executable 
  C:\Users\archbox> where vcpkg
  C:\vcpkg\vcpkg.exe

  # Check whether environment variable VCPKG_ROOT is set:
  C:\Users\archbox> echo %VCPKG_ROOT%
  C:\vcpkg

  # List installed package 
  C:\Users\archbox>vcpkg list
  freeglut:x64-windows                               3.0.0-5          Open source implementation of GLUT with source a...
  freeglut:x86-windows                               3.0.0-5          Open source implementation of GLUT with source a...
  libjpeg-turbo:x86-windows                          1.5.3-1          libjpeg-turbo is a JPEG image codec that uses SI...
  libpng:x86-windows                                 1.6.35-1         libpng is a library implementing an interface fo...
  opengl:x86-windows                                 0.0-5            Open Graphics Library (OpenGL)[3][4][5] is a cro...
  pybind11:x64-windows                               2.2.3-1          pybind11 is a lightweight header-only library th...
  python3:x64-windows                                3.6.4-2          The Python programming language as an embeddable...
  zlib:x86-windows                                   1.2.11-3         A compression library
#+END_SRC

** Linux Vcpkg Installation

1 Create install directory 
  + In this instruction: VCPKG will be installed at directory
    $HOME/opt/vcpkg or ~/home/<<MY-USER>/opt/vcpkg/~

#+BEGIN_SRC sh 
  $ mkdir -p ~/opt && cd ~/opt
#+END_SRC

2 Download and compile VCPKG 

#+BEGIN_SRC sh 
  $ git clone https://github.com/Microsoft/vcpkg
  $ cd vcpkg/
  $ sh bootstrap-vcpkg.sh 
#+END_SRC

#+RESULTS:

3 Run VCPKG:

#+BEGIN_SRC sh 
  $ ./vcpkg
  Commands:
    vcpkg search [pat]              Search for packages available to be built
    vcpkg install <pkg>...          Install a package
    vcpkg remove <pkg>...           Uninstall a package
    vcpkg remove --outdated         Uninstall all out-of-date packages
    vcpkg list                      List installed packages
    vcpkg update                    Display list of packages for updating

    ... ... ... ... ... ....   ... . .. ... . .. ... .. .... 

  For more help (including examples) see the accompanying README.md.
#+END_SRC

4 Add VCPKG to search $PATH variable in order to be able to call it
from any directory.

 + Edit: ~/.bashrc or ~/.bash_profile and add the following code and
   restart the REPL.

#+BEGIN_SRC sh 
  # Directory where installed VCPKG
  export VCPKG_ROOT=$HOME/opt/vcpkg/

  # Make vcpkg tool callable from anywhere 
  export PATH=$PATH:$VCPKG_ROOT
 #+END_SRC
** Show all available packages

 + $ vcpkg search 

#+BEGIN_SRC sh 
  $ vcpkg search 

  3fd                  2.6.2            C++ Framework For Fast Development
  abseil               2018-11-08-1     an open-source collection designed to augment the C++ standard library. Abseil...
  ace                  6.5.3            The ADAPTIVE Communication Environment
  aixlog               1.2.1            Header-only C++ logging library 
  alac                 2017-11-03-c3... The Apple Lossless Audio Codec (ALAC) is a lossless audio codec developed by A...
  alac-decoder         0.2              ALAC C implementation of a decoder, written from reverse engineering the file ...
  alembic              1.7.10           Alembic is an open framework for storing and sharing scene data that includes ...
  allegro5             5.2.4.0          Allegro is a cross-platform library mainly aimed at video game and multimedia ...

   ... ...  ... ...  ... ...  ... ...  ... ...  ... ...  ... ... 

  aws-sdk-cpp[waf]                      C++ SDK for the AWS waf service
  aws-sdk-cpp[waf-regional]             C++ SDK for the AWS waf-regional service
  aws-sdk-cpp[workdocs]                 C++ SDK for the AWS workdocs service
  aws-sdk-cpp[workmail]                 C++ SDK for the AWS workmail service
  aws-sdk-cpp[workspaces]               C++ SDK for the AWS workspaces service
  aws-sdk-cpp[xray]                     C++ SDK for the AWS xray service

   ... ...  ... ...  ... ...  ... ...  ... ...  ... ...  ... ... 

  boost-polygon        1.68.0           Boost polygon module
  boost-pool           1.68.0           Boost pool module
  boost-predef         1.68.0           Boost predef module
  boost-preprocessor   1.68.0           Boost preprocessor module
  boost-process        1.68.0           Boost process module
  boost-program-opt... 1.68.0           Boost program_options module
  boost-property-map   1.68.0           Boost property_map module
  boost-property-tree  1.68.0           Boost property_tree module
  boost-proto          1.68.0           Boost proto module
  boost-ptr-container  1.68.0           Boost ptr_container module
  boost-python         1.68.0-2         Boost python module
  boost-qvm            1.68.0           Boost qvm module
  boost-random         1.68.0           Boost random module
  boost-range          1.68.0           Boost range module

   ... ...  ... ...  ... ...  ... ...  ... ...  ... ...  ... ... 

#+END_SRC
** Removing package 

#+BEGIN_SRC sh 
  $ vcpkg.exe remove libjpeg-turbo:x86-windows
  Your feedback is important to improve Vcpkg! Please take 3 minutes to complete our survey by running: vcpkg contact --survey
  The following packages will be removed:
      libjpeg-turbo:x86-windows
  Removing package libjpeg-turbo:x86-windows...
  Removing package libjpeg-turbo:x86-windows... done
  Purging package libjpeg-turbo:x86-windows...
  Purging package libjpeg-turbo:x86-windows... done
#+END_SRC
** Example: Project with spdlog and Boost Ublas 

File: *CMakeLists.txt*

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 3.9)

  if(DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
    set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
      CACHE STRING "")
    message(" [INFO] VCPKG CMAKE_TOOLCHAIN_FILE = ${CMAKE_TOOLCHAIN_FILE}")
  endif()

  #========== Global Configurations =============#
  #----------------------------------------------#
  project(SpdLogVCPKGTest)
  set(CMAKE_CXX_STANDARD 17)     
  set(CMAKE_VERBOSE_MAKEFILE ON)

  #========== Targets Configurations ============#

  # Build an executable (Unix-like OSes generates ./AppDemo1, on
  # Windows ./opengDemo1.exe)
  # ..........................................
  find_package(spdlog CONFIG REQUIRED)
  add_executable(AppDemo1 demo.cpp)
  target_link_libraries(AppDemo1 PRIVATE spdlog::spdlog)

  # Add target to run executable 
  add_custom_target(run-app
    COMMAND AppDemo1 
    DEPENDS AppDemo1 
    WORKING_DIRECTORY ${CMAKE_PROJECT_DIR}
    )

  install(TARGETS AppDemo1 DESTINATION ./bin)
  if(WIN32)
    # Install DLL depedency.
    # The only way to know the required dependencies is to
    # take a look at the build tree directory <<BUILD-TREE>>\Debug
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/fmtd.dll
      DESTINATION "bin")
  endif()
#+END_SRC

File: *demo.cpp*

#+BEGIN_SRC cpp
  #include <iostream>
  #include <spdlog/spdlog.h>
  #include <spdlog/sinks/stdout_sinks.h>

  // Headers for vectors 
  #include <boost/numeric/ublas/vector.hpp>
  #include <boost/numeric/ublas/io.hpp>

  namespace ub = boost::numeric::ublas;

  int main(){
      auto console = spdlog::stdout_logger_mt("stdout-console");
      console->info("Testing logging information to command line");

      console->info("Welcome to spdlog version {}.{}.{} !", SPDLOG_VER_MAJOR, SPDLOG_VER_MINOR, SPDLOG_VER_PATCH);
      console->warn("Easy padding in numbers like {:08d}", 12);
      console->critical("Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}", 42);
      console->info("Support for floats {:03.2f}", 1.23456);
      console->info("Positional args are {1} {0}..", "too", "supported");
      console->info("{:>8} aligned, {:<8} aligned", "right", "left");

      ub::vector<double> vec1(3, 2.2) ; vec1[2] = -5.1;
      ub::vector<double> vec2(3, -1.2); vec2[2] = 1.1;

      std::cout << "Vec1 = " << vec1 << std::endl;
      std::cout << "3.0 * Vec1 = " << 3.0 * vec1 << std::endl;
      std::cout << "Norm1(Vec1) = " << ub::norm_1(vec1) << std::endl;
      std::cout << "Vec2 - Vec1 = " << vec2 - vec1 << std::endl;

      std::cout << "\n Enter RETURN to exit" << std::endl;
      std::cin.get();
      return 0;
  }
#+END_SRC

Install Vcpkg libraries Boost Ublas and spdlog: 

#+BEGIN_SRC sh 
  # Windows installation 
  $ vcpkg install spdlog:x64-windows
  $ vcpkg install boost-ublas:x64-windows

  # Installation on Linux, OSX, or any other Unix-like OS. 
  $ vcpkg install spdlog
  $ vcpkg install boost-ublas
#+END_SRC

 *Visual Studio*

 + The project can be compiled, modified, debugged and managed by
   opening it with Visual Studio as a directory or by invoking Visual
   Studio form command developer command prompt with the following
   command.

#+BEGIN_SRC sh 
  # devenv <PATH-TO-PROJECT DIRECTORY>

  # Assumes that the current directory is the project top directory
  $ devenv .
#+END_SRC

All CMake Targets can be viewed from the VS Solution Explorer.

#+CAPTION: Visual Studio Solution Explorer - CMake Targets 
[[file:images/solution-explorer-visual-spdlog.png][file:images/solution-explorer-visual-spdlog.png]]

#+CAPTION: Running CMake project from Visual Studio.
[[file:images/cmake-project-vs-spdlog.png][file:images/cmake-project-vs-spdlog.png]]

 *Manual Compilation - CMake Configuration Step*

CMake Configuration on Windows with Visual Studio building tools as backed:

 + In the project directory run: 

#+BEGIN_SRC sh 
  $ cmake -H. -Bbuild -G "Visual Studio 15 2017 Win64" -DCMAKE_INSTALL_PREFIX=.
#+END_SRC

CMake Configuration on Linux using Makefiles: 

#+BEGIN_SRC sh 
  # Configuration using Makefiles 
  $ cmake -H. -Bbuild -DCMAKE_INSTALL_PREFIX=.

  # Configuration using Ninja building system 
  $ cmake -H. -Bbuild -G Ninja -DCMAKE_INSTALL_PREFIX=.
#+END_SRC

 *Manual Compilation - CMake Building Step*

Building all CMake targets (compilation targets to build executables
and libraries):

#+BEGIN_SRC sh 
  $ cmake --build build --target 
#+END_SRC

Run install target on Windows:

#+BEGIN_SRC sh 
  $ cmake --build build --target install 

    ... ... ... ... .... 
  PrepareForBuild:
    Creating directory "x64\Debug\INSTALL\".
    Creating directory "x64\Debug\INSTALL\INSTALL.tlog\".
  InitializeBuildStatus:
    Creating "x64\Debug\INSTALL\INSTALL.tlog\unsuccessfulbuild" because "AlwaysCreate" was specified.
  PostBuildEvent:
    setlocal
    "C:\Program Files\CMake\bin\cmake.exe" -DBUILD_TYPE=Debug -P cmake_install.cmake
    if %errorlevel% neq 0 goto :cmEnd
    :cmEnd
    endlocal & call :cmErrorLevel %errorlevel% & goto :cmDone
    :cmErrorLevel
    exit /b %1
    :cmDone
    if %errorlevel% neq 0 goto :VCEnd
    :VCEnd
    -- Install configuration: "Debug"
    -- Installing: C:/Users/archbox/Desktop/spdlogtest/./bin/AppDemo1.exe
    -- Up-to-date: C:/Users/archbox/Desktop/spdlogtest/bin/fmtd.dll
  FinalizeBuildStatus:
    Deleting file "x64\Debug\INSTALL\INSTALL.tlog\unsuccessfulbuild".
    Touching "x64\Debug\INSTALL\INSTALL.tlog\INSTALL.lastbuildstate".
  Done Building Project "C:\Users\archbox\Desktop\spdlogtest\build\install.vcxproj" (default targets).
  Build succeeded.
   .... ... .... ... .... ... .... ...
#+END_SRC

Run install target on Linux:

#+BEGIN_SRC sh 
  $ cmake --build build --target install
  [2/3] Install the project...
  -- Install configuration: ""
  -- Installing: /home/archbox/root-scripts/spdlog/./bin/AppDemo1
#+END_SRC

Check install output on Windows:

#+BEGIN_SRC sh 
  $ ls bin
  AppDemo1.exe*  fmtd.dll*
#+END_SRC

Check install output on Linux:

#+BEGIN_SRC sh 
  $ ls bin/
  AppDemo1*
#+END_SRC

Run program: 

#+BEGIN_SRC sh 
   # Run on Windows
   bin\AppDemo1.exe 

   [2019-01-09 16:17:13.360] [stdout-console] [info] Testing logging information to command line
   [2019-01-09 16:17:13.361] [stdout-console] [info] Welcome to spdlog version 1.2.0 !
   [2019-01-09 16:17:13.361] [stdout-console] [warning] Easy padding in numbers like 00000012
   [2019-01-09 16:17:13.361] [stdout-console] [critical] Support for int: 42;  hex: 2a;  oct: 52; bin: 101010
   [2019-01-09 16:17:13.361] [stdout-console] [info] Support for floats 1.23
   [2019-01-09 16:17:13.362] [stdout-console] [info] Positional args are supported too..
   [2019-01-09 16:17:13.362] [stdout-console] [info]    right aligned, left     aligned
   Vec1 = [3](2.2,2.2,-5.1)
   3.0 * Vec1 = [3](6.6,6.6,-15.3)
   Norm1(Vec1) = 9.5
   Vec2 - Vec1 = [3](-3.4,-3.4,6.2)

    Enter RETURN to exit
#+END_SRC

** Example: Project with OpenGL + FreeGLUT 

GIST: [[https://gist.github.com/caiorss/4e36d7423cfd456f39c26ba476873a3c][Cmake C++ project with VCPKG package manager and OpengGL/FreeGlut]]

File: *CMakeLists.txt*

#+BEGIN_SRC cmake 
  cmake_minimum_required(VERSION 3.9)

  if(DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
    set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
      CACHE STRING "")
      message(" [INFO] VCPKG CMAKE_TOOLCHAIN_FILE = ${CMAKE_TOOLCHAIN_FILE}")
  endif()

  #========== Global Configurations =============#
  #----------------------------------------------#
  project(OpengGL_Widnows)
  set(CMAKE_CXX_STANDARD 17)     
  set(CMAKE_VERBOSE_MAKEFILE ON)

  find_package(OpenGL REQUIRED)
  find_package(GLUT REQUIRED)
  find_package(GLU  REQUIRED)

  #========== Targets Configurations ============#

  # Build an executable (Unix-like OSes generates ./openglDemo1, on
  # Windows ./opengDemo1.exe)
  # ..........................................
  add_executable(openglDemo1 opengl1.cpp)
  target_link_libraries(openglDemo1 PRIVATE GLUT::GLUT)

  if(UNIX)
    target_link_libraries(openglDemo1 PRIVATE GL)
  endif()

  # Add extension .bin to executable name to make it easier
  # to identify that the binary file is an executable.
  # So, it turns  openglDemo1 becomes openglDemo1.bin 
  if(UNIX)
    set_target_properties(openglDemo1 PROPERTIES SUFFIX ".bin")
  endif()

  # Add target to run executable 
  add_custom_target(run-ex1
      COMMAND openglDemo1 
      DEPENDS openglDemo1 
      WORKING_DIRECTORY ${CMAKE_PROJECT_DIR}
  )

  # It installs (copies) the target files to a path relative to CMAKE_INSTALL_PREFIX
  # So, it will copy the built files to ${CMAKE_INSTALL_PREFIX}/out
  message(" Freeglut DLL = ${GLUT_RUNTIME_LIBRARY} ${FREEGLUT_DYNAMIC}
  ") install(TARGETS openglDemo1 DESTINATION out) install(FILES
  "${CMAKE_CURRENT_BINARY_DIR}/freeglut.dll" DESTINATION out)
#+END_SRC

File: *opengl1.cpp*

#+BEGIN_SRC cpp 
  #include <iostream>
  #if defined(_WIN32)
    #include <windows.h>
  #endif 
  #include <GL/gl.h>
  #include <GL/glu.h>
  #include <GL/glut.h>

  void renderFunction();

  int main(int argc, char ** argv){

      std::cerr << "[INFO] Starting OpenGL main loop." << std::endl;
	
      glutInit(&argc, argv);  
      glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
      glutInitWindowSize(500, 500);
      glutCreateWindow("Window 1");
      // Display Callback Function 
      glutDisplayFunc(&renderFunction);
      // Start main loop 
      glutMainLoop();
      std::cerr << "[INFO] Exit OpenGL main loop." << std::endl;
      return 0;
  }

  void renderFunction(){
          std::cerr << "[INFO] Running loop." << std::endl;
      // Clear the current output buffer
      glClear(GL_COLOR_BUFFER_BIT);   

      // Rotate 10 degrees counterclockwise around z axis
      glRotated(10, 0, 0, 1);

      // Set the current color (RGB) drawing to blue
      glColor3f(0.0, 0.0, 1.0);

      // Start polygon 
      glBegin(GL_POLYGON);
      glVertex3f(-0.5, -0.5, 0);
      glVertex3f( 0.5, -0.5, 0);
      glVertex3f( 0.5,  0.5, 0);
      glVertex3f(-0.5,  0.5, 0);
      // End polygon 
      glEnd();

      glFlush();
  }

#+END_SRC

Install FreeGlut library: 

Search FreeGlut library: 

#+BEGIN_SRC sh 
   $ vcpkg search freeglut

   freeglut             3.0.0-5          Open source implementation of GLUT with source and binary backwards compatibil...

   If your library is not listed, please open an issue at and/or consider making a pull request:
       https://github.com/Microsoft/vcpkg/issues
#+END_SRC

Install FreeGlut Library:

 + $ vcpkg install freeglut:x64-Windows
   + Install library compiled for 64 bits target. 

 + $ vcpkg install freeglut:x86-Windows
   + Install library compiled for x86 bits target. 

#+BEGIN_SRC sh 
  $ vcpkg install freeglut:x64-Windows

  The following packages will be built and installed:
      freeglut[core]:x64-windows
  Starting package 1/1: freeglut:x64-windows
  Building package freeglut[core]:x64-windows...
  A suitable version of git was not found (required v2.20.0). Downloading portable git v2.20.0...
  Downloading git...
    https://github.com/git-for-windows/git/releases/download/v2.20.0.windows.1/PortableGit-2.20.0-32-bit.7z.exe -> C:\vcpkg\downloads\PortableGit-2.20.0-32-bit.7z.exe
  Extracting git...
  A suitable version of 7zip was not found (required v18.1.0). Downloading portable 7zip v18.1.0...
  Downloading 7zip...
    https://www.nuget.org/api/v2/package/7-Zip.CommandLine/18.1.0 -> C:\vcpkg\downloads\7-zip.commandline.18.1.0.nupkg
  Extracting 7zip...
  A suitable version of nuget was not found (required v4.6.2). Downloading portable nuget v4.6.2...
  Downloading nuget...
    https://dist.nuget.org/win-x86-commandline/v4.6.2/nuget.exe -> C:\vcpkg\downloads\nuget.exe
  -- Downloading http://downloads.sourceforge.net/project/freeglut/freeglut/3.0.0/freeglut-3.0.0.tar.gz...
  -- Extracting source C:/vcpkg/downloads/freeglut-3.0.0.tar.gz
  -- Configuring x64-windows
  -- Building x64-windows-dbg
  -- Building x64-windows-rel
  -- Performing post-build validation
  -- Performing post-build validation done
  Building package freeglut[core]:x64-windows... done
  Installing package freeglut[core]:x64-windows...
  Installing package freeglut[core]:x64-windows... done
  Elapsed time for package freeglut:x64-windows: 2.215 min

  Total elapsed time: 2.215 min

  The package freeglut is compatible with built-in CMake targets:

      find_package(GLUT REQUIRED)
      target_link_libraries(main PRIVATE GLUT::GLUT)
#+END_SRC

Clone the GIST for avoiding crating the sources manually: 

#+BEGIN_SRC sh 
  $ git clone https://gist.github.com/caiorss/4e36d7423cfd456f39c26ba476873a3c opengl-cmake-demo
  Cloning into 'opengl-cmake-demo'...
  remote: Enumerating objects: 4, done.
  remote: Counting objects: 100% (4/4), done.
  remote: Compressing objects: 100% (4/4), done.
  Unpacking objects: 100% (4/4), done.
  remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0

  $ cd opengl-cmake-demo\

  $ dir
   Volume in drive C has no label.
   Volume Serial Number is 

   Directory of C:\Users\archbox\Desktop\opengl-cmake-demo

  01/08/2019  05:57 PM    <DIR>          .
  01/08/2019  05:57 PM    <DIR>          ..
  01/08/2019  05:57 PM             1,630 CMakeLists.txt
  01/08/2019  05:57 PM             1,188 opengl1.cpp
                 2 File(s)          2,818 bytes
                 2 Dir(s)   1,157,586,944 bytes free

#+END_SRC

Perform CMake configuration step generating building scripts:

#+BEGIN_SRC sh 
    $ cmake -H. -Bbuild -G "Visual Studio 15 2017 Win64" -DCMAKE_INSTALL_PREFIX=.
     [INFO] VCPKG CMAKE_TOOLCHAIN_FILE = C:\vcpkg/scripts/buildsystems/vcpkg.cmake
    -- The C compiler identification is MSVC 19.16.27025.1
    -- The CXX compiler identification is MSVC 19.16.27025.1
     ... ...  ... ...  ... ...  ... ...  ... ...  ... ...  ... ... 
    -- Detecting CXX compiler ABI info - done
    -- Detecting CXX compile features
    -- Detecting CXX compile features - done
    -- Found OpenGL: opengl32
    -- Found GLUT: C:/vcpkg/installed/x64-windows/debug/lib/freeglut.lib
    -- WARNING: you are using the obsolete 'GLU' package, please use 'OpenGL' instead
     Freeglut DLL =
    -- Configuring done
    -- Generating done
    -- Build files have been written to: C:/Users/archbox/Desktop/opengl-cmake-demo/build
#+END_SRC

Build all targets: 

 + $ cmake --build build --config debug
 + $ cmake --build build --config release 
 
#+BEGIN_SRC sh 
  $ cmake --build build --config debug

  Microsoft (R) Build Engine version 15.9.21+g9802d43bc3 for .NET Framework
  Copyright (C) Microsoft Corporation. All rights reserved.

  Build started 1/8/2019 6:02:01 PM.
  Project "C:\Users\archbox\Desktop\opengl-cmake-demo\build\ALL_BUILD.vcxproj" on node 1 (default targets).
  Project "C:\Users\archbox\Desktop\opengl-cmake-demo\build\ALL_BUILD.vcxproj" (1) is building "C:\Users\archbox\Desktop\opengl-cmake-demo\buil d\ZERO_CHECK.vcxproj" (2) on node 1 (default targets).

   .. .. .   ... .. .   ... .. .   ... .. .   ... .. .   ... .. .   ... .. .   ... .. .   ... .. . 

  ClCompile:
    C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Tools\MSVC\14.16.27023\bin\HostX86\x64\CL.exe /c /I"C:\vcpkg\installed\x6
    4-windows\include" /Zi /W3 /WX- /diagnostics:classic /Od /Ob0 /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\"Debug\"" /D _MBCS /Gm- /EHsc /RTC1 /M
    Dd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /GR /std:c++17 /Fo"openglDemo1.dir\Debug\\" /Fd"openglDemo1.dir\Debug\vc141.pdb" /Gd
     /TP /errorReport:queue "C:\Users\archbox\Desktop\opengl-cmake-demo\opengl1.cpp"
    Microsoft (R) C/C++ Optimizing Compiler Version 19.16.27025.1 for x64
    opengl1.cpp
    Copyright (C) Microsoft Corporation.  All rights reserved.

    cl /c /I"C:\vcpkg\installed\x64-windows\include" /Zi /W3 /WX- /diagnostics:classic /Od /Ob0 /D WIN32 /D _WINDOWS /D "CMAKE_INTDIR=\"Debug\"
    " /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /GR /std:c++17 /Fo"openglDemo1.dir\Debug\\" /Fd"opengl
    Demo1.dir\Debug\vc141.pdb" /Gd /TP /errorReport:queue "C:\Users\archbox\Desktop\opengl-cmake-demo\opengl1.cpp"

  Link:
    C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Tools\MSVC\14.16.27023\bin\HostX86\x64\link.exe /ERRORREPORT:QUEUE /OUT:"
    C:\Users\archbox\Desktop\opengl-cmake-demo\build\Debug\openglDemo1.exe" /INCREMENTAL /NOLOGO "C:\vcpkg\installed\x64-windows\debug\lib\free
    glut.lib" kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /M
    ANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:/Users/archbox/Desktop/opengl-cmake-demo/build/Debug/openglD
    emo1.pdb" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/Users/archbox/Desktop/opengl-cmake-demo/build/Debug/openglDemo1.li
    b" /MACHINE:X64  /machine:x64 openglDemo1.dir\Debug\opengl1.obj

  ....   ....   ....   ....   ....   ....   ....   ....   ....   ....   ....   ....   ....   ....   ....   ....   ....   .... 

  Done Building Project "C:\Users\archbox\Desktop\opengl-cmake-demo\build\ALL_BUILD.vcxproj" (default targets).


  Build succeeded.
      0 Warning(s)
      0 Error(s)

  Time Elapsed 00:00:06.76
#+END_SRC

Run executable (target run-ex1):

 + This is conveniced target was added for making easier to run the
   executable from the terminal. It is not needed for IDEs like Visual
   Studio, JetBrains - Clion and so on. 

#+BEGIN_SRC sh 
  $ cmake --build build --target run-ex1
#+END_SRC


Compile and run on Linux: 

#+BEGIN_SRC sh 
  $ vcpkg install freeglut   
  $ git clone https://gist.github.com/caiorss/4e36d7423cfd456f39c26ba476873a3c opengl
  $ cd opengl 
  $ cmake -H. -Bbuild 
  $ cmake --build build --target run-ex1 
#+END_SRC

** Example: Project with Nana GUI Library 

GIST: [[https://gist.github.com/caiorss/724942d43cd11c6ee5b3461ac067c846][Nana GUI + VCPKG + CMake project]]

File: *CMakeLists.txt*

#+BEGIN_SRC cmake 
   cmake_minimum_required(VERSION 3.9)

   if(DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
     set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
       CACHE STRING "")
       message(" [INFO] VCPKG CMAKE_TOOLCHAIN_FILE = ${CMAKE_TOOLCHAIN_FILE}")
   endif()

   #======= Global Project Configuration =========#

   project(DummyProject)
   set(CMAKE_CXX_STANDARD 17)     

   #========== Targets Configurations ============#

   ## ==> Target: gui1 - Executable: gui1

   find_package(unofficial-nana CONFIG REQUIRED)
   add_executable(gui1 gui1.cpp)
   target_link_libraries(gui1 PRIVATE
     unofficial::nana::nana fontconfig stdc++fs)

   # Add target to run executable gui1 (similar to $ make run)
   add_custom_target(run-gui1
       COMMAND gui1
       DEPENDS gui1
       WORKING_DIRECTORY ${CMAKE_PROJECT_DIR}
   )

   # Install directory relative to ${CMAKE_PREFIX_PATH}
   install(TARGETS gui1 DESTINATION ./bin)
#+END_SRC

File: *gui1.cpp*

 + Note: Demo code taken from - http://nanapro.org/en-us/

#+BEGIN_SRC cpp 
  #include <nana/gui.hpp>
  #include <nana/gui/widgets/label.hpp>
  #include <nana/gui/widgets/button.hpp>

  int main()
  {
      using namespace nana;

      //Define a form.
      form fm;
      //Define a label and display a text.
      label lab{fm, "Hello, <bold blue size=16>Nana C++ Library</>"};
      lab.format(true);
      //Define a button and answer the click event.
      button btn{fm, "Quit"};
      btn.events().click([&fm]{
          fm.close();
      });
      //Layout management
      fm.div("vert <><<><weight=80% text><>><><weight=24<><button><>><>");
      fm["text"]<<lab;
      fm["button"] << btn;
      fm.collocate();
      //Show the form
      fm.show();
      //Start to event loop process, it blocks until the form is closed.
      exec();
  }
#+END_SRC

Project directory: 

#+BEGIN_SRC sh 
  $ tree -L 1
  .
  ├── build
  ├── CMakeLists.txt
  └── gui1.cpp

  1 directory, 2 files
#+END_SRC

Install Linux dependency libraries (Tested on Linux Fedora): 

 + Note: Sometimes VCPKG cannot install system libraries. In this
   case, it is necessary to use the current distribution package
   manager. 

#+BEGIN_SRC sh 
  $ sudo dnf install libX11-devel.x86_x64
  $ sudo dnf install libXft-devel.x86_64
#+END_SRC

Clone gist containing the project: 

#+BEGIN_SRC sh 
  $ git clone https://gist.github.com/caiorss/724942d43cd11c6ee5b3461ac067c846 sample-vcpkg-proj
  $ cd sample-vcpkg-proj
#+END_SRC

#+RESULTS:

 *Install package Nana with vcpkg:*

#+BEGIN_SRC sh 
  $ vcpkg install nana

   ...  ...  ...  ... 
  -- Using cached /home/archbox/opt/vcpkg/downloads/cnjinhao-nana-v1.6.2.tar.gz
  -- Using source at /home/archbox/opt/vcpkg/buildtrees/nana/src/v1.6.2-51b575c248
  -- Configuring x64-linux-dbg
  -- Configuring x64-linux-rel
  -- Building x64-linux-dbg
  -- Building x64-linux-rel
  -- Performing post-build validation
  -- Performing post-build validation done
  Building package nana[core]:x64-linux... done
  Installing package nana[core]:x64-linux... 
  Installing package nana[core]:x64-linux... done
  Elapsed time for package nana:x64-linux: 1.825 min

  Total elapsed time: 1.825 min

  The package nana:x64-linux provides CMake targets:

      find_package(unofficial-nana CONFIG REQUIRED)
      target_link_libraries(main PRIVATE unofficial::nana::nana)
#+END_SRC

List installed packages: 

#+BEGIN_SRC sh 
   $ vcpkg list
   boost-accumulators:x64-linux                       1.68.0           Boost accumulators module
   boost-algorithm:x64-linux                          1.68.0           Boost algorithm module
   boost-any:x64-linux                                1.68.0           Boost any module
   boost-array:x64-linux                              1.68.0           Boost array module

   ... ... ...   ... ... ...   ... ... ...   ... ... ...   ... ... ...   ... ... ...   ... ... ...
  
   gsl:x64-linux                                      2.4-3            The GNU Scientific Library is a numerical librar...
   gtest:x64-linux                                    1.8.1-1          GoogleTest and GoogleMock testing frameworks.
   libiconv:x64-linux                                 1.15-5           GNU Unicode text conversion
   libjpeg-turbo:x64-linux                            1.5.3-1          libjpeg-turbo is a JPEG image codec that uses SI...
   liblzma:x64-linux                                  5.2.4            Compression library with an API similar to that ...
   libpng:x64-linux                                   1.6.35-1         libpng is a library implementing an interface fo...
   nana:x64-linux                                     1.6.2            Cross-platform library for GUI programming in mo...
   pybind11:x64-linux                                 2.2.3-1          pybind11 is a lightweight header-only library th...
   spdlog:x64-linux                                   1.2.1            Very fast, header only, C++ logging library
   zlib:x64-linux                                     1.2.11-3         A compression librar
#+END_SRC

Filter nana package: 

#+BEGIN_SRC sh 
   $ vcpkg list | grep nana
   nana:x64-linux                                     1.6.2            Cross-platform library for GUI programming in mo...
#+END_SRC

 *Building with CMake Ninja or Makefile*

Cmake configuration step

 + Default system building system
   + $ cmake -H. -Bbuild 

 + Ninja building System:
   + $ cmake -H. -Bbuild -G Ninja

#+BEGIN_SRC sh 
  # Install executable at (.) curret directory
  $ cmake -H. -Bbuild -G Ninja  -DCMAKE_PREFIX_PATH=.

   [INFO] VCPKG CMAKE_TOOLCHAIN_FILE = /home/archbox/opt/vcpkg/scripts/buildsystems/vcpkg.cmake
  -- The C compiler identification is GNU 8.2.1
  -- The CXX compiler identification is GNU 8.2.1
  -- Check for working C compiler: /usr/lib64/ccache/cc

   ... ... ... ... ... ... 

  -- Found Freetype: /home/archbox/build/vcpkg/installed/x64-linux/lib/libfreetype.a (found version "2.8.1") 
  -- Found ZLIB: /home/archbox/build/vcpkg/installed/x64-linux/debug/lib/libz.a (found version "1.2.11") 
  -- Found PNG: /home/archbox/build/vcpkg/installed/x64-linux/share/png/../../lib/libpng16.a (found version "1.6.35") 
  -- Found BZip2: /home/archbox/build/vcpkg/installed/x64-linux/lib/libbz2.a (found version "1.0.6") 
  -- Looking for BZ2_bzCompressInit
  -- Looking for BZ2_bzCompressInit - found
  -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so
  -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found

   ... ... ... ... ... ... 

  -- Looking for shmat - found
  -- Found X11: /usr/lib64/libX11.so
  -- Found JPEG: /home/archbox/build/vcpkg/installed/x64-linux/debug/lib/libjpeg.a  
  -- Configuring done
  -- Generating done
  -- Build files have been written to: /home/archbox/root-scripts/vcpkg2/build
#+END_SRC

Build all targets: 

#+BEGIN_SRC sh 
 $ cmake --build build --target 
#+END_SRC

Build and run executable target gui1 (target: run-gui1)

#+BEGIN_SRC sh 
  $ cmake --build build --target run-gui1
  [3/3] cd /home/archbox/root-scripts/vcpkg2/build && /home/archbox/root-scripts/vcpkg2/build/gui1
#+END_SRC

Install executable: 

#+BEGIN_SRC sh 
  $ cmake --build build --target install
  [2/3] Install the project...
  -- Install configuration: ""
  -- Installing: /home/archbox/root-scripts/vcpkg2/./bin/gui1
#+END_SRC

Run installed executable at ./bin 

#+BEGIN_SRC sh 
  $ bin/gui1 
#+END_SRC

Directory after compilation: 

#+BEGIN_SRC sh 
  $ tree . -L 2
  .
  ├── bin
  │   └── gui1
  ├── build
  │   ├── build.ninja
  │   ├── CMakeCache.txt
  │   ├── CMakeFiles
  │   ├── cmake_install.cmake
  │   ├── gui1
  │   ├── install_manifest.txt
  │   └── rules.ninja
  ├── CMakeLists.txt
  └── gui1.cpp

  3 directories, 9 files
#+END_SRC

 *Analyse executable:*

Check binary format 

#+BEGIN_SRC sh 
  $ file bin/gui1 

  bin/gui1: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux),
  dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for
  GNU/Linux 3.2.0,
  BuildID[sha1]=b2273c2b397213af8c8b8e8808da1ebc195d3b4d, with
  debug_info, not stripped
#+END_SRC

Check file size 

#+BEGIN_SRC sh
  # File size 
  $ du -h bin/gui1
  19M	bin/gui1
  19M	total
#+END_SRC

Remove debugging symbols 

#+BEGIN_SRC sh 
  $ strip bin/gui1 
#+END_SRC

Check file size again: 

#+BEGIN_SRC sh 
  $ du -h bin/gui1
  3.3M	bin/gui1
  3.3M	total
#+END_SRC

Check shared libraries dependencies:

#+BEGIN_SRC sh 
   $ ldd bin/gui1
           linux-vdso.so.1 (0x00007fff18930000)
           libfontconfig.so.1 => /lib64/libfontconfig.so.1 (0x00007f5f73116000)
           libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f5f72ef7000)
           libX11.so.6 => /lib64/libX11.so.6 (0x00007f5f72bb6000)
           libXext.so.6 => /lib64/libXext.so.6 (0x00007f5f729a4000)
           libXft.so.2 => /lib64/libXft.so.2 (0x00007f5f7278d000)
           libstdc++.so.6 => /lib64/libstdc++.so.6 (0x00007f5f723fa000)
           libm.so.6 => /lib64/libm.so.6 (0x00007f5f72066000)
           libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007f5f71e4e000)
           libc.so.6 => /lib64/libc.so.6 (0x00007f5f71a8f000)
           libfreetype.so.6 => /lib64/libfreetype.so.6 (0x00007f5f717d8000)
           libexpat.so.1 => /lib64/libexpat.so.1 (0x00007f5f7159d000)
           libuuid.so.1 => /lib64/libuuid.so.1 (0x00007f5f71396000)
           /lib64/ld-linux-x86-64.so.2 (0x00007f5f7335a000)
           libxcb.so.1 => /lib64/libxcb.so.1 (0x00007f5f7116d000)
           libdl.so.2 => /lib64/libdl.so.2 (0x00007f5f70f69000)
           libXrender.so.1 => /lib64/libXrender.so.1 (0x00007f5f70d5e000)
           libbz2.so.1 => /lib64/libbz2.so.1 (0x00007f5f70b4d000)
           libpng16.so.16 => /lib64/libpng16.so.16 (0x00007f5f70919000)
           libz.so.1 => /lib64/libz.so.1 (0x00007f5f70702000)
           libXau.so.6 => /lib64/libXau.so.6 (0x00007f5f704fe000)
#+END_SRC



